
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.adolfo.analizadores;

import java_cup.runtime.*;
import java.util.List;
import java.util.ArrayList;
import com.adolfo.analizadores.Token;
import com.adolfo.analizadores.datos.LexemeId;
import com.adolfo.analizadores.datos.EtiquetaId;
import com.adolfo.analizadores.datos.TablaSimbolo;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ParserSym extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public ParserSym() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ParserSym(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserSym(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\026\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\007\013\000\002\005\003\000\002\005\003" +
    "\000\002\006\003\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\010\004\000\002" +
    "\010\003\000\002\010\003\000\002\010\003\000\002\010" +
    "\003\000\002\004\004\000\002\004\004\000\002\004\004" +
    "\000\002\004\004\000\002\004\004\000\002\004\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\047\000\006\016\004\017\007\001\002\000\004\013" +
    "\012\001\002\000\006\016\004\017\007\001\002\000\004" +
    "\002\010\001\002\000\004\002\uffff\001\002\000\004\002" +
    "\001\001\002\000\004\002\000\001\002\000\014\004\017" +
    "\005\016\006\020\007\015\010\013\001\002\000\004\013" +
    "\ufff8\001\002\000\004\013\021\001\002\000\004\013\ufffb" +
    "\001\002\000\004\013\ufff9\001\002\000\004\013\ufffa\001" +
    "\002\000\004\013\ufff7\001\002\000\006\011\023\012\024" +
    "\001\002\000\004\013\025\001\002\000\004\013\ufffc\001" +
    "\002\000\004\013\ufffd\001\002\000\004\020\026\001\002" +
    "\000\004\013\027\001\002\000\014\014\033\015\030\020" +
    "\031\021\034\022\035\001\002\000\006\016\ufff2\017\ufff2" +
    "\001\002\000\006\016\ufff5\017\ufff5\001\002\000\006\016" +
    "\ufffe\017\ufffe\001\002\000\016\014\041\015\037\016\036" +
    "\020\040\021\043\023\044\001\002\000\006\016\ufff4\017" +
    "\ufff4\001\002\000\006\016\ufff3\017\ufff3\001\002\000\016" +
    "\014\041\015\037\016\036\020\040\021\043\023\044\001" +
    "\002\000\016\014\041\015\037\016\036\020\040\021\043" +
    "\023\044\001\002\000\016\014\041\015\037\016\036\020" +
    "\040\021\043\023\044\001\002\000\006\016\uffec\017\uffec" +
    "\001\002\000\006\016\ufff6\017\ufff6\001\002\000\016\014" +
    "\041\015\037\016\036\020\040\021\043\023\044\001\002" +
    "\000\016\014\041\015\037\016\036\020\040\021\043\023" +
    "\044\001\002\000\006\016\ufff1\017\ufff1\001\002\000\006" +
    "\016\uffef\017\uffef\001\002\000\006\016\ufff0\017\ufff0\001" +
    "\002\000\006\016\uffee\017\uffee\001\002\000\006\016\uffed" +
    "\017\uffed\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\047\000\006\002\005\007\004\001\001\000\002\001" +
    "\001\000\006\002\010\007\004\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\006\013\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\005\021\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\010\031\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\004\041\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\004\050" +
    "\001\001\000\004\004\047\001\001\000\004\004\046\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\004\045" +
    "\001\001\000\004\004\044\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserSym$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserSym$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserSym$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    //declaracion de variables
  
    private List<LexemeId> ListTablaSimbol;
    public ParserSym(Lexico lex) {
        super(lex);

       
        this.ListTablaSimbol = new ArrayList();
      
    }


//recuperacion de errroes
    public void report_error(String message, Object info) {
		System.out.println("reporterror");
	}
	public void report_fatal_error(String message, Object info) {
		System.out.println("reportfatal");
	}
	public void report_fatal_error(Symbol cur) {
		System.out.println("unrecovered_syntax_error");
	}
    
    @Override
    public void syntax_error(Symbol st) {
       Token token = (Token) st.value;
      
             
        //report_error("Error Sintactico con el  Token:"+ token.getLexema()+" este no pertenece a la estructura - linea: "+token.getLine()+" - columna: "+token.getColumna() + "\n",null);

    System.out.println("err: " + token.getLexema() + " este no pertenece a la estructura - linea: " + token.getLine() + ", columna: " + token.getColumna());
       // errorSintactico.add(String.format("Error Sintactico lexema: %s  linea: %d  columna: %d. no se esperaba ese token.", token.getLexema(), token.getLine(), token.getColumna()));
    }

    protected int error_sync_size() {
		return 1;
	}

    public List<LexemeId> getListTablaSimbol(){
	        return ListTablaSimbol;
    }

 

/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ParserSym$actions {
  private final ParserSym parser;

  /** Constructor */
  CUP$ParserSym$actions(ParserSym parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ParserSym$do_action_part00000000(
    int                        CUP$ParserSym$act_num,
    java_cup.runtime.lr_parser CUP$ParserSym$parser,
    java.util.Stack            CUP$ParserSym$stack,
    int                        CUP$ParserSym$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserSym$result;

      /* select the action based on the action number */
      switch (CUP$ParserSym$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= exp_ini EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserSym$stack.elementAt(CUP$ParserSym$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserSym$stack.elementAt(CUP$ParserSym$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ParserSym$stack.elementAt(CUP$ParserSym$top-1)).value;
		RESULT = start_val;
              CUP$ParserSym$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserSym$stack.elementAt(CUP$ParserSym$top-1)), ((java_cup.runtime.Symbol)CUP$ParserSym$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserSym$parser.done_parsing();
          return CUP$ParserSym$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // exp_ini ::= exp_sig exp_ini 
            {
              Object RESULT =null;

              CUP$ParserSym$result = parser.getSymbolFactory().newSymbol("exp_ini",0, ((java_cup.runtime.Symbol)CUP$ParserSym$stack.elementAt(CUP$ParserSym$top-1)), ((java_cup.runtime.Symbol)CUP$ParserSym$stack.peek()), RESULT);
            }
          return CUP$ParserSym$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // exp_ini ::= PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$ParserSym$result = parser.getSymbolFactory().newSymbol("exp_ini",0, ((java_cup.runtime.Symbol)CUP$ParserSym$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSym$stack.peek()), RESULT);
            }
          return CUP$ParserSym$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // exp_sig ::= ID COMA exp_tipo COMA exp_modo COMA NUMENTERO COMA exp_dat 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$ParserSym$stack.elementAt(CUP$ParserSym$top-8)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$ParserSym$stack.elementAt(CUP$ParserSym$top-8)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$ParserSym$stack.elementAt(CUP$ParserSym$top-8)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$ParserSym$stack.elementAt(CUP$ParserSym$top-6)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ParserSym$stack.elementAt(CUP$ParserSym$top-6)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ParserSym$stack.elementAt(CUP$ParserSym$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserSym$stack.elementAt(CUP$ParserSym$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserSym$stack.elementAt(CUP$ParserSym$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ParserSym$stack.elementAt(CUP$ParserSym$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserSym$stack.elementAt(CUP$ParserSym$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserSym$stack.elementAt(CUP$ParserSym$top-2)).right;
		Token e1 = (Token)((java_cup.runtime.Symbol) CUP$ParserSym$stack.elementAt(CUP$ParserSym$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserSym$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserSym$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$ParserSym$stack.peek()).value;
		
                                                     ListTablaSimbol.add(new LexemeId(tp.getLexema(), n.toString(), e.toString(), e1.getLexema(), e2.toString()));
                                                                                         
              CUP$ParserSym$result = parser.getSymbolFactory().newSymbol("exp_sig",5, ((java_cup.runtime.Symbol)CUP$ParserSym$stack.elementAt(CUP$ParserSym$top-8)), ((java_cup.runtime.Symbol)CUP$ParserSym$stack.peek()), RESULT);
            }
          return CUP$ParserSym$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // exp_modo ::= LOCAL 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$ParserSym$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$ParserSym$stack.peek()).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$ParserSym$stack.peek()).value;
		RESULT = tp.getLexema(); 
              CUP$ParserSym$result = parser.getSymbolFactory().newSymbol("exp_modo",3, ((java_cup.runtime.Symbol)CUP$ParserSym$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSym$stack.peek()), RESULT);
            }
          return CUP$ParserSym$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // exp_modo ::= GLOBAL 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$ParserSym$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$ParserSym$stack.peek()).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$ParserSym$stack.peek()).value;
		RESULT = tp.getLexema(); 
              CUP$ParserSym$result = parser.getSymbolFactory().newSymbol("exp_modo",3, ((java_cup.runtime.Symbol)CUP$ParserSym$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSym$stack.peek()), RESULT);
            }
          return CUP$ParserSym$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // exp_tipo ::= CHAR 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$ParserSym$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$ParserSym$stack.peek()).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$ParserSym$stack.peek()).value;
		RESULT = tp.getLexema(); 
              CUP$ParserSym$result = parser.getSymbolFactory().newSymbol("exp_tipo",4, ((java_cup.runtime.Symbol)CUP$ParserSym$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSym$stack.peek()), RESULT);
            }
          return CUP$ParserSym$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // exp_tipo ::= ENTERO 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$ParserSym$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$ParserSym$stack.peek()).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$ParserSym$stack.peek()).value;
		RESULT = tp.getLexema(); 
              CUP$ParserSym$result = parser.getSymbolFactory().newSymbol("exp_tipo",4, ((java_cup.runtime.Symbol)CUP$ParserSym$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSym$stack.peek()), RESULT);
            }
          return CUP$ParserSym$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // exp_tipo ::= DECIMAL 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$ParserSym$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$ParserSym$stack.peek()).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$ParserSym$stack.peek()).value;
		RESULT = tp.getLexema(); 
              CUP$ParserSym$result = parser.getSymbolFactory().newSymbol("exp_tipo",4, ((java_cup.runtime.Symbol)CUP$ParserSym$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSym$stack.peek()), RESULT);
            }
          return CUP$ParserSym$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // exp_tipo ::= STRING 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$ParserSym$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$ParserSym$stack.peek()).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$ParserSym$stack.peek()).value;
		RESULT = tp.getLexema(); 
              CUP$ParserSym$result = parser.getSymbolFactory().newSymbol("exp_tipo",4, ((java_cup.runtime.Symbol)CUP$ParserSym$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSym$stack.peek()), RESULT);
            }
          return CUP$ParserSym$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // exp_tipo ::= BOOLEANO 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$ParserSym$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$ParserSym$stack.peek()).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$ParserSym$stack.peek()).value;
		RESULT = tp.getLexema(); 
              CUP$ParserSym$result = parser.getSymbolFactory().newSymbol("exp_tipo",4, ((java_cup.runtime.Symbol)CUP$ParserSym$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSym$stack.peek()), RESULT);
            }
          return CUP$ParserSym$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // exp_dat ::= COMILLA exp_cadenatext 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$ParserSym$stack.elementAt(CUP$ParserSym$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$ParserSym$stack.elementAt(CUP$ParserSym$top-1)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$ParserSym$stack.elementAt(CUP$ParserSym$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$ParserSym$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ParserSym$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ParserSym$stack.peek()).value;
		RESULT = tp.getLexema() + n.toString(); 
              CUP$ParserSym$result = parser.getSymbolFactory().newSymbol("exp_dat",6, ((java_cup.runtime.Symbol)CUP$ParserSym$stack.elementAt(CUP$ParserSym$top-1)), ((java_cup.runtime.Symbol)CUP$ParserSym$stack.peek()), RESULT);
            }
          return CUP$ParserSym$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // exp_dat ::= NUMENTERO 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$ParserSym$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$ParserSym$stack.peek()).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$ParserSym$stack.peek()).value;
		RESULT = tp.getLexema(); 
              CUP$ParserSym$result = parser.getSymbolFactory().newSymbol("exp_dat",6, ((java_cup.runtime.Symbol)CUP$ParserSym$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSym$stack.peek()), RESULT);
            }
          return CUP$ParserSym$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // exp_dat ::= NUMDECIMAL 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$ParserSym$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$ParserSym$stack.peek()).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$ParserSym$stack.peek()).value;
		RESULT = tp.getLexema(); 
              CUP$ParserSym$result = parser.getSymbolFactory().newSymbol("exp_dat",6, ((java_cup.runtime.Symbol)CUP$ParserSym$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSym$stack.peek()), RESULT);
            }
          return CUP$ParserSym$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // exp_dat ::= CARACTER 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$ParserSym$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$ParserSym$stack.peek()).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$ParserSym$stack.peek()).value;
		RESULT = tp.getLexema(); 
              CUP$ParserSym$result = parser.getSymbolFactory().newSymbol("exp_dat",6, ((java_cup.runtime.Symbol)CUP$ParserSym$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSym$stack.peek()), RESULT);
            }
          return CUP$ParserSym$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // exp_dat ::= BOOLEANOS 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$ParserSym$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$ParserSym$stack.peek()).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$ParserSym$stack.peek()).value;
		RESULT = tp.getLexema(); 
              CUP$ParserSym$result = parser.getSymbolFactory().newSymbol("exp_dat",6, ((java_cup.runtime.Symbol)CUP$ParserSym$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSym$stack.peek()), RESULT);
            }
          return CUP$ParserSym$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // exp_cadenatext ::= CADENA exp_cadenatext 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$ParserSym$stack.elementAt(CUP$ParserSym$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$ParserSym$stack.elementAt(CUP$ParserSym$top-1)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$ParserSym$stack.elementAt(CUP$ParserSym$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$ParserSym$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ParserSym$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ParserSym$stack.peek()).value;
		RESULT = tp.getLexema() + n.toString(); 
              CUP$ParserSym$result = parser.getSymbolFactory().newSymbol("exp_cadenatext",2, ((java_cup.runtime.Symbol)CUP$ParserSym$stack.elementAt(CUP$ParserSym$top-1)), ((java_cup.runtime.Symbol)CUP$ParserSym$stack.peek()), RESULT);
            }
          return CUP$ParserSym$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // exp_cadenatext ::= NUMENTERO exp_cadenatext 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$ParserSym$stack.elementAt(CUP$ParserSym$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$ParserSym$stack.elementAt(CUP$ParserSym$top-1)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$ParserSym$stack.elementAt(CUP$ParserSym$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$ParserSym$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ParserSym$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ParserSym$stack.peek()).value;
		RESULT = tp.getLexema() + n.toString(); 
              CUP$ParserSym$result = parser.getSymbolFactory().newSymbol("exp_cadenatext",2, ((java_cup.runtime.Symbol)CUP$ParserSym$stack.elementAt(CUP$ParserSym$top-1)), ((java_cup.runtime.Symbol)CUP$ParserSym$stack.peek()), RESULT);
            }
          return CUP$ParserSym$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // exp_cadenatext ::= NUMDECIMAL exp_cadenatext 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$ParserSym$stack.elementAt(CUP$ParserSym$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$ParserSym$stack.elementAt(CUP$ParserSym$top-1)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$ParserSym$stack.elementAt(CUP$ParserSym$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$ParserSym$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ParserSym$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ParserSym$stack.peek()).value;
		RESULT = tp.getLexema() + n.toString(); 
              CUP$ParserSym$result = parser.getSymbolFactory().newSymbol("exp_cadenatext",2, ((java_cup.runtime.Symbol)CUP$ParserSym$stack.elementAt(CUP$ParserSym$top-1)), ((java_cup.runtime.Symbol)CUP$ParserSym$stack.peek()), RESULT);
            }
          return CUP$ParserSym$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // exp_cadenatext ::= BOOLEANOS exp_cadenatext 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$ParserSym$stack.elementAt(CUP$ParserSym$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$ParserSym$stack.elementAt(CUP$ParserSym$top-1)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$ParserSym$stack.elementAt(CUP$ParserSym$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$ParserSym$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ParserSym$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ParserSym$stack.peek()).value;
		RESULT = tp.getLexema() + n.toString(); 
              CUP$ParserSym$result = parser.getSymbolFactory().newSymbol("exp_cadenatext",2, ((java_cup.runtime.Symbol)CUP$ParserSym$stack.elementAt(CUP$ParserSym$top-1)), ((java_cup.runtime.Symbol)CUP$ParserSym$stack.peek()), RESULT);
            }
          return CUP$ParserSym$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // exp_cadenatext ::= ID exp_cadenatext 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$ParserSym$stack.elementAt(CUP$ParserSym$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$ParserSym$stack.elementAt(CUP$ParserSym$top-1)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$ParserSym$stack.elementAt(CUP$ParserSym$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$ParserSym$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ParserSym$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ParserSym$stack.peek()).value;
		RESULT = tp.getLexema() + n.toString(); 
              CUP$ParserSym$result = parser.getSymbolFactory().newSymbol("exp_cadenatext",2, ((java_cup.runtime.Symbol)CUP$ParserSym$stack.elementAt(CUP$ParserSym$top-1)), ((java_cup.runtime.Symbol)CUP$ParserSym$stack.peek()), RESULT);
            }
          return CUP$ParserSym$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // exp_cadenatext ::= COMILLA 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$ParserSym$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$ParserSym$stack.peek()).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$ParserSym$stack.peek()).value;
		RESULT = tp.getLexema(); 
              CUP$ParserSym$result = parser.getSymbolFactory().newSymbol("exp_cadenatext",2, ((java_cup.runtime.Symbol)CUP$ParserSym$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSym$stack.peek()), RESULT);
            }
          return CUP$ParserSym$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ParserSym$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ParserSym$do_action(
    int                        CUP$ParserSym$act_num,
    java_cup.runtime.lr_parser CUP$ParserSym$parser,
    java.util.Stack            CUP$ParserSym$stack,
    int                        CUP$ParserSym$top)
    throws java.lang.Exception
    {
              return CUP$ParserSym$do_action_part00000000(
                               CUP$ParserSym$act_num,
                               CUP$ParserSym$parser,
                               CUP$ParserSym$stack,
                               CUP$ParserSym$top);
    }
}

}
