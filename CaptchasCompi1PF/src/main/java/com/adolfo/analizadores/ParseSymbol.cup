//codigo java
package com.adolfo.analizadores;
/*importar librerias o archivos utilizados*/
import java_cup.runtime.*;
import java.util.List;
import java.util.ArrayList;
import com.adolfo.analizadores.Token;
import com.adolfo.analizadores.datos.LexemeId;
import com.adolfo.analizadores.datos.EtiquetaId;
import com.adolfo.analizadores.datos.TablaSimbolo;

 parser code {:
    //declaracion de variables
  
    private List<LexemeId> ListTablaSimbol;
    public ParserSym(Lexico lex) {
        super(lex);

       
        this.ListTablaSimbol = new ArrayList();
      
    }


//recuperacion de errroes
    public void report_error(String message, Object info) {
		System.out.println("reporterror");
	}
	public void report_fatal_error(String message, Object info) {
		System.out.println("reportfatal");
	}
	public void report_fatal_error(Symbol cur) {
		System.out.println("unrecovered_syntax_error");
	}
    
    @Override
    public void syntax_error(Symbol st) {
       Token token = (Token) st.value;
      
             
        //report_error("Error Sintactico con el  Token:"+ token.getLexema()+" este no pertenece a la estructura - linea: "+token.getLine()+" - columna: "+token.getColumna() + "\n",null);

    System.out.println("err: " + token.getLexema() + " este no pertenece a la estructura - linea: " + token.getLine() + ", columna: " + token.getColumna());
       // errorSintactico.add(String.format("Error Sintactico lexema: %s  linea: %d  columna: %d. no se esperaba ese token.", token.getLexema(), token.getLine(), token.getColumna()));
    }

    protected int error_sync_size() {
		return 1;
	}

    public List<LexemeId> getListTablaSimbol(){
	        return ListTablaSimbol;
    }

 :}

 /*simbolos terminales*/
 terminal Token  ENTERO, DECIMAL, BOOLEANO, CHAR, STRING, GLOBAL,
            LOCAL, COMA, COMILLA, BOOLEANOS, ID, PUNTOCOMA,
            NUMENTERO, NUMDECIMAL, CARACTER, CADENA; 


 /*simbolos no terminales*/
non terminal exp_ini, par_dat, exp_cadenatext, exp_modo, exp_tipo, exp_sig, exp_dat;


/* Producciones siendo A el inicial*/
start with exp_ini;

exp_ini ::= exp_sig exp_ini
    | PUNTOCOMA
    ;

exp_sig ::=  ID:tp COMA exp_tipo:n COMA exp_modo:e COMA NUMENTERO:e1 COMA exp_dat:e2   {:
                                                     ListTablaSimbol.add(new LexemeId(tp.getLexema(), n.toString(), e.toString(), e1.getLexema(), e2.toString()));
                                                                                         :}
    ;

exp_modo ::= LOCAL:tp            {:RESULT = tp.getLexema(); :}
    | GLOBAL:tp                   {:RESULT = tp.getLexema(); :}
    ;

exp_tipo ::= CHAR:tp             {:RESULT = tp.getLexema(); :}
    | ENTERO:tp                  {:RESULT = tp.getLexema(); :}
    | DECIMAL:tp                 {:RESULT = tp.getLexema(); :}
    | STRING:tp                  {:RESULT = tp.getLexema(); :}
    | BOOLEANO:tp                 {:RESULT = tp.getLexema(); :}
    ;

exp_dat ::= COMILLA:tp exp_cadenatext:n         {:RESULT = tp.getLexema() + n.toString(); :}
    | NUMENTERO:tp                               {:RESULT = tp.getLexema(); :}
    | NUMDECIMAL:tp                              {:RESULT = tp.getLexema(); :}
    | CARACTER:tp                                {:RESULT = tp.getLexema(); :}
    | BOOLEANOS:tp                               {:RESULT = tp.getLexema(); :}
    ;


exp_cadenatext ::= CADENA:tp exp_cadenatext:n   {:RESULT = tp.getLexema() + n.toString(); :}
    | NUMENTERO:tp exp_cadenatext:n             {:RESULT = tp.getLexema() + n.toString(); :}
    | NUMDECIMAL:tp exp_cadenatext:n            {:RESULT = tp.getLexema() + n.toString(); :}
    | BOOLEANOS:tp exp_cadenatext:n             {:RESULT = tp.getLexema() + n.toString(); :}
    | ID:tp exp_cadenatext:n                    {:RESULT = tp.getLexema() + n.toString(); :}
    | COMILLA:tp                                {:RESULT = tp.getLexema(); :}
    ;
