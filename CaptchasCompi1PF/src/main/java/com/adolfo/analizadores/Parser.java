
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.adolfo.analizadores;

import java_cup.runtime.*;
import java.util.List;
import java.util.ArrayList;
import com.adolfo.analizadores.Token;
import com.adolfo.analizadores.datos.LexemeId;
import com.adolfo.analizadores.datos.EtiquetaId;
import com.adolfo.analizadores.datos.TablaSimbolo;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u0132\000\002\002\004\000\002\002\006\000\002\002" +
    "\004\000\002\003\012\000\002\003\011\000\002\003\003" +
    "\000\002\005\004\000\002\005\004\000\002\005\004\000" +
    "\002\005\004\000\002\005\003\000\002\004\012\000\002" +
    "\004\004\000\002\004\006\000\002\006\011\000\002\006" +
    "\012\000\002\006\006\000\002\006\004\000\002\024\011" +
    "\000\002\024\003\000\002\011\011\000\002\011\003\000" +
    "\002\012\004\000\002\012\004\000\002\012\004\000\002" +
    "\012\004\000\002\012\004\000\002\012\004\000\002\012" +
    "\004\000\002\012\004\000\002\012\004\000\002\012\004" +
    "\000\002\012\004\000\002\012\004\000\002\012\004\000" +
    "\002\012\004\000\002\012\004\000\002\012\003\000\002" +
    "\007\011\000\002\007\011\000\002\007\011\000\002\007" +
    "\011\000\002\007\006\000\002\007\011\000\002\007\012" +
    "\000\002\007\010\000\002\007\011\000\002\007\011\000" +
    "\002\007\004\000\002\007\012\000\002\007\006\000\002" +
    "\007\004\000\002\026\011\000\002\026\011\000\002\026" +
    "\011\000\002\026\011\000\002\026\006\000\002\026\011" +
    "\000\002\026\012\000\002\026\010\000\002\026\011\000" +
    "\002\026\004\000\002\026\006\000\002\027\012\000\002" +
    "\027\012\000\002\027\012\000\002\027\012\000\002\027" +
    "\012\000\002\027\011\000\002\027\011\000\002\027\003" +
    "\000\002\023\012\000\002\023\012\000\002\023\012\000" +
    "\002\023\012\000\002\023\012\000\002\023\011\000\002" +
    "\023\011\000\002\023\003\000\002\017\012\000\002\017" +
    "\012\000\002\017\012\000\002\017\012\000\002\017\012" +
    "\000\002\017\012\000\002\017\004\000\002\013\012\000" +
    "\002\013\012\000\002\013\012\000\002\013\012\000\002" +
    "\013\012\000\002\013\003\000\002\015\012\000\002\015" +
    "\012\000\002\015\012\000\002\015\012\000\002\015\012" +
    "\000\002\015\012\000\002\015\003\000\002\016\012\000" +
    "\002\016\011\000\002\016\012\000\002\016\012\000\002" +
    "\016\012\000\002\016\003\000\002\025\006\000\002\025" +
    "\006\000\002\010\004\000\002\010\004\000\002\010\004" +
    "\000\002\010\004\000\002\010\004\000\002\010\004\000" +
    "\002\010\004\000\002\010\004\000\002\010\004\000\002" +
    "\010\004\000\002\010\004\000\002\010\004\000\002\010" +
    "\004\000\002\010\004\000\002\014\011\000\002\014\004" +
    "\000\002\020\003\000\002\020\003\000\002\021\004\000" +
    "\002\021\004\000\002\022\004\000\002\022\004\000\002" +
    "\022\004\000\002\022\004\000\002\030\006\000\002\031" +
    "\010\000\002\031\010\000\002\031\006\000\002\032\004" +
    "\000\002\032\010\000\002\032\007\000\002\032\014\000" +
    "\002\032\017\000\002\032\013\000\002\032\007\000\002" +
    "\032\003\000\002\032\004\000\002\042\004\000\002\042" +
    "\010\000\002\042\007\000\002\042\014\000\002\042\017" +
    "\000\002\042\013\000\002\042\007\000\002\042\005\000" +
    "\002\042\004\000\002\037\004\000\002\037\004\000\002" +
    "\074\005\000\002\074\003\000\002\072\003\000\002\072" +
    "\003\000\002\072\005\000\002\072\005\000\002\073\005" +
    "\000\002\073\005\000\002\073\003\000\002\071\004\000" +
    "\002\071\004\000\002\071\003\000\002\071\004\000\002" +
    "\071\003\000\002\071\004\000\002\036\014\000\002\036" +
    "\007\000\002\036\002\000\002\041\005\000\002\041\005" +
    "\000\002\041\005\000\002\041\005\000\002\041\006\000" +
    "\002\041\003\000\002\070\004\000\002\070\004\000\002" +
    "\070\004\000\002\070\004\000\002\070\002\000\002\040" +
    "\005\000\002\040\006\000\002\067\003\000\002\067\003" +
    "\000\002\067\003\000\002\033\005\000\002\033\005\000" +
    "\002\033\005\000\002\033\005\000\002\033\005\000\002" +
    "\033\006\000\002\033\006\000\002\033\006\000\002\033" +
    "\006\000\002\033\006\000\002\033\004\000\002\075\005" +
    "\000\002\076\005\000\002\076\005\000\002\076\005\000" +
    "\002\076\005\000\002\076\005\000\002\076\003\000\002" +
    "\052\005\000\002\052\005\000\002\052\003\000\002\065" +
    "\003\000\002\065\003\000\002\066\005\000\002\066\006" +
    "\000\002\066\005\000\002\066\006\000\002\066\005\000" +
    "\002\066\003\000\002\051\005\000\002\051\005\000\002" +
    "\051\012\000\002\051\005\000\002\051\003\000\002\063" +
    "\006\000\002\063\006\000\002\063\006\000\002\063\006" +
    "\000\002\063\006\000\002\064\003\000\002\064\004\000" +
    "\002\062\005\000\002\062\005\000\002\062\003\000\002" +
    "\061\003\000\002\061\003\000\002\061\003\000\002\061" +
    "\004\000\002\061\003\000\002\050\005\000\002\050\005" +
    "\000\002\050\007\000\002\050\003\000\002\060\005\000" +
    "\002\060\003\000\002\046\005\000\002\046\005\000\002" +
    "\046\007\000\002\046\003\000\002\054\005\000\002\054" +
    "\005\000\002\054\005\000\002\054\005\000\002\054\005" +
    "\000\002\054\003\000\002\053\003\000\002\053\003\000" +
    "\002\053\003\000\002\053\003\000\002\047\005\000\002" +
    "\047\005\000\002\047\007\000\002\047\003\000\002\056" +
    "\005\000\002\056\005\000\002\056\005\000\002\056\005" +
    "\000\002\056\005\000\002\056\003\000\002\055\003\000" +
    "\002\055\003\000\002\055\003\000\002\055\003\000\002" +
    "\055\003\000\002\043\004\000\002\043\005\000\002\044" +
    "\005\000\002\044\006\000\002\044\003\000\002\057\003" +
    "\000\002\057\004\000\002\045\010\000\002\045\010\000" +
    "\002\045\010\000\002\045\010\000\002\045\005\000\002" +
    "\045\010\000\002\045\011\000\002\045\007\000\002\045" +
    "\010\000\002\045\010\000\002\034\003\000\002\034\004" +
    "\000\002\035\004\000\002\035\004\000\002\035\004\000" +
    "\002\035\004\000\002\035\004\000\002\035\004\000\002" +
    "\035\004\000\002\035\004\000\002\035\004\000\002\035" +
    "\004\000\002\035\004\000\002\035\004\000\002\035\004" +
    "\000\002\035\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0421\000\006\003\005\055\004\001\002\000\004\004" +
    "\u0409\001\002\000\004\055\010\001\002\000\004\002\007" +
    "\001\002\000\004\002\001\001\002\000\010\005\016\010" +
    "\015\024\014\001\002\000\004\002\uffff\001\002\000\004" +
    "\055\010\001\002\000\004\002\ufff5\001\002\000\004\056" +
    "\u0215\001\002\000\006\056\152\066\151\001\002\000\004" +
    "\056\017\001\002\000\004\055\021\001\002\000\004\055" +
    "\147\001\002\000\012\006\026\007\024\024\014\065\025" +
    "\001\002\000\004\055\021\001\002\000\004\055\ufff0\001" +
    "\002\000\006\056\074\066\072\001\002\000\004\005\070" +
    "\001\002\000\004\056\027\001\002\000\036\054\041\055" +
    "\036\062\035\063\046\064\031\065\042\070\034\071\037" +
    "\072\033\076\032\130\040\131\043\132\045\135\030\001" +
    "\002\000\036\054\041\055\036\062\035\063\046\064\031" +
    "\065\042\070\034\071\037\072\033\076\032\130\040\131" +
    "\043\132\045\135\030\001\002\000\036\054\041\055\036" +
    "\062\035\063\046\064\031\065\042\070\034\071\037\072" +
    "\033\076\032\130\040\131\043\132\045\135\030\001\002" +
    "\000\036\054\041\055\036\062\035\063\046\064\031\065" +
    "\042\070\034\071\037\072\033\076\032\130\040\131\043" +
    "\132\045\135\030\001\002\000\036\054\041\055\036\062" +
    "\035\063\046\064\031\065\042\070\034\071\037\072\033" +
    "\076\032\130\040\131\043\132\045\135\030\001\002\000" +
    "\036\054\041\055\036\062\035\063\046\064\031\065\042" +
    "\070\034\071\037\072\033\076\032\130\040\131\043\132" +
    "\045\135\030\001\002\000\036\054\041\055\036\062\035" +
    "\063\046\064\031\065\042\070\034\071\037\072\033\076" +
    "\032\130\040\131\043\132\045\135\030\001\002\000\004" +
    "\065\061\001\002\000\036\054\041\055\036\062\035\063" +
    "\046\064\031\065\042\070\034\071\037\072\033\076\032" +
    "\130\040\131\043\132\045\135\030\001\002\000\036\054" +
    "\041\055\036\062\035\063\046\064\031\065\042\070\034" +
    "\071\037\072\033\076\032\130\040\131\043\132\045\135" +
    "\030\001\002\000\036\054\041\055\036\062\035\063\046" +
    "\064\031\065\042\070\034\071\037\072\033\076\032\130" +
    "\040\131\043\132\045\135\030\001\002\000\036\054\041" +
    "\055\036\062\035\063\046\064\031\065\042\070\034\071" +
    "\037\072\033\076\032\130\040\131\043\132\045\135\030" +
    "\001\002\000\036\054\041\055\036\062\035\063\046\064" +
    "\031\065\042\070\034\071\037\072\033\076\032\130\040" +
    "\131\043\132\045\135\030\001\002\000\004\006\051\001" +
    "\002\000\036\054\041\055\036\062\035\063\046\064\031" +
    "\065\042\070\034\071\037\072\033\076\032\130\040\131" +
    "\043\132\045\135\030\001\002\000\036\054\041\055\036" +
    "\062\035\063\046\064\031\065\042\070\034\071\037\072" +
    "\033\076\032\130\040\131\043\132\045\135\030\001\002" +
    "\000\020\006\uff91\011\uff91\012\uff91\015\uff91\021\uff91\022" +
    "\uff91\023\uff91\001\002\000\020\006\uff93\011\uff93\012\uff93" +
    "\015\uff93\021\uff93\022\uff93\023\uff93\001\002\000\004\056" +
    "\052\001\002\000\004\055\021\001\002\000\004\055\ufff3" +
    "\001\002\000\020\006\uff94\011\uff94\012\uff94\015\uff94\021" +
    "\uff94\022\uff94\023\uff94\001\002\000\020\006\uff8f\011\uff8f" +
    "\012\uff8f\015\uff8f\021\uff8f\022\uff8f\023\uff8f\001\002\000" +
    "\020\006\uff8c\011\uff8c\012\uff8c\015\uff8c\021\uff8c\022\uff8c" +
    "\023\uff8c\001\002\000\020\006\uff95\011\uff95\012\uff95\015" +
    "\uff95\021\uff95\022\uff95\023\uff95\001\002\000\020\006\uff8a" +
    "\011\uff8a\012\uff8a\015\uff8a\021\uff8a\022\uff8a\023\uff8a\001" +
    "\002\000\020\006\uff89\011\uff89\012\uff89\015\uff89\021\uff89" +
    "\022\uff89\023\uff89\001\002\000\020\006\uff92\011\uff92\012" +
    "\uff92\015\uff92\021\uff92\022\uff92\023\uff92\001\002\000\020" +
    "\006\uff8b\011\uff8b\012\uff8b\015\uff8b\021\uff8b\022\uff8b\023" +
    "\uff8b\001\002\000\020\006\uff8d\011\uff8d\012\uff8d\015\uff8d" +
    "\021\uff8d\022\uff8d\023\uff8d\001\002\000\020\006\uff8e\011" +
    "\uff8e\012\uff8e\015\uff8e\021\uff8e\022\uff8e\023\uff8e\001\002" +
    "\000\020\006\uff90\011\uff90\012\uff90\015\uff90\021\uff90\022" +
    "\uff90\023\uff90\001\002\000\020\006\uff96\011\uff96\012\uff96" +
    "\015\uff96\021\uff96\022\uff96\023\uff96\001\002\000\004\056" +
    "\071\001\002\000\004\055\ufff1\001\002\000\004\025\102" +
    "\001\002\000\004\055\075\001\002\000\006\003\uffec\055" +
    "\uffec\001\002\000\004\065\076\001\002\000\004\007\077" +
    "\001\002\000\004\056\100\001\002\000\004\055\021\001" +
    "\002\000\004\055\ufff2\001\002\000\004\054\103\001\002" +
    "\000\004\124\104\001\002\000\042\054\116\060\107\062" +
    "\113\063\123\064\106\065\117\070\112\071\114\072\111" +
    "\076\110\124\125\130\115\131\121\132\122\134\124\135" +
    "\105\001\002\000\042\054\116\060\107\062\113\063\123" +
    "\064\106\065\117\070\112\071\114\072\111\076\110\124" +
    "\125\130\115\131\121\132\122\134\124\135\105\001\002" +
    "\000\042\054\116\060\107\062\113\063\123\064\106\065" +
    "\117\070\112\071\114\072\111\076\110\124\125\130\115" +
    "\131\121\132\122\134\124\135\105\001\002\000\042\054" +
    "\116\060\107\062\113\063\123\064\106\065\117\070\112" +
    "\071\114\072\111\076\110\124\125\130\115\131\121\132" +
    "\122\134\124\135\105\001\002\000\042\054\116\060\107" +
    "\062\113\063\123\064\106\065\117\070\112\071\114\072" +
    "\111\076\110\124\125\130\115\131\121\132\122\134\124" +
    "\135\105\001\002\000\042\054\116\060\107\062\113\063" +
    "\123\064\106\065\117\070\112\071\114\072\111\076\110" +
    "\124\125\130\115\131\121\132\122\134\124\135\105\001" +
    "\002\000\042\054\116\060\107\062\113\063\123\064\106" +
    "\065\117\070\112\071\114\072\111\076\110\124\125\130" +
    "\115\131\121\132\122\134\124\135\105\001\002\000\042" +
    "\054\116\060\107\062\113\063\123\064\106\065\117\070" +
    "\112\071\114\072\111\076\110\124\125\130\115\131\121" +
    "\132\122\134\124\135\105\001\002\000\042\054\116\060" +
    "\107\062\113\063\123\064\106\065\117\070\112\071\114" +
    "\072\111\076\110\124\125\130\115\131\121\132\122\134" +
    "\124\135\105\001\002\000\042\054\116\060\107\062\113" +
    "\063\123\064\106\065\117\070\112\071\114\072\111\076" +
    "\110\124\125\130\115\131\121\132\122\134\124\135\105" +
    "\001\002\000\042\054\116\060\107\062\113\063\123\064" +
    "\106\065\117\070\112\071\114\072\111\076\110\124\125" +
    "\130\115\131\121\132\122\134\124\135\105\001\002\000" +
    "\042\054\116\060\107\062\113\063\123\064\106\065\117" +
    "\070\112\071\114\072\111\076\110\124\125\130\115\131" +
    "\121\132\122\134\124\135\105\001\002\000\004\067\132" +
    "\001\002\000\042\054\116\060\107\062\113\063\123\064" +
    "\106\065\117\070\112\071\114\072\111\076\110\124\125" +
    "\130\115\131\121\132\122\134\124\135\105\001\002\000" +
    "\042\054\116\060\107\062\113\063\123\064\106\065\117" +
    "\070\112\071\114\072\111\076\110\124\125\130\115\131" +
    "\121\132\122\134\124\135\105\001\002\000\042\054\116" +
    "\060\107\062\113\063\123\064\106\065\117\070\112\071" +
    "\114\072\111\076\110\124\125\130\115\131\121\132\122" +
    "\134\124\135\105\001\002\000\042\054\116\060\107\062" +
    "\113\063\123\064\106\065\117\070\112\071\114\072\111" +
    "\076\110\124\125\130\115\131\121\132\122\134\124\135" +
    "\105\001\002\000\022\062\uffdc\063\uffdc\064\uffdc\065\uffdc" +
    "\067\uffdc\071\uffdc\072\uffdc\073\uffdc\001\002\000\022\062" +
    "\uffdd\063\uffdd\064\uffdd\065\uffdd\067\uffdd\071\uffdd\072\uffdd" +
    "\073\uffdd\001\002\000\022\062\uffe1\063\uffe1\064\uffe1\065" +
    "\uffe1\067\uffe1\071\uffe1\072\uffe1\073\uffe1\001\002\000\022" +
    "\062\uffe4\063\uffe4\064\uffe4\065\uffe4\067\uffe4\071\uffe4\072" +
    "\uffe4\073\uffe4\001\002\000\022\062\uffe6\063\uffe6\064\uffe6" +
    "\065\uffe6\067\uffe6\071\uffe6\072\uffe6\073\uffe6\001\002\000" +
    "\006\056\074\066\072\001\002\000\006\003\uffed\055\uffed" +
    "\001\002\000\022\062\uffe9\063\uffe9\064\uffe9\065\uffe9\067" +
    "\uffe9\071\uffe9\072\uffe9\073\uffe9\001\002\000\022\062\uffe7" +
    "\063\uffe7\064\uffe7\065\uffe7\067\uffe7\071\uffe7\072\uffe7\073" +
    "\uffe7\001\002\000\022\062\uffeb\063\uffeb\064\uffeb\065\uffeb" +
    "\067\uffeb\071\uffeb\072\uffeb\073\uffeb\001\002\000\022\062" +
    "\uffdf\063\uffdf\064\uffdf\065\uffdf\067\uffdf\071\uffdf\072\uffdf" +
    "\073\uffdf\001\002\000\022\062\uffe3\063\uffe3\064\uffe3\065" +
    "\uffe3\067\uffe3\071\uffe3\072\uffe3\073\uffe3\001\002\000\022" +
    "\062\uffe0\063\uffe0\064\uffe0\065\uffe0\067\uffe0\071\uffe0\072" +
    "\uffe0\073\uffe0\001\002\000\022\062\uffde\063\uffde\064\uffde" +
    "\065\uffde\067\uffde\071\uffde\072\uffde\073\uffde\001\002\000" +
    "\022\062\uffea\063\uffea\064\uffea\065\uffea\067\uffea\071\uffea" +
    "\072\uffea\073\uffea\001\002\000\022\062\uffe5\063\uffe5\064" +
    "\uffe5\065\uffe5\067\uffe5\071\uffe5\072\uffe5\073\uffe5\001\002" +
    "\000\022\062\uffe2\063\uffe2\064\uffe2\065\uffe2\067\uffe2\071" +
    "\uffe2\072\uffe2\073\uffe2\001\002\000\022\062\uffe8\063\uffe8" +
    "\064\uffe8\065\uffe8\067\uffe8\071\uffe8\072\uffe8\073\uffe8\001" +
    "\002\000\004\010\150\001\002\000\006\056\152\066\151" +
    "\001\002\000\004\026\u020d\001\002\000\006\003\uffee\055" +
    "\uffee\001\002\000\006\003\155\055\154\001\002\000\032" +
    "\011\171\012\163\013\173\014\166\016\167\017\174\020" +
    "\164\021\162\022\172\023\165\024\014\065\170\001\002" +
    "\000\006\003\155\055\154\001\002\000\004\002\ufff6\001" +
    "\002\000\006\003\155\055\154\001\002\000\004\002\uffd1" +
    "\001\002\000\004\002\uffce\001\002\000\006\056\u01bb\066" +
    "\u01ba\001\002\000\006\056\u0188\066\u0187\001\002\000\004" +
    "\056\u0201\001\002\000\006\056\343\066\342\001\002\000" +
    "\006\056\343\066\342\001\002\000\006\056\u011d\066\u011c" +
    "\001\002\000\006\004\u0114\010\u0113\001\002\000\006\056" +
    "\343\066\342\001\002\000\006\056\343\066\342\001\002" +
    "\000\006\056\256\066\255\001\002\000\006\056\176\066" +
    "\175\001\002\000\014\034\205\041\210\042\206\043\211" +
    "\044\207\001\002\000\004\055\uff99\001\002\000\004\055" +
    "\200\001\002\000\004\065\201\001\002\000\004\017\202" +
    "\001\002\000\004\056\203\001\002\000\006\003\155\055" +
    "\154\001\002\000\004\002\uffd5\001\002\000\004\054\247" +
    "\001\002\000\004\054\241\001\002\000\004\054\233\001" +
    "\002\000\004\054\226\001\002\000\004\054\212\001\002" +
    "\000\004\124\213\001\002\000\006\131\214\132\216\001" +
    "\002\000\006\130\224\135\225\001\002\000\004\124\221" +
    "\001\002\000\006\130\217\135\220\001\002\000\004\124" +
    "\uff81\001\002\000\004\124\uff7f\001\002\000\004\067\222" +
    "\001\002\000\006\056\176\066\175\001\002\000\004\055" +
    "\uff9a\001\002\000\004\124\uff82\001\002\000\004\124\uff80" +
    "\001\002\000\004\124\227\001\002\000\042\054\116\060" +
    "\107\062\113\063\123\064\106\065\117\070\112\071\114" +
    "\072\111\076\110\124\125\130\115\131\121\132\122\134" +
    "\124\135\105\001\002\000\004\067\231\001\002\000\006" +
    "\056\176\066\175\001\002\000\004\055\uff9d\001\002\000" +
    "\004\124\234\001\002\000\004\130\235\001\002\000\004" +
    "\124\236\001\002\000\004\067\237\001\002\000\006\056" +
    "\176\066\175\001\002\000\004\055\uff9c\001\002\000\004" +
    "\124\242\001\002\000\006\131\214\132\216\001\002\000" +
    "\004\124\244\001\002\000\004\067\245\001\002\000\006" +
    "\056\176\066\175\001\002\000\004\055\uff9b\001\002\000" +
    "\004\124\250\001\002\000\004\130\251\001\002\000\004" +
    "\124\252\001\002\000\004\067\253\001\002\000\006\056" +
    "\176\066\175\001\002\000\004\055\uff9e\001\002\000\016" +
    "\030\271\031\266\032\264\034\267\036\270\037\265\001" +
    "\002\000\004\065\263\001\002\000\004\013\260\001\002" +
    "\000\004\056\261\001\002\000\006\003\155\055\154\001" +
    "\002\000\004\002\uffd4\001\002\000\004\013\uffac\001\002" +
    "\000\004\054\334\001\002\000\004\054\326\001\002\000" +
    "\004\054\320\001\002\000\004\054\312\001\002\000\004" +
    "\054\304\001\002\000\004\054\272\001\002\000\004\124" +
    "\273\001\002\000\006\131\274\132\275\001\002\000\004" +
    "\130\303\001\002\000\004\130\302\001\002\000\004\124" +
    "\277\001\002\000\004\067\300\001\002\000\006\056\256" +
    "\066\255\001\002\000\004\013\uffad\001\002\000\004\124" +
    "\uff83\001\002\000\004\124\uff84\001\002\000\004\124\305" +
    "\001\002\000\004\131\306\001\002\000\004\124\307\001" +
    "\002\000\004\067\310\001\002\000\006\056\256\066\255" +
    "\001\002\000\004\013\uffb1\001\002\000\004\124\313\001" +
    "\002\000\004\130\314\001\002\000\004\124\315\001\002" +
    "\000\004\067\316\001\002\000\006\056\256\066\255\001" +
    "\002\000\004\013\uffb2\001\002\000\004\124\321\001\002" +
    "\000\004\130\322\001\002\000\004\124\323\001\002\000" +
    "\004\067\324\001\002\000\006\056\256\066\255\001\002" +
    "\000\004\013\uffae\001\002\000\004\124\327\001\002\000" +
    "\004\131\330\001\002\000\004\124\331\001\002\000\004" +
    "\067\332\001\002\000\006\056\256\066\255\001\002\000" +
    "\004\013\uffb0\001\002\000\004\124\335\001\002\000\004" +
    "\130\336\001\002\000\004\124\337\001\002\000\004\067" +
    "\340\001\002\000\006\056\256\066\255\001\002\000\004" +
    "\013\uffaf\001\002\000\014\027\352\030\355\031\354\032" +
    "\351\034\353\001\002\000\036\054\uffa6\055\uffa6\062\uffa6" +
    "\063\uffa6\064\uffa6\065\uffa6\070\uffa6\071\uffa6\072\uffa6\076" +
    "\uffa6\130\uffa6\131\uffa6\132\uffa6\135\uffa6\001\002\000\036" +
    "\054\041\055\036\062\035\063\046\064\031\065\042\070" +
    "\034\071\037\072\033\076\032\130\040\131\043\132\045" +
    "\135\030\001\002\000\004\022\346\001\002\000\004\056" +
    "\347\001\002\000\006\003\155\055\154\001\002\000\004" +
    "\002\uffd9\001\002\000\004\054\u0108\001\002\000\004\054" +
    "\u0100\001\002\000\004\054\372\001\002\000\004\054\364" +
    "\001\002\000\004\054\356\001\002\000\004\124\357\001" +
    "\002\000\006\131\274\132\275\001\002\000\004\124\361" +
    "\001\002\000\004\067\362\001\002\000\006\056\343\066" +
    "\342\001\002\000\036\054\uffa7\055\uffa7\062\uffa7\063\uffa7" +
    "\064\uffa7\065\uffa7\070\uffa7\071\uffa7\072\uffa7\076\uffa7\130" +
    "\uffa7\131\uffa7\132\uffa7\135\uffa7\001\002\000\004\124\365" +
    "\001\002\000\004\130\366\001\002\000\004\124\367\001" +
    "\002\000\004\067\370\001\002\000\006\056\343\066\342" +
    "\001\002\000\036\054\uffa8\055\uffa8\062\uffa8\063\uffa8\064" +
    "\uffa8\065\uffa8\070\uffa8\071\uffa8\072\uffa8\076\uffa8\130\uffa8" +
    "\131\uffa8\132\uffa8\135\uffa8\001\002\000\004\124\373\001" +
    "\002\000\004\130\374\001\002\000\004\124\375\001\002" +
    "\000\004\067\376\001\002\000\006\056\343\066\342\001" +
    "\002\000\036\054\uffab\055\uffab\062\uffab\063\uffab\064\uffab" +
    "\065\uffab\070\uffab\071\uffab\072\uffab\076\uffab\130\uffab\131" +
    "\uffab\132\uffab\135\uffab\001\002\000\004\124\u0101\001\002" +
    "\000\006\130\u0103\134\u0102\001\002\000\004\124\uff85\001" +
    "\002\000\004\124\uff86\001\002\000\004\124\u0105\001\002" +
    "\000\004\067\u0106\001\002\000\006\056\343\066\342\001" +
    "\002\000\036\054\uffaa\055\uffaa\062\uffaa\063\uffaa\064\uffaa" +
    "\065\uffaa\070\uffaa\071\uffaa\072\uffaa\076\uffaa\130\uffaa\131" +
    "\uffaa\132\uffaa\135\uffaa\001\002\000\004\124\u0109\001\002" +
    "\000\004\130\u010a\001\002\000\004\124\u010b\001\002\000" +
    "\004\067\u010c\001\002\000\006\056\343\066\342\001\002" +
    "\000\036\054\uffa9\055\uffa9\062\uffa9\063\uffa9\064\uffa9\065" +
    "\uffa9\070\uffa9\071\uffa9\072\uffa9\076\uffa9\130\uffa9\131\uffa9" +
    "\132\uffa9\135\uffa9\001\002\000\036\054\041\055\036\062" +
    "\035\063\046\064\031\065\042\070\034\071\037\072\033" +
    "\076\032\130\040\131\043\132\045\135\030\001\002\000" +
    "\004\011\u0110\001\002\000\004\056\u0111\001\002\000\006" +
    "\003\155\055\154\001\002\000\004\002\uffdb\001\002\000" +
    "\004\056\u0116\001\002\000\004\056\u0115\001\002\000\004" +
    "\002\uffcf\001\002\000\004\055\u0117\001\002\000\004\065" +
    "\u0118\001\002\000\004\004\u0119\001\002\000\004\056\u011a" +
    "\001\002\000\004\002\uffd0\001\002\000\004\055\u014d\001" +
    "\002\000\020\026\u0122\027\u011f\030\u0123\031\u0121\032\u011e" +
    "\034\u0120\040\u0124\001\002\000\004\055\uffbb\001\002\000" +
    "\004\054\u0147\001\002\000\004\054\u0141\001\002\000\004" +
    "\054\u013b\001\002\000\004\054\u0135\001\002\000\004\054" +
    "\u0130\001\002\000\004\054\u012a\001\002\000\004\054\u0125" +
    "\001\002\000\004\124\u0126\001\002\000\004\130\u0127\001" +
    "\002\000\004\067\u0128\001\002\000\006\056\u011d\066\u011c" +
    "\001\002\000\004\055\uffbc\001\002\000\004\124\u012b\001" +
    "\002\000\006\131\274\132\275\001\002\000\004\124\u012d" +
    "\001\002\000\004\067\u012e\001\002\000\006\056\u011d\066" +
    "\u011c\001\002\000\004\055\uffbe\001\002\000\004\124\u0131" +
    "\001\002\000\042\054\116\060\107\062\113\063\123\064" +
    "\106\065\117\070\112\071\114\072\111\076\110\124\125" +
    "\130\115\131\121\132\122\134\124\135\105\001\002\000" +
    "\004\067\u0133\001\002\000\006\056\u011d\066\u011c\001\002" +
    "\000\004\055\uffbd\001\002\000\004\124\u0136\001\002\000" +
    "\004\130\u0137\001\002\000\004\124\u0138\001\002\000\004" +
    "\067\u0139\001\002\000\006\056\u011d\066\u011c\001\002\000" +
    "\004\055\uffbf\001\002\000\004\124\u013c\001\002\000\004" +
    "\130\u013d\001\002\000\004\124\u013e\001\002\000\004\067" +
    "\u013f\001\002\000\006\056\u011d\066\u011c\001\002\000\004" +
    "\055\uffc2\001\002\000\004\124\u0142\001\002\000\006\130" +
    "\u0103\134\u0102\001\002\000\004\124\u0144\001\002\000\004" +
    "\067\u0145\001\002\000\006\056\u011d\066\u011c\001\002\000" +
    "\004\055\uffc0\001\002\000\004\124\u0148\001\002\000\004" +
    "\130\u0149\001\002\000\004\124\u014a\001\002\000\004\067" +
    "\u014b\001\002\000\006\056\u011d\066\u011c\001\002\000\004" +
    "\055\uffc1\001\002\000\030\011\u015a\012\u0156\013\u015c\014" +
    "\u0158\017\u015d\020\u0155\021\u0154\022\u015b\023\u0157\024\014" +
    "\065\u0159\001\002\000\004\016\u0151\001\002\000\004\055" +
    "\u014d\001\002\000\004\016\uffc4\001\002\000\004\056\u0152" +
    "\001\002\000\006\003\155\055\154\001\002\000\004\002" +
    "\uffd3\001\002\000\006\056\u01bb\066\u01ba\001\002\000\004" +
    "\056\u01b7\001\002\000\006\056\u0188\066\u0187\001\002\000" +
    "\006\056\343\066\342\001\002\000\006\056\343\066\342" +
    "\001\002\000\004\016\u0172\001\002\000\006\056\343\066" +
    "\342\001\002\000\006\056\343\066\342\001\002\000\006" +
    "\056\256\066\255\001\002\000\006\056\176\066\175\001" +
    "\002\000\004\055\u015f\001\002\000\004\065\u0160\001\002" +
    "\000\004\017\u0161\001\002\000\004\056\u0162\001\002\000" +
    "\004\055\u014d\001\002\000\004\016\uffc7\001\002\000\004" +
    "\013\u0165\001\002\000\004\056\u0166\001\002\000\004\055" +
    "\u014d\001\002\000\004\016\uffc6\001\002\000\036\054\041" +
    "\055\036\062\035\063\046\064\031\065\042\070\034\071" +
    "\037\072\033\076\032\130\040\131\043\132\045\135\030" +
    "\001\002\000\004\022\u016a\001\002\000\004\056\u016b\001" +
    "\002\000\004\055\u014d\001\002\000\004\016\uffcb\001\002" +
    "\000\036\054\041\055\036\062\035\063\046\064\031\065" +
    "\042\070\034\071\037\072\033\076\032\130\040\131\043" +
    "\132\045\135\030\001\002\000\004\011\u016f\001\002\000" +
    "\004\056\u0170\001\002\000\004\055\u014d\001\002\000\004" +
    "\016\uffcd\001\002\000\004\056\u0173\001\002\000\004\016" +
    "\uffc3\001\002\000\004\055\u0175\001\002\000\006\015\u017a" +
    "\065\u017b\001\002\000\004\014\u0177\001\002\000\004\056" +
    "\u0178\001\002\000\004\055\u014d\001\002\000\004\016\uffcc" +
    "\001\002\000\004\056\u017c\001\002\000\004\014\uff87\001" +
    "\002\000\036\054\041\055\036\062\035\063\046\064\031" +
    "\065\042\070\034\071\037\072\033\076\032\130\040\131" +
    "\043\132\045\135\030\001\002\000\004\015\u017e\001\002" +
    "\000\004\056\u017f\001\002\000\004\055\u0175\001\002\000" +
    "\004\014\uff88\001\002\000\036\054\041\055\036\062\035" +
    "\063\046\064\031\065\042\070\034\071\037\072\033\076" +
    "\032\130\040\131\043\132\045\135\030\001\002\000\004" +
    "\023\u0183\001\002\000\004\056\u0184\001\002\000\004\055" +
    "\u014d\001\002\000\004\016\uffca\001\002\000\036\054\041" +
    "\055\036\062\035\063\046\064\031\065\042\070\034\071" +
    "\037\072\033\076\032\130\040\131\043\132\045\135\030" +
    "\001\002\000\016\027\u018a\030\u018d\031\u018b\032\u0189\033" +
    "\u018e\034\u018c\001\002\000\036\054\uff9f\055\uff9f\062\uff9f" +
    "\063\uff9f\064\uff9f\065\uff9f\070\uff9f\071\uff9f\072\uff9f\076" +
    "\uff9f\130\uff9f\131\uff9f\132\uff9f\135\uff9f\001\002\000\004" +
    "\054\u01ad\001\002\000\004\054\u01a7\001\002\000\004\054" +
    "\u01a1\001\002\000\004\054\u019b\001\002\000\004\054\u0195" +
    "\001\002\000\004\054\u018f\001\002\000\004\124\u0190\001" +
    "\002\000\004\130\u0191\001\002\000\004\124\u0192\001\002" +
    "\000\004\067\u0193\001\002\000\006\056\u0188\066\u0187\001" +
    "\002\000\036\054\uffa4\055\uffa4\062\uffa4\063\uffa4\064\uffa4" +
    "\065\uffa4\070\uffa4\071\uffa4\072\uffa4\076\uffa4\130\uffa4\131" +
    "\uffa4\132\uffa4\135\uffa4\001\002\000\004\124\u0196\001\002" +
    "\000\006\131\274\132\275\001\002\000\004\124\u0198\001" +
    "\002\000\004\067\u0199\001\002\000\006\056\u0188\066\u0187" +
    "\001\002\000\036\054\uffa0\055\uffa0\062\uffa0\063\uffa0\064" +
    "\uffa0\065\uffa0\070\uffa0\071\uffa0\072\uffa0\076\uffa0\130\uffa0" +
    "\131\uffa0\132\uffa0\135\uffa0\001\002\000\004\124\u019c\001" +
    "\002\000\004\130\u019d\001\002\000\004\124\u019e\001\002" +
    "\000\004\067\u019f\001\002\000\006\056\u0188\066\u0187\001" +
    "\002\000\036\054\uffa5\055\uffa5\062\uffa5\063\uffa5\064\uffa5" +
    "\065\uffa5\070\uffa5\071\uffa5\072\uffa5\076\uffa5\130\uffa5\131" +
    "\uffa5\132\uffa5\135\uffa5\001\002\000\004\124\u01a2\001\002" +
    "\000\004\130\u01a3\001\002\000\004\124\u01a4\001\002\000" +
    "\004\067\u01a5\001\002\000\006\056\u0188\066\u0187\001\002" +
    "\000\036\054\uffa1\055\uffa1\062\uffa1\063\uffa1\064\uffa1\065" +
    "\uffa1\070\uffa1\071\uffa1\072\uffa1\076\uffa1\130\uffa1\131\uffa1" +
    "\132\uffa1\135\uffa1\001\002\000\004\124\u01a8\001\002\000" +
    "\006\130\u0103\134\u0102\001\002\000\004\124\u01aa\001\002" +
    "\000\004\067\u01ab\001\002\000\006\056\u0188\066\u0187\001" +
    "\002\000\036\054\uffa3\055\uffa3\062\uffa3\063\uffa3\064\uffa3" +
    "\065\uffa3\070\uffa3\071\uffa3\072\uffa3\076\uffa3\130\uffa3\131" +
    "\uffa3\132\uffa3\135\uffa3\001\002\000\004\124\u01ae\001\002" +
    "\000\004\130\u01af\001\002\000\004\124\u01b0\001\002\000" +
    "\004\067\u01b1\001\002\000\006\056\u0188\066\u0187\001\002" +
    "\000\036\054\uffa2\055\uffa2\062\uffa2\063\uffa2\064\uffa2\065" +
    "\uffa2\070\uffa2\071\uffa2\072\uffa2\076\uffa2\130\uffa2\131\uffa2" +
    "\132\uffa2\135\uffa2\001\002\000\004\012\u01b4\001\002\000" +
    "\004\056\u01b5\001\002\000\004\055\u014d\001\002\000\004" +
    "\016\uffc8\001\002\000\004\055\u014d\001\002\000\004\016" +
    "\uffc9\001\002\000\036\054\041\055\036\062\035\063\046" +
    "\064\031\065\042\070\034\071\037\072\033\076\032\130" +
    "\040\131\043\132\045\135\030\001\002\000\020\026\u01c0" +
    "\027\u01bd\030\u01c1\031\u01be\032\u01bc\034\u01bf\045\u01c2\001" +
    "\002\000\036\054\uffb3\055\uffb3\062\uffb3\063\uffb3\064\uffb3" +
    "\065\uffb3\070\uffb3\071\uffb3\072\uffb3\076\uffb3\130\uffb3\131" +
    "\uffb3\132\uffb3\135\uffb3\001\002\000\004\054\u01ed\001\002" +
    "\000\004\054\u01e7\001\002\000\004\054\u01e1\001\002\000" +
    "\004\054\u01db\001\002\000\004\054\u01d6\001\002\000\004" +
    "\054\u01d0\001\002\000\004\054\u01c3\001\002\000\004\124" +
    "\u01c4\001\002\000\006\077\u01c5\126\u01c6\001\002\000\004" +
    "\070\u01cd\001\002\000\004\070\u01ca\001\002\000\004\067" +
    "\u01c8\001\002\000\006\056\u01bb\066\u01ba\001\002\000\036" +
    "\054\uffb4\055\uffb4\062\uffb4\063\uffb4\064\uffb4\065\uffb4\070" +
    "\uffb4\071\uffb4\072\uffb4\076\uffb4\130\uffb4\131\uffb4\132\uffb4" +
    "\135\uffb4\001\002\000\004\071\u01cb\001\002\000\004\124" +
    "\u01cc\001\002\000\004\067\uff98\001\002\000\004\071\u01ce" +
    "\001\002\000\004\124\u01cf\001\002\000\004\067\uff97\001" +
    "\002\000\004\124\u01d1\001\002\000\006\131\274\132\275" +
    "\001\002\000\004\124\u01d3\001\002\000\004\067\u01d4\001" +
    "\002\000\006\056\u01bb\066\u01ba\001\002\000\036\054\uffb6" +
    "\055\uffb6\062\uffb6\063\uffb6\064\uffb6\065\uffb6\070\uffb6\071" +
    "\uffb6\072\uffb6\076\uffb6\130\uffb6\131\uffb6\132\uffb6\135\uffb6" +
    "\001\002\000\004\124\u01d7\001\002\000\042\054\116\060" +
    "\107\062\113\063\123\064\106\065\117\070\112\071\114" +
    "\072\111\076\110\124\125\130\115\131\121\132\122\134" +
    "\124\135\105\001\002\000\004\067\u01d9\001\002\000\006" +
    "\056\u01bb\066\u01ba\001\002\000\036\054\uffb5\055\uffb5\062" +
    "\uffb5\063\uffb5\064\uffb5\065\uffb5\070\uffb5\071\uffb5\072\uffb5" +
    "\076\uffb5\130\uffb5\131\uffb5\132\uffb5\135\uffb5\001\002\000" +
    "\004\124\u01dc\001\002\000\004\130\u01dd\001\002\000\004" +
    "\124\u01de\001\002\000\004\067\u01df\001\002\000\006\056" +
    "\u01bb\066\u01ba\001\002\000\036\054\uffba\055\uffba\062\uffba" +
    "\063\uffba\064\uffba\065\uffba\070\uffba\071\uffba\072\uffba\076" +
    "\uffba\130\uffba\131\uffba\132\uffba\135\uffba\001\002\000\004" +
    "\124\u01e2\001\002\000\004\130\u01e3\001\002\000\004\124" +
    "\u01e4\001\002\000\004\067\u01e5\001\002\000\006\056\u01bb" +
    "\066\u01ba\001\002\000\036\054\uffb7\055\uffb7\062\uffb7\063" +
    "\uffb7\064\uffb7\065\uffb7\070\uffb7\071\uffb7\072\uffb7\076\uffb7" +
    "\130\uffb7\131\uffb7\132\uffb7\135\uffb7\001\002\000\004\124" +
    "\u01e8\001\002\000\006\130\u0103\134\u0102\001\002\000\004" +
    "\124\u01ea\001\002\000\004\067\u01eb\001\002\000\006\056" +
    "\u01bb\066\u01ba\001\002\000\036\054\uffb8\055\uffb8\062\uffb8" +
    "\063\uffb8\064\uffb8\065\uffb8\070\uffb8\071\uffb8\072\uffb8\076" +
    "\uffb8\130\uffb8\131\uffb8\132\uffb8\135\uffb8\001\002\000\004" +
    "\124\u01ee\001\002\000\004\130\u01ef\001\002\000\004\124" +
    "\u01f0\001\002\000\004\067\u01f1\001\002\000\006\056\u01bb" +
    "\066\u01ba\001\002\000\036\054\uffb9\055\uffb9\062\uffb9\063" +
    "\uffb9\064\uffb9\065\uffb9\070\uffb9\071\uffb9\072\uffb9\076\uffb9" +
    "\130\uffb9\131\uffb9\132\uffb9\135\uffb9\001\002\000\004\021" +
    "\u01f4\001\002\000\004\056\u01f5\001\002\000\004\055\u014d" +
    "\001\002\000\004\016\uffc5\001\002\000\004\055\u0175\001" +
    "\002\000\004\014\u01f9\001\002\000\004\056\u01fa\001\002" +
    "\000\006\003\155\055\154\001\002\000\004\002\uffda\001" +
    "\002\000\036\054\041\055\036\062\035\063\046\064\031" +
    "\065\042\070\034\071\037\072\033\076\032\130\040\131" +
    "\043\132\045\135\030\001\002\000\004\023\u01fe\001\002" +
    "\000\004\056\u01ff\001\002\000\006\003\155\055\154\001" +
    "\002\000\004\002\uffd8\001\002\000\006\003\155\055\154" +
    "\001\002\000\004\002\uffd7\001\002\000\036\054\041\055" +
    "\036\062\035\063\046\064\031\065\042\070\034\071\037" +
    "\072\033\076\032\130\040\131\043\132\045\135\030\001" +
    "\002\000\004\012\u0205\001\002\000\004\056\u0206\001\002" +
    "\000\006\003\155\055\154\001\002\000\004\002\uffd6\001" +
    "\002\000\036\054\041\055\036\062\035\063\046\064\031" +
    "\065\042\070\034\071\037\072\033\076\032\130\040\131" +
    "\043\132\045\135\030\001\002\000\004\021\u020a\001\002" +
    "\000\004\056\u020b\001\002\000\006\003\155\055\154\001" +
    "\002\000\004\002\uffd2\001\002\000\004\054\u020e\001\002" +
    "\000\004\124\u020f\001\002\000\042\054\116\060\107\062" +
    "\113\063\123\064\106\065\117\070\112\071\114\072\111" +
    "\076\110\124\125\130\115\131\121\132\122\134\124\135" +
    "\105\001\002\000\004\067\u0211\001\002\000\006\056\074" +
    "\066\072\001\002\000\006\003\uffef\055\uffef\001\002\000" +
    "\006\003\155\055\154\001\002\000\004\002\ufff4\001\002" +
    "\000\010\055\u0217\077\u0216\126\u0218\001\002\000\004\070" +
    "\u0404\001\002\000\004\065\u0401\001\002\000\004\070\u021a" +
    "\001\002\000\006\003\uff7e\055\uff7e\001\002\000\004\071" +
    "\u021b\001\002\000\004\066\u021c\001\002\000\036\003\u0229" +
    "\046\u0223\047\u021d\050\u0222\051\u022c\052\u0225\067\u0220\107" +
    "\u022a\110\u021f\112\u022b\115\u0226\117\u0221\122\u021e\130\u0228" +
    "\001\002\000\006\053\u03dd\130\u03dc\001\002\000\004\070" +
    "\u03d4\001\002\000\004\070\u03d0\001\002\000\010\055\uff73" +
    "\077\uff73\126\uff73\001\002\000\004\070\u03c4\001\002\000" +
    "\006\053\u03a7\130\u03a6\001\002\000\006\053\u0383\130\u0382" +
    "\001\002\000\010\055\u0217\077\u0216\126\u0218\001\002\000" +
    "\006\053\u034f\130\u034e\001\002\000\004\070\u02c3\001\002" +
    "\000\036\003\u0229\046\u0223\047\u021d\050\u0222\051\u022c\052" +
    "\u0225\067\u0220\107\u022a\110\u021f\112\u022b\115\u0226\117\u0221" +
    "\122\u021e\130\u0228\001\002\000\004\054\u02a8\001\002\000" +
    "\036\003\u0229\046\u0223\047\u021d\050\u0222\051\u022c\052\u0225" +
    "\067\u0220\107\u022a\110\u021f\112\u022b\115\u0226\117\u0221\122" +
    "\u021e\130\u0228\001\002\000\004\070\u029f\001\002\000\004" +
    "\070\u0241\001\002\000\006\053\u022e\130\u022d\001\002\000" +
    "\010\054\u0231\072\u0230\073\u0233\001\002\000\004\130\u022f" +
    "\001\002\000\010\054\u0231\072\u0230\073\u0233\001\002\000" +
    "\004\130\u023e\001\002\000\006\105\u0235\133\u0234\001\002" +
    "\000\040\003\uff3d\046\uff3d\047\uff3d\050\uff3d\051\uff3d\052" +
    "\uff3d\067\uff3d\076\uff3d\107\uff3d\110\uff3d\112\uff3d\115\uff3d" +
    "\117\uff3d\122\uff3d\130\uff3d\001\002\000\040\003\uff10\046" +
    "\uff10\047\uff10\050\uff10\051\uff10\052\uff10\067\uff10\076\uff10" +
    "\107\uff10\110\uff10\112\uff10\115\uff10\117\uff10\122\uff10\130" +
    "\uff10\001\002\000\006\072\u0238\073\u023a\001\002\000\004" +
    "\070\u0236\001\002\000\004\071\u0237\001\002\000\006\072" +
    "\u0238\073\u023a\001\002\000\004\130\u023b\001\002\000\040" +
    "\003\uff11\046\uff11\047\uff11\050\uff11\051\uff11\052\uff11\067" +
    "\uff11\076\uff11\107\uff11\110\uff11\112\uff11\115\uff11\117\uff11" +
    "\122\uff11\130\uff11\001\002\000\040\003\uff0e\046\uff0e\047" +
    "\uff0e\050\uff0e\051\uff0e\052\uff0e\067\uff0e\076\uff0e\107\uff0e" +
    "\110\uff0e\112\uff0e\115\uff0e\117\uff0e\122\uff0e\130\uff0e\001" +
    "\002\000\010\054\u0231\072\u0230\073\u0233\001\002\000\040" +
    "\003\uff0f\046\uff0f\047\uff0f\050\uff0f\051\uff0f\052\uff0f\067" +
    "\uff0f\076\uff0f\107\uff0f\110\uff0f\112\uff0f\115\uff0f\117\uff0f" +
    "\122\uff0f\130\uff0f\001\002\000\040\003\uff13\046\uff13\047" +
    "\uff13\050\uff13\051\uff13\052\uff13\067\uff13\076\uff13\107\uff13" +
    "\110\uff13\112\uff13\115\uff13\117\uff13\122\uff13\130\uff13\001" +
    "\002\000\010\054\u0231\072\u0230\073\u0233\001\002\000\040" +
    "\003\uff12\046\uff12\047\uff12\050\uff12\051\uff12\052\uff12\067" +
    "\uff12\076\uff12\107\uff12\110\uff12\112\uff12\115\uff12\117\uff12" +
    "\122\uff12\130\uff12\001\002\000\040\003\uff42\046\uff42\047" +
    "\uff42\050\uff42\051\uff42\052\uff42\067\uff42\076\uff42\107\uff42" +
    "\110\uff42\112\uff42\115\uff42\117\uff42\122\uff42\130\uff42\001" +
    "\002\000\006\125\u0243\130\u0242\001\002\000\006\071\u025f" +
    "\072\u025e\001\002\000\040\054\u024a\055\u024f\062\u024c\063" +
    "\u0258\064\u0256\065\u024b\070\u0254\071\u0255\072\u0252\076\u0250" +
    "\125\u0247\130\u0251\131\u024e\132\u0257\135\u0249\001\002\000" +
    "\004\073\u0245\001\002\000\036\003\u0229\046\u0223\047\u021d" +
    "\050\u0222\051\u022c\052\u0225\067\u0220\107\u022a\110\u021f\112" +
    "\u022b\115\u0226\117\u0221\122\u021e\130\u0228\001\002\000\010" +
    "\055\uff74\077\uff74\126\uff74\001\002\000\006\071\ufed0\072" +
    "\ufed0\001\002\000\006\071\ufeeb\072\ufeeb\001\002\000\036" +
    "\054\u024a\062\u024c\063\u0258\064\u0256\065\u024b\070\u0254\071" +
    "\u0255\072\u0252\076\u0250\125\u0247\130\u0251\131\u024e\132\u0257" +
    "\135\u0249\001\002\000\036\054\u024a\062\u024c\063\u0258\064" +
    "\u0256\065\u024b\070\u0254\071\u0255\072\u0252\076\u0250\125\u0247" +
    "\130\u0251\131\u024e\132\u0257\135\u0249\001\002\000\036\054" +
    "\u024a\062\u024c\063\u0258\064\u0256\065\u024b\070\u0254\071\u0255" +
    "\072\u0252\076\u0250\125\u0247\130\u0251\131\u024e\132\u0257\135" +
    "\u0249\001\002\000\036\054\u024a\062\u024c\063\u0258\064\u0256" +
    "\065\u024b\070\u0254\071\u0255\072\u0252\076\u0250\125\u0247\130" +
    "\u0251\131\u024e\132\u0257\135\u0249\001\002\000\004\125\u0299" +
    "\001\002\000\036\054\u024a\062\u024c\063\u0258\064\u0256\065" +
    "\u024b\070\u0254\071\u0255\072\u0252\076\u0250\125\u0247\130\u0251" +
    "\131\u024e\132\u0257\135\u0249\001\002\000\026\011\u026f\012" +
    "\u026a\013\u0271\014\u026d\016\u026e\017\u0272\020\u026b\021\u0269" +
    "\022\u0270\023\u026c\001\002\000\036\054\u024a\062\u024c\063" +
    "\u0258\064\u0256\065\u024b\070\u0254\071\u0255\072\u0252\076\u0250" +
    "\125\u0247\130\u0251\131\u024e\132\u0257\135\u0249\001\002\000" +
    "\036\054\u024a\062\u024c\063\u0258\064\u0256\065\u024b\070\u0254" +
    "\071\u0255\072\u0252\076\u0250\125\u0247\130\u0251\131\u024e\132" +
    "\u0257\135\u0249\001\002\000\036\054\u024a\062\u024c\063\u0258" +
    "\064\u0256\065\u024b\070\u0254\071\u0255\072\u0252\076\u0250\125" +
    "\u0247\130\u0251\131\u024e\132\u0257\135\u0249\001\002\000\006" +
    "\071\u025f\072\u025e\001\002\000\036\054\u024a\062\u024c\063" +
    "\u0258\064\u0256\065\u024b\070\u0254\071\u0255\072\u0252\076\u0250" +
    "\125\u0247\130\u0251\131\u024e\132\u0257\135\u0249\001\002\000" +
    "\036\054\u024a\062\u024c\063\u0258\064\u0256\065\u024b\070\u0254" +
    "\071\u0255\072\u0252\076\u0250\125\u0247\130\u0251\131\u024e\132" +
    "\u0257\135\u0249\001\002\000\036\054\u024a\062\u024c\063\u0258" +
    "\064\u0256\065\u024b\070\u0254\071\u0255\072\u0252\076\u0250\125" +
    "\u0247\130\u0251\131\u024e\132\u0257\135\u0249\001\002\000\036" +
    "\054\u024a\062\u024c\063\u0258\064\u0256\065\u024b\070\u0254\071" +
    "\u0255\072\u0252\076\u0250\125\u0247\130\u0251\131\u024e\132\u0257" +
    "\135\u0249\001\002\000\036\054\u024a\062\u024c\063\u0258\064" +
    "\u0256\065\u024b\070\u0254\071\u0255\072\u0252\076\u0250\125\u0247" +
    "\130\u0251\131\u024e\132\u0257\135\u0249\001\002\000\006\071" +
    "\ufed8\072\ufed8\001\002\000\006\071\ufeda\072\ufeda\001\002" +
    "\000\006\071\ufed7\072\ufed7\001\002\000\006\071\ufed1\072" +
    "\ufed1\001\002\000\006\071\ufed2\072\ufed2\001\002\000\006" +
    "\125\u0262\130\u0261\001\002\000\004\073\ufeec\001\002\000" +
    "\004\073\ufeef\001\002\000\006\071\u025f\072\u025e\001\002" +
    "\000\040\054\u024a\055\u024f\062\u024c\063\u0258\064\u0256\065" +
    "\u024b\070\u0254\071\u0255\072\u0252\076\u0250\125\u0247\130\u0251" +
    "\131\u024e\132\u0257\135\u0249\001\002\000\006\071\u025f\072" +
    "\u025e\001\002\000\004\073\ufeed\001\002\000\004\073\ufeee" +
    "\001\002\000\006\071\ufed4\072\ufed4\001\002\000\006\071" +
    "\ufedc\072\ufedc\001\002\000\006\071\ufed5\072\ufed5\001\002" +
    "\000\006\056\u01bb\066\u01ba\001\002\000\006\056\u0188\066" +
    "\u0187\001\002\000\004\056\u028f\001\002\000\006\056\343" +
    "\066\342\001\002\000\006\056\343\066\342\001\002\000" +
    "\006\056\u011d\066\u011c\001\002\000\006\056\343\066\342" +
    "\001\002\000\006\056\343\066\342\001\002\000\006\056" +
    "\256\066\255\001\002\000\006\056\176\066\175\001\002" +
    "\000\004\055\u0274\001\002\000\004\065\u0275\001\002\000" +
    "\004\017\u0276\001\002\000\004\056\u0277\001\002\000\004" +
    "\125\ufee3\001\002\000\004\013\u0279\001\002\000\004\056" +
    "\u027a\001\002\000\004\125\ufee2\001\002\000\036\054\041" +
    "\055\036\062\035\063\046\064\031\065\042\070\034\071" +
    "\037\072\033\076\032\130\040\131\043\132\045\135\030" +
    "\001\002\000\004\022\u027d\001\002\000\004\056\u027e\001" +
    "\002\000\004\125\ufee7\001\002\000\036\054\041\055\036" +
    "\062\035\063\046\064\031\065\042\070\034\071\037\072" +
    "\033\076\032\130\040\131\043\132\045\135\030\001\002" +
    "\000\004\011\u0281\001\002\000\004\056\u0282\001\002\000" +
    "\004\125\ufee9\001\002\000\004\055\u014d\001\002\000\004" +
    "\016\u0285\001\002\000\004\056\u0286\001\002\000\004\125" +
    "\ufee1\001\002\000\004\055\u0175\001\002\000\004\014\u0289" +
    "\001\002\000\004\056\u028a\001\002\000\004\125\ufee8\001" +
    "\002\000\036\054\041\055\036\062\035\063\046\064\031" +
    "\065\042\070\034\071\037\072\033\076\032\130\040\131" +
    "\043\132\045\135\030\001\002\000\004\023\u028d\001\002" +
    "\000\004\056\u028e\001\002\000\004\125\ufee6\001\002\000" +
    "\004\125\ufee5\001\002\000\036\054\041\055\036\062\035" +
    "\063\046\064\031\065\042\070\034\071\037\072\033\076" +
    "\032\130\040\131\043\132\045\135\030\001\002\000\004" +
    "\012\u0292\001\002\000\004\056\u0293\001\002\000\004\125" +
    "\ufee4\001\002\000\036\054\041\055\036\062\035\063\046" +
    "\064\031\065\042\070\034\071\037\072\033\076\032\130" +
    "\040\131\043\132\045\135\030\001\002\000\004\021\u0296" +
    "\001\002\000\004\056\u0297\001\002\000\004\125\ufee0\001" +
    "\002\000\006\071\ufedb\072\ufedb\001\002\000\006\071\ufeea" +
    "\072\ufeea\001\002\000\006\071\ufed9\072\ufed9\001\002\000" +
    "\006\071\ufed6\072\ufed6\001\002\000\006\071\ufed3\072\ufed3" +
    "\001\002\000\006\071\ufedd\072\ufedd\001\002\000\004\073" +
    "\ufef0\001\002\000\006\125\u02a2\130\u02a0\001\002\000\004" +
    "\071\ufedf\001\002\000\004\071\u02a4\001\002\000\036\054" +
    "\u024a\062\u024c\063\u0258\064\u0256\065\u024b\070\u0254\071\u0255" +
    "\072\u0252\076\u0250\125\u0247\130\u0251\131\u024e\132\u0257\135" +
    "\u0249\001\002\000\004\071\ufede\001\002\000\004\073\u02a5" +
    "\001\002\000\036\003\u0229\046\u0223\047\u021d\050\u0222\051" +
    "\u022c\052\u0225\067\u0220\107\u022a\110\u021f\112\u022b\115\u0226" +
    "\117\u0221\122\u021e\130\u0228\001\002\000\010\055\uff79\077" +
    "\uff79\126\uff79\001\002\000\010\055\uff72\077\uff72\126\uff72" +
    "\001\002\000\014\124\u02ad\130\u02aa\131\u02ab\132\u02ae\133" +
    "\u02af\001\002\000\040\003\uff3a\046\uff3a\047\uff3a\050\uff3a" +
    "\051\uff3a\052\uff3a\067\uff3a\076\uff3a\107\uff3a\110\uff3a\112" +
    "\uff3a\115\uff3a\117\uff3a\122\uff3a\130\uff3a\001\002\000\016" +
    "\062\uff14\063\uff14\064\uff14\065\uff14\072\uff14\073\uff14\001" +
    "\002\000\016\062\uff18\063\uff18\064\uff18\065\uff18\072\uff18" +
    "\073\uff18\001\002\000\016\062\u02b4\063\u02b1\064\u02b6\065" +
    "\u02b5\072\u02b2\073\u02b7\001\002\000\042\054\116\060\107" +
    "\062\113\063\123\064\106\065\117\070\112\071\114\072" +
    "\111\076\110\124\125\130\115\131\121\132\122\134\124" +
    "\135\105\001\002\000\016\062\uff16\063\uff16\064\uff16\065" +
    "\uff16\072\uff16\073\uff16\001\002\000\016\062\uff17\063\uff17" +
    "\064\uff17\065\uff17\072\uff17\073\uff17\001\002\000\016\062" +
    "\uff15\063\uff15\064\uff15\065\uff15\072\uff15\073\uff15\001\002" +
    "\000\014\124\u02ad\130\u02aa\131\u02ab\132\u02ae\133\u02af\001" +
    "\002\000\004\130\u02be\001\002\000\040\003\uff39\046\uff39" +
    "\047\uff39\050\uff39\051\uff39\052\uff39\067\uff39\076\uff39\107" +
    "\uff39\110\uff39\112\uff39\115\uff39\117\uff39\122\uff39\130\uff39" +
    "\001\002\000\014\124\u02ad\130\u02aa\131\u02ab\132\u02ae\133" +
    "\u02af\001\002\000\014\124\u02ad\130\u02aa\131\u02ab\132\u02ae" +
    "\133\u02af\001\002\000\014\124\u02ad\130\u02aa\131\u02ab\132" +
    "\u02ae\133\u02af\001\002\000\040\003\uff33\046\uff33\047\uff33" +
    "\050\uff33\051\uff33\052\uff33\067\uff33\076\uff33\107\uff33\110" +
    "\uff33\112\uff33\115\uff33\117\uff33\122\uff33\130\uff33\001\002" +
    "\000\016\062\u02b4\063\u02b1\064\u02b6\065\u02b5\072\u02b2\073" +
    "\u02b7\001\002\000\040\003\uff35\046\uff35\047\uff35\050\uff35" +
    "\051\uff35\052\uff35\067\uff35\076\uff35\107\uff35\110\uff35\112" +
    "\uff35\115\uff35\117\uff35\122\uff35\130\uff35\001\002\000\016" +
    "\062\u02b4\063\u02b1\064\u02b6\065\u02b5\072\u02b2\073\u02b7\001" +
    "\002\000\040\003\uff36\046\uff36\047\uff36\050\uff36\051\uff36" +
    "\052\uff36\067\uff36\076\uff36\107\uff36\110\uff36\112\uff36\115" +
    "\uff36\117\uff36\122\uff36\130\uff36\001\002\000\016\062\u02b4" +
    "\063\u02b1\064\u02b6\065\u02b5\072\u02b2\073\u02b7\001\002\000" +
    "\040\003\uff38\046\uff38\047\uff38\050\uff38\051\uff38\052\uff38" +
    "\067\uff38\076\uff38\107\uff38\110\uff38\112\uff38\115\uff38\117" +
    "\uff38\122\uff38\130\uff38\001\002\000\004\054\u02a8\001\002" +
    "\000\040\003\uff34\046\uff34\047\uff34\050\uff34\051\uff34\052" +
    "\uff34\067\uff34\076\uff34\107\uff34\110\uff34\112\uff34\115\uff34" +
    "\117\uff34\122\uff34\130\uff34\001\002\000\016\062\u02b4\063" +
    "\u02b1\064\u02b6\065\u02b5\072\u02b2\073\u02b7\001\002\000\040" +
    "\003\uff37\046\uff37\047\uff37\050\uff37\051\uff37\052\uff37\067" +
    "\uff37\076\uff37\107\uff37\110\uff37\112\uff37\115\uff37\117\uff37" +
    "\122\uff37\130\uff37\001\002\000\010\055\uff7a\077\uff7a\126" +
    "\uff7a\001\002\000\020\061\u02cb\070\u02c5\124\u02ce\127\u02c9" +
    "\130\u02ca\131\u02cc\132\u02cd\001\002\000\030\054\uff4f\055" +
    "\uff4f\056\uff4f\057\uff4f\060\uff4f\061\uff4f\062\u0347\063\u0346" +
    "\064\u0349\065\u0348\071\uff4f\001\002\000\012\070\u02c5\130" +
    "\u02ca\131\u02cc\132\u02cd\001\002\000\020\054\uff63\055\uff63" +
    "\056\uff63\057\uff63\060\uff63\061\uff63\071\uff63\001\002\000" +
    "\020\054\u032e\055\u0329\056\u032d\057\u0330\060\u0327\061\u032f" +
    "\071\u032c\001\002\000\004\121\u02d4\001\002\000\020\054" +
    "\uff64\055\uff64\056\uff64\057\uff64\060\uff64\061\uff64\071\uff64" +
    "\001\002\000\030\054\uff45\055\uff45\056\uff45\057\uff45\060" +
    "\uff45\061\uff45\062\uff45\063\uff45\064\uff45\065\uff45\071\uff45" +
    "\001\002\000\020\061\u02cb\070\u02c5\124\u02ce\127\u02c9\130" +
    "\u02ca\131\u02cc\132\u02cd\001\002\000\030\054\uff47\055\uff47" +
    "\056\uff47\057\uff47\060\uff47\061\uff47\062\uff47\063\uff47\064" +
    "\uff47\065\uff47\071\uff47\001\002\000\030\054\uff46\055\uff46" +
    "\056\uff46\057\uff46\060\uff46\061\uff46\062\uff46\063\uff46\064" +
    "\uff46\065\uff46\071\uff46\001\002\000\006\130\u02cf\135\u02d0" +
    "\001\002\000\004\124\u02d2\001\002\000\004\124\u02d1\001" +
    "\002\000\020\054\uff61\055\uff61\056\uff61\057\uff61\060\uff61" +
    "\061\uff61\071\uff61\001\002\000\020\054\uff62\055\uff62\056" +
    "\uff62\057\uff62\060\uff62\061\uff62\071\uff62\001\002\000\006" +
    "\121\uff68\123\uff68\001\002\000\004\113\u02d5\001\002\000" +
    "\004\074\u02d6\001\002\000\004\076\u02d7\001\002\000\036" +
    "\003\u02de\046\u0223\047\u021d\050\u0222\051\u022c\052\u0225\076" +
    "\u02db\107\u02df\110\u02d9\112\u02e1\115\u02dc\117\u02d8\122\u02da" +
    "\130\u0228\001\002\000\004\070\u0314\001\002\000\004\070" +
    "\u0310\001\002\000\004\070\u0308\001\002\000\004\075\u0306" +
    "\001\002\000\004\070\u02fd\001\002\000\036\003\u02de\046" +
    "\u0223\047\u021d\050\u0222\051\u022c\052\u0225\076\u02db\107\u02df" +
    "\110\u02d9\112\u02e1\115\u02dc\117\u02d8\122\u02da\130\u0228\001" +
    "\002\000\036\003\u02de\046\u0223\047\u021d\050\u0222\051\u022c" +
    "\052\u0225\076\u02db\107\u02df\110\u02d9\112\u02e1\115\u02dc\117" +
    "\u02d8\122\u02da\130\u0228\001\002\000\004\070\u02f6\001\002" +
    "\000\040\003\uff55\046\uff55\047\uff55\050\uff55\051\uff55\052" +
    "\uff55\067\uff55\107\uff55\110\uff55\112\uff55\115\uff55\116\u02e6" +
    "\117\uff55\122\uff55\130\uff55\001\002\000\004\070\u02e2\001" +
    "\002\000\006\125\u0243\130\u0242\001\002\000\004\073\u02e4" +
    "\001\002\000\036\003\u02de\046\u0223\047\u021d\050\u0222\051" +
    "\u022c\052\u0225\076\u02db\107\u02df\110\u02d9\112\u02e1\115\u02dc" +
    "\117\u02d8\122\u02da\130\u0228\001\002\000\042\003\uff6b\046" +
    "\uff6b\047\uff6b\050\uff6b\051\uff6b\052\uff6b\067\uff6b\076\uff6b" +
    "\107\uff6b\110\uff6b\112\uff6b\115\uff6b\116\uff6b\117\uff6b\122" +
    "\uff6b\130\uff6b\001\002\000\006\113\u02e9\115\u02ea\001\002" +
    "\000\036\003\u0229\046\u0223\047\u021d\050\u0222\051\u022c\052" +
    "\u0225\067\u0220\107\u022a\110\u021f\112\u022b\115\u0226\117\u0221" +
    "\122\u021e\130\u0228\001\002\000\010\055\uff77\077\uff77\126" +
    "\uff77\001\002\000\004\074\u02f3\001\002\000\004\070\u02eb" +
    "\001\002\000\020\061\u02cb\070\u02c5\124\u02ce\127\u02c9\130" +
    "\u02ca\131\u02cc\132\u02cd\001\002\000\004\121\u02ed\001\002" +
    "\000\004\113\u02ee\001\002\000\004\074\u02ef\001\002\000" +
    "\004\076\u02f0\001\002\000\036\003\u02de\046\u0223\047\u021d" +
    "\050\u0222\051\u022c\052\u0225\076\u02db\107\u02df\110\u02d9\112" +
    "\u02e1\115\u02dc\117\u02d8\122\u02da\130\u0228\001\002\000\042" +
    "\003\uff55\046\uff55\047\uff55\050\uff55\051\uff55\052\uff55\067" +
    "\uff55\076\uff55\107\uff55\110\uff55\112\uff55\115\uff55\116\u02e6" +
    "\117\uff55\122\uff55\130\uff55\001\002\000\040\003\uff57\046" +
    "\uff57\047\uff57\050\uff57\051\uff57\052\uff57\067\uff57\076\uff57" +
    "\107\uff57\110\uff57\112\uff57\115\uff57\117\uff57\122\uff57\130" +
    "\uff57\001\002\000\004\076\u02f4\001\002\000\036\003\u02de" +
    "\046\u0223\047\u021d\050\u0222\051\u022c\052\u0225\076\u02db\107" +
    "\u02df\110\u02d9\112\u02e1\115\u02dc\117\u02d8\122\u02da\130\u0228" +
    "\001\002\000\040\003\uff56\046\uff56\047\uff56\050\uff56\051" +
    "\uff56\052\uff56\067\uff56\076\uff56\107\uff56\110\uff56\112\uff56" +
    "\115\uff56\117\uff56\122\uff56\130\uff56\001\002\000\006\125" +
    "\u02a2\130\u02a0\001\002\000\004\071\u02f8\001\002\000\004" +
    "\073\u02f9\001\002\000\036\003\u02de\046\u0223\047\u021d\050" +
    "\u0222\051\u022c\052\u0225\076\u02db\107\u02df\110\u02d9\112\u02e1" +
    "\115\u02dc\117\u02d8\122\u02da\130\u0228\001\002\000\042\003" +
    "\uff70\046\uff70\047\uff70\050\uff70\051\uff70\052\uff70\067\uff70" +
    "\076\uff70\107\uff70\110\uff70\112\uff70\115\uff70\116\uff70\117" +
    "\uff70\122\uff70\130\uff70\001\002\000\042\003\uff69\046\uff69" +
    "\047\uff69\050\uff69\051\uff69\052\uff69\067\uff69\076\uff69\107" +
    "\uff69\110\uff69\112\uff69\115\uff69\116\uff69\117\uff69\122\uff69" +
    "\130\uff69\001\002\000\042\003\uff71\046\uff71\047\uff71\050" +
    "\uff71\051\uff71\052\uff71\067\uff71\076\uff71\107\uff71\110\uff71" +
    "\112\uff71\115\uff71\116\uff71\117\uff71\122\uff71\130\uff71\001" +
    "\002\000\020\061\u02cb\070\u02c5\124\u02ce\127\u02c9\130\u02ca" +
    "\131\u02cc\132\u02cd\001\002\000\004\121\u02ff\001\002\000" +
    "\004\113\u0300\001\002\000\004\074\u0301\001\002\000\004" +
    "\076\u0302\001\002\000\036\003\u02de\046\u0223\047\u021d\050" +
    "\u0222\051\u022c\052\u0225\076\u02db\107\u02df\110\u02d9\112\u02e1" +
    "\115\u02dc\117\u02d8\122\u02da\130\u0228\001\002\000\040\003" +
    "\uff55\046\uff55\047\uff55\050\uff55\051\uff55\052\uff55\076\uff55" +
    "\107\uff55\110\uff55\112\uff55\115\uff55\116\u02e6\117\uff55\122" +
    "\uff55\130\uff55\001\002\000\036\003\u02de\046\u0223\047\u021d" +
    "\050\u0222\051\u022c\052\u0225\076\u02db\107\u02df\110\u02d9\112" +
    "\u02e1\115\u02dc\117\u02d8\122\u02da\130\u0228\001\002\000\042" +
    "\003\uff6e\046\uff6e\047\uff6e\050\uff6e\051\uff6e\052\uff6e\067" +
    "\uff6e\076\uff6e\107\uff6e\110\uff6e\112\uff6e\115\uff6e\116\uff6e" +
    "\117\uff6e\122\uff6e\130\uff6e\001\002\000\004\114\u0307\001" +
    "\002\000\042\003\uff6a\046\uff6a\047\uff6a\050\uff6a\051\uff6a" +
    "\052\uff6a\067\uff6a\076\uff6a\107\uff6a\110\uff6a\112\uff6a\115" +
    "\uff6a\116\uff6a\117\uff6a\122\uff6a\130\uff6a\001\002\000\020" +
    "\061\u02cb\070\u02c5\124\u02ce\127\u02c9\130\u02ca\131\u02cc\132" +
    "\u02cd\001\002\000\004\123\u030a\001\002\000\004\113\u030b" +
    "\001\002\000\004\074\u030c\001\002\000\004\076\u030d\001" +
    "\002\000\036\003\u02de\046\u0223\047\u021d\050\u0222\051\u022c" +
    "\052\u0225\076\u02db\107\u02df\110\u02d9\112\u02e1\115\u02dc\117" +
    "\u02d8\122\u02da\130\u0228\001\002\000\036\003\u02de\046\u0223" +
    "\047\u021d\050\u0222\051\u022c\052\u0225\076\u02db\107\u02df\110" +
    "\u02d9\112\u02e1\115\u02dc\117\u02d8\122\u02da\130\u0228\001\002" +
    "\000\042\003\uff6c\046\uff6c\047\uff6c\050\uff6c\051\uff6c\052" +
    "\uff6c\067\uff6c\076\uff6c\107\uff6c\110\uff6c\112\uff6c\115\uff6c" +
    "\116\uff6c\117\uff6c\122\uff6c\130\uff6c\001\002\000\004\071" +
    "\u0311\001\002\000\004\073\u0312\001\002\000\036\003\u02de" +
    "\046\u0223\047\u021d\050\u0222\051\u022c\052\u0225\076\u02db\107" +
    "\u02df\110\u02d9\112\u02e1\115\u02dc\117\u02d8\122\u02da\130\u0228" +
    "\001\002\000\042\003\uff6f\046\uff6f\047\uff6f\050\uff6f\051" +
    "\uff6f\052\uff6f\067\uff6f\076\uff6f\107\uff6f\110\uff6f\112\uff6f" +
    "\115\uff6f\116\uff6f\117\uff6f\122\uff6f\130\uff6f\001\002\000" +
    "\006\046\u0317\130\u0315\001\002\000\004\054\u0325\001\002" +
    "\000\004\071\u031b\001\002\000\004\130\u0318\001\002\000" +
    "\004\054\u0319\001\002\000\010\130\u02ca\131\u02cc\132\u02cd" +
    "\001\002\000\004\071\uff48\001\002\000\004\120\u031c\001" +
    "\002\000\004\070\u031d\001\002\000\012\070\u02c5\130\u02ca" +
    "\131\u02cc\132\u02cd\001\002\000\004\071\u031f\001\002\000" +
    "\004\113\u0320\001\002\000\004\074\u0321\001\002\000\004" +
    "\076\u0322\001\002\000\036\003\u02de\046\u0223\047\u021d\050" +
    "\u0222\051\u022c\052\u0225\076\u02db\107\u02df\110\u02d9\112\u02e1" +
    "\115\u02dc\117\u02d8\122\u02da\130\u0228\001\002\000\036\003" +
    "\u02de\046\u0223\047\u021d\050\u0222\051\u022c\052\u0225\076\u02db" +
    "\107\u02df\110\u02d9\112\u02e1\115\u02dc\117\u02d8\122\u02da\130" +
    "\u0228\001\002\000\042\003\uff6d\046\uff6d\047\uff6d\050\uff6d" +
    "\051\uff6d\052\uff6d\067\uff6d\076\uff6d\107\uff6d\110\uff6d\112" +
    "\uff6d\115\uff6d\116\uff6d\117\uff6d\122\uff6d\130\uff6d\001\002" +
    "\000\010\130\u02ca\131\u02cc\132\u02cd\001\002\000\004\071" +
    "\uff49\001\002\000\004\060\u0339\001\002\000\006\121\uff65" +
    "\123\uff65\001\002\000\020\054\u0338\070\uff5b\124\uff5b\127" +
    "\uff5b\130\uff5b\131\uff5b\132\uff5b\001\002\000\016\070\u02c5" +
    "\124\u02ce\127\u02c9\130\u02ca\131\u02cc\132\u02cd\001\002\000" +
    "\006\121\uff67\123\uff67\001\002\000\006\121\uff5e\123\uff5e" +
    "\001\002\000\020\054\u0335\070\uff59\124\uff59\127\uff59\130" +
    "\uff59\131\uff59\132\uff59\001\002\000\004\054\u0334\001\002" +
    "\000\004\054\u0333\001\002\000\004\057\u0331\001\002\000" +
    "\020\061\u02cb\070\u02c5\124\u02ce\127\u02c9\130\u02ca\131\u02cc" +
    "\132\u02cd\001\002\000\006\121\uff5f\123\uff5f\001\002\000" +
    "\016\070\uff5c\124\uff5c\127\uff5c\130\uff5c\131\uff5c\132\uff5c" +
    "\001\002\000\016\070\uff5d\124\uff5d\127\uff5d\130\uff5d\131" +
    "\uff5d\132\uff5d\001\002\000\016\070\uff58\124\uff58\127\uff58" +
    "\130\uff58\131\uff58\132\uff58\001\002\000\010\057\u0330\060" +
    "\u0327\071\u032c\001\002\000\006\121\uff66\123\uff66\001\002" +
    "\000\016\070\uff5a\124\uff5a\127\uff5a\130\uff5a\131\uff5a\132" +
    "\uff5a\001\002\000\020\061\u02cb\070\u02c5\124\u02ce\127\u02c9" +
    "\130\u02ca\131\u02cc\132\u02cd\001\002\000\006\121\uff60\123" +
    "\uff60\001\002\000\004\071\u033c\001\002\000\030\054\uff4a" +
    "\055\uff4a\056\uff4a\057\uff4a\060\uff4a\061\uff4a\062\u033e\063" +
    "\u033d\064\u0341\065\u033f\071\uff4a\001\002\000\012\070\u02c5" +
    "\130\u02ca\131\u02cc\132\u02cd\001\002\000\012\070\u02c5\130" +
    "\u02ca\131\u02cc\132\u02cd\001\002\000\012\070\u02c5\130\u02ca" +
    "\131\u02cc\132\u02cd\001\002\000\020\054\uff50\055\uff50\056" +
    "\uff50\057\uff50\060\uff50\061\uff50\071\uff50\001\002\000\012" +
    "\070\u02c5\130\u02ca\131\u02cc\132\u02cd\001\002\000\020\054" +
    "\uff4c\055\uff4c\056\uff4c\057\uff4c\060\uff4c\061\uff4c\071\uff4c" +
    "\001\002\000\020\054\uff4b\055\uff4b\056\uff4b\057\uff4b\060" +
    "\uff4b\061\uff4b\071\uff4b\001\002\000\020\054\uff4e\055\uff4e" +
    "\056\uff4e\057\uff4e\060\uff4e\061\uff4e\071\uff4e\001\002\000" +
    "\020\054\uff4d\055\uff4d\056\uff4d\057\uff4d\060\uff4d\061\uff4d" +
    "\071\uff4d\001\002\000\012\070\u02c5\130\u02ca\131\u02cc\132" +
    "\u02cd\001\002\000\012\070\u02c5\130\u02ca\131\u02cc\132\u02cd" +
    "\001\002\000\012\070\u02c5\130\u02ca\131\u02cc\132\u02cd\001" +
    "\002\000\012\070\u02c5\130\u02ca\131\u02cc\132\u02cd\001\002" +
    "\000\020\054\uff52\055\uff52\056\uff52\057\uff52\060\uff52\061" +
    "\uff52\071\uff52\001\002\000\020\054\uff51\055\uff51\056\uff51" +
    "\057\uff51\060\uff51\061\uff51\071\uff51\001\002\000\020\054" +
    "\uff54\055\uff54\056\uff54\057\uff54\060\uff54\061\uff54\071\uff54" +
    "\001\002\000\020\054\uff53\055\uff53\056\uff53\057\uff53\060" +
    "\uff53\061\uff53\071\uff53\001\002\000\010\054\u0352\072\u0351" +
    "\073\u0353\001\002\000\004\130\u0350\001\002\000\010\054" +
    "\u0352\072\u0351\073\u0353\001\002\000\004\130\u037e\001\002" +
    "\000\030\100\u0356\101\u035a\102\u0359\103\u0355\104\u0357\111" +
    "\u0358\124\u02ad\130\u02aa\131\u02ab\132\u02ae\133\u02af\001\002" +
    "\000\040\003\uff23\046\uff23\047\uff23\050\uff23\051\uff23\052" +
    "\uff23\067\uff23\076\uff23\107\uff23\110\uff23\112\uff23\115\uff23" +
    "\117\uff23\122\uff23\130\uff23\001\002\000\040\003\uff3c\046" +
    "\uff3c\047\uff3c\050\uff3c\051\uff3c\052\uff3c\067\uff3c\076\uff3c" +
    "\107\uff3c\110\uff3c\112\uff3c\115\uff3c\117\uff3c\122\uff3c\130" +
    "\uff3c\001\002\000\004\070\u037b\001\002\000\004\070\u0378" +
    "\001\002\000\004\070\u0375\001\002\000\004\070\u036f\001" +
    "\002\000\004\070\u036c\001\002\000\004\070\u0366\001\002" +
    "\000\010\062\u035f\072\u035d\073\u0360\001\002\000\010\062" +
    "\u035f\072\u035d\073\u0360\001\002\000\004\130\u0363\001\002" +
    "\000\040\003\uff24\046\uff24\047\uff24\050\uff24\051\uff24\052" +
    "\uff24\067\uff24\076\uff24\107\uff24\110\uff24\112\uff24\115\uff24" +
    "\117\uff24\122\uff24\130\uff24\001\002\000\014\124\u02ad\130" +
    "\u02aa\131\u02ab\132\u02ae\133\u02af\001\002\000\040\003\uff19" +
    "\046\uff19\047\uff19\050\uff19\051\uff19\052\uff19\067\uff19\076" +
    "\uff19\107\uff19\110\uff19\112\uff19\115\uff19\117\uff19\122\uff19" +
    "\130\uff19\001\002\000\010\062\u035f\072\u035d\073\u0360\001" +
    "\002\000\040\003\uff1b\046\uff1b\047\uff1b\050\uff1b\051\uff1b" +
    "\052\uff1b\067\uff1b\076\uff1b\107\uff1b\110\uff1b\112\uff1b\115" +
    "\uff1b\117\uff1b\122\uff1b\130\uff1b\001\002\000\010\054\u0352" +
    "\072\u0351\073\u0353\001\002\000\040\003\uff1a\046\uff1a\047" +
    "\uff1a\050\uff1a\051\uff1a\052\uff1a\067\uff1a\076\uff1a\107\uff1a" +
    "\110\uff1a\112\uff1a\115\uff1a\117\uff1a\122\uff1a\130\uff1a\001" +
    "\002\000\040\003\uff27\046\uff27\047\uff27\050\uff27\051\uff27" +
    "\052\uff27\067\uff27\076\uff27\107\uff27\110\uff27\112\uff27\115" +
    "\uff27\117\uff27\122\uff27\130\uff27\001\002\000\006\124\u0369" +
    "\130\u0367\001\002\000\004\071\uff1d\001\002\000\004\071" +
    "\u036b\001\002\000\042\054\116\060\107\062\113\063\123" +
    "\064\106\065\117\070\112\071\114\072\111\076\110\124" +
    "\125\130\115\131\121\132\122\134\124\135\105\001\002" +
    "\000\004\071\uff1c\001\002\000\010\062\uff21\072\uff21\073" +
    "\uff21\001\002\000\006\124\u0369\130\u0367\001\002\000\004" +
    "\071\u036e\001\002\000\010\062\uff20\072\uff20\073\uff20\001" +
    "\002\000\004\125\u0370\001\002\000\004\130\u0371\001\002" +
    "\000\004\125\u0372\001\002\000\004\071\u0373\001\002\000" +
    "\010\062\u035f\072\u035d\073\u0360\001\002\000\040\003\uff25" +
    "\046\uff25\047\uff25\050\uff25\051\uff25\052\uff25\067\uff25\076" +
    "\uff25\107\uff25\110\uff25\112\uff25\115\uff25\117\uff25\122\uff25" +
    "\130\uff25\001\002\000\006\124\u0369\130\u0367\001\002\000" +
    "\004\071\u0377\001\002\000\010\062\uff1e\072\uff1e\073\uff1e" +
    "\001\002\000\006\124\u0369\130\u0367\001\002\000\004\071" +
    "\u037a\001\002\000\010\062\uff22\072\uff22\073\uff22\001\002" +
    "\000\006\124\u0369\130\u0367\001\002\000\004\071\u037d\001" +
    "\002\000\010\062\uff1f\072\uff1f\073\uff1f\001\002\000\010" +
    "\054\u0352\072\u0351\073\u0353\001\002\000\040\003\uff26\046" +
    "\uff26\047\uff26\050\uff26\051\uff26\052\uff26\067\uff26\076\uff26" +
    "\107\uff26\110\uff26\112\uff26\115\uff26\117\uff26\122\uff26\130" +
    "\uff26\001\002\000\040\003\uff41\046\uff41\047\uff41\050\uff41" +
    "\051\uff41\052\uff41\067\uff41\076\uff41\107\uff41\110\uff41\112" +
    "\uff41\115\uff41\117\uff41\122\uff41\130\uff41\001\002\000\006" +
    "\003\uff7c\055\uff7c\001\002\000\010\054\u0386\072\u0385\073" +
    "\u0388\001\002\000\004\130\u0384\001\002\000\010\054\u0386" +
    "\072\u0385\073\u0388\001\002\000\004\130\u03a3\001\002\000" +
    "\014\106\u038d\127\u038a\130\u0389\131\u038c\133\u038e\001\002" +
    "\000\040\003\uff3f\046\uff3f\047\uff3f\050\uff3f\051\uff3f\052" +
    "\uff3f\067\uff3f\076\uff3f\107\uff3f\110\uff3f\112\uff3f\115\uff3f" +
    "\117\uff3f\122\uff3f\130\uff3f\001\002\000\040\003\uff0a\046" +
    "\uff0a\047\uff0a\050\uff0a\051\uff0a\052\uff0a\067\uff0a\076\uff0a" +
    "\107\uff0a\110\uff0a\112\uff0a\115\uff0a\117\uff0a\122\uff0a\130" +
    "\uff0a\001\002\000\016\062\uff00\063\uff00\064\uff00\065\uff00" +
    "\072\uff00\073\uff00\001\002\000\016\062\uff02\063\uff02\064" +
    "\uff02\065\uff02\072\uff02\073\uff02\001\002\000\016\062\u0393" +
    "\063\u0391\064\u0395\065\u0394\072\u0392\073\u0396\001\002\000" +
    "\016\062\uff03\063\uff03\064\uff03\065\uff03\072\uff03\073\uff03" +
    "\001\002\000\004\070\u038f\001\002\000\016\062\uff01\063" +
    "\uff01\064\uff01\065\uff01\072\uff01\073\uff01\001\002\000\004" +
    "\071\u0390\001\002\000\016\062\u0393\063\u0391\064\u0395\065" +
    "\u0394\072\u0392\073\u0396\001\002\000\012\127\u038a\130\u0389" +
    "\131\u038c\133\u038e\001\002\000\004\130\u039e\001\002\000" +
    "\012\127\u038a\130\u0389\131\u038c\133\u038e\001\002\000\012" +
    "\127\u038a\130\u0389\131\u038c\133\u038e\001\002\000\012\127" +
    "\u038a\130\u0389\131\u038c\133\u038e\001\002\000\040\003\uff04" +
    "\046\uff04\047\uff04\050\uff04\051\uff04\052\uff04\067\uff04\076" +
    "\uff04\107\uff04\110\uff04\112\uff04\115\uff04\117\uff04\122\uff04" +
    "\130\uff04\001\002\000\040\003\uff0b\046\uff0b\047\uff0b\050" +
    "\uff0b\051\uff0b\052\uff0b\067\uff0b\076\uff0b\107\uff0b\110\uff0b" +
    "\112\uff0b\115\uff0b\117\uff0b\122\uff0b\130\uff0b\001\002\000" +
    "\016\062\u0393\063\u0391\064\u0395\065\u0394\072\u0392\073\u0396" +
    "\001\002\000\040\003\uff06\046\uff06\047\uff06\050\uff06\051" +
    "\uff06\052\uff06\067\uff06\076\uff06\107\uff06\110\uff06\112\uff06" +
    "\115\uff06\117\uff06\122\uff06\130\uff06\001\002\000\016\062" +
    "\u0393\063\u0391\064\u0395\065\u0394\072\u0392\073\u0396\001\002" +
    "\000\040\003\uff07\046\uff07\047\uff07\050\uff07\051\uff07\052" +
    "\uff07\067\uff07\076\uff07\107\uff07\110\uff07\112\uff07\115\uff07" +
    "\117\uff07\122\uff07\130\uff07\001\002\000\016\062\u0393\063" +
    "\u0391\064\u0395\065\u0394\072\u0392\073\u0396\001\002\000\040" +
    "\003\uff09\046\uff09\047\uff09\050\uff09\051\uff09\052\uff09\067" +
    "\uff09\076\uff09\107\uff09\110\uff09\112\uff09\115\uff09\117\uff09" +
    "\122\uff09\130\uff09\001\002\000\010\054\u0386\072\u0385\073" +
    "\u0388\001\002\000\040\003\uff05\046\uff05\047\uff05\050\uff05" +
    "\051\uff05\052\uff05\067\uff05\076\uff05\107\uff05\110\uff05\112" +
    "\uff05\115\uff05\117\uff05\122\uff05\130\uff05\001\002\000\016" +
    "\062\u0393\063\u0391\064\u0395\065\u0394\072\u0392\073\u0396\001" +
    "\002\000\040\003\uff08\046\uff08\047\uff08\050\uff08\051\uff08" +
    "\052\uff08\067\uff08\076\uff08\107\uff08\110\uff08\112\uff08\115" +
    "\uff08\117\uff08\122\uff08\130\uff08\001\002\000\040\003\uff0d" +
    "\046\uff0d\047\uff0d\050\uff0d\051\uff0d\052\uff0d\067\uff0d\076" +
    "\uff0d\107\uff0d\110\uff0d\112\uff0d\115\uff0d\117\uff0d\122\uff0d" +
    "\130\uff0d\001\002\000\010\054\u0386\072\u0385\073\u0388\001" +
    "\002\000\040\003\uff0c\046\uff0c\047\uff0c\050\uff0c\051\uff0c" +
    "\052\uff0c\067\uff0c\076\uff0c\107\uff0c\110\uff0c\112\uff0c\115" +
    "\uff0c\117\uff0c\122\uff0c\130\uff0c\001\002\000\040\003\uff44" +
    "\046\uff44\047\uff44\050\uff44\051\uff44\052\uff44\067\uff44\076" +
    "\uff44\107\uff44\110\uff44\112\uff44\115\uff44\117\uff44\122\uff44" +
    "\130\uff44\001\002\000\010\054\u03aa\072\u03a9\073\u03ac\001" +
    "\002\000\004\130\u03a8\001\002\000\010\054\u03aa\072\u03a9" +
    "\073\u03ac\001\002\000\004\130\u03c1\001\002\000\006\127" +
    "\u03ad\130\u03ae\001\002\000\040\003\uff3b\046\uff3b\047\uff3b" +
    "\050\uff3b\051\uff3b\052\uff3b\067\uff3b\076\uff3b\107\uff3b\110" +
    "\uff3b\112\uff3b\115\uff3b\117\uff3b\122\uff3b\130\uff3b\001\002" +
    "\000\040\003\uff30\046\uff30\047\uff30\050\uff30\051\uff30\052" +
    "\uff30\067\uff30\076\uff30\107\uff30\110\uff30\112\uff30\115\uff30" +
    "\117\uff30\122\uff30\130\uff30\001\002\000\012\057\uff2f\060" +
    "\uff2f\072\uff2f\073\uff2f\001\002\000\012\057\uff2e\060\uff2e" +
    "\072\uff2e\073\uff2e\001\002\000\012\057\u03b3\060\u03b1\072" +
    "\u03b0\073\u03b4\001\002\000\004\130\u03bf\001\002\000\010" +
    "\060\u03bb\127\u03ad\130\u03ae\001\002\000\040\003\uff32\046" +
    "\uff32\047\uff32\050\uff32\051\uff32\052\uff32\067\uff32\076\uff32" +
    "\107\uff32\110\uff32\112\uff32\115\uff32\117\uff32\122\uff32\130" +
    "\uff32\001\002\000\010\057\u03b6\127\u03ad\130\u03ae\001\002" +
    "\000\040\003\uff28\046\uff28\047\uff28\050\uff28\051\uff28\052" +
    "\uff28\067\uff28\076\uff28\107\uff28\110\uff28\112\uff28\115\uff28" +
    "\117\uff28\122\uff28\130\uff28\001\002\000\012\057\u03b3\060" +
    "\u03b1\072\u03b0\073\u03b4\001\002\000\006\127\u03ad\130\u03ae" +
    "\001\002\000\012\057\u03b3\060\u03b1\072\u03b0\073\u03b4\001" +
    "\002\000\040\003\uff2c\046\uff2c\047\uff2c\050\uff2c\051\uff2c" +
    "\052\uff2c\067\uff2c\076\uff2c\107\uff2c\110\uff2c\112\uff2c\115" +
    "\uff2c\117\uff2c\122\uff2c\130\uff2c\001\002\000\040\003\uff2d" +
    "\046\uff2d\047\uff2d\050\uff2d\051\uff2d\052\uff2d\067\uff2d\076" +
    "\uff2d\107\uff2d\110\uff2d\112\uff2d\115\uff2d\117\uff2d\122\uff2d" +
    "\130\uff2d\001\002\000\012\057\u03b3\060\u03b1\072\u03b0\073" +
    "\u03b4\001\002\000\006\127\u03ad\130\u03ae\001\002\000\012" +
    "\057\u03b3\060\u03b1\072\u03b0\073\u03b4\001\002\000\040\003" +
    "\uff2a\046\uff2a\047\uff2a\050\uff2a\051\uff2a\052\uff2a\067\uff2a" +
    "\076\uff2a\107\uff2a\110\uff2a\112\uff2a\115\uff2a\117\uff2a\122" +
    "\uff2a\130\uff2a\001\002\000\040\003\uff2b\046\uff2b\047\uff2b" +
    "\050\uff2b\051\uff2b\052\uff2b\067\uff2b\076\uff2b\107\uff2b\110" +
    "\uff2b\112\uff2b\115\uff2b\117\uff2b\122\uff2b\130\uff2b\001\002" +
    "\000\010\054\u03aa\072\u03a9\073\u03ac\001\002\000\040\003" +
    "\uff29\046\uff29\047\uff29\050\uff29\051\uff29\052\uff29\067\uff29" +
    "\076\uff29\107\uff29\110\uff29\112\uff29\115\uff29\117\uff29\122" +
    "\uff29\130\uff29\001\002\000\010\054\u03aa\072\u03a9\073\u03ac" +
    "\001\002\000\040\003\uff31\046\uff31\047\uff31\050\uff31\051" +
    "\uff31\052\uff31\067\uff31\076\uff31\107\uff31\110\uff31\112\uff31" +
    "\115\uff31\117\uff31\122\uff31\130\uff31\001\002\000\040\003" +
    "\uff40\046\uff40\047\uff40\050\uff40\051\uff40\052\uff40\067\uff40" +
    "\076\uff40\107\uff40\110\uff40\112\uff40\115\uff40\117\uff40\122" +
    "\uff40\130\uff40\001\002\000\006\046\u0317\130\u0315\001\002" +
    "\000\004\071\u03c6\001\002\000\004\120\u03c7\001\002\000" +
    "\004\070\u03c8\001\002\000\012\070\u02c5\130\u02ca\131\u02cc" +
    "\132\u02cd\001\002\000\004\071\u03ca\001\002\000\004\113" +
    "\u03cb\001\002\000\004\074\u03cc\001\002\000\004\076\u03cd" +
    "\001\002\000\036\003\u02de\046\u0223\047\u021d\050\u0222\051" +
    "\u022c\052\u0225\076\u02db\107\u02df\110\u02d9\112\u02e1\115\u02dc" +
    "\117\u02d8\122\u02da\130\u0228\001\002\000\036\003\u0229\046" +
    "\u0223\047\u021d\050\u0222\051\u022c\052\u0225\067\u0220\107\u022a" +
    "\110\u021f\112\u022b\115\u0226\117\u0221\122\u021e\130\u0228\001" +
    "\002\000\010\055\uff76\077\uff76\126\uff76\001\002\000\004" +
    "\071\u03d1\001\002\000\004\073\u03d2\001\002\000\036\003" +
    "\u0229\046\u0223\047\u021d\050\u0222\051\u022c\052\u0225\067\u0220" +
    "\107\u022a\110\u021f\112\u022b\115\u0226\117\u0221\122\u021e\130" +
    "\u0228\001\002\000\010\055\uff78\077\uff78\126\uff78\001\002" +
    "\000\020\061\u02cb\070\u02c5\124\u02ce\127\u02c9\130\u02ca\131" +
    "\u02cc\132\u02cd\001\002\000\004\123\u03d6\001\002\000\004" +
    "\113\u03d7\001\002\000\004\074\u03d8\001\002\000\004\076" +
    "\u03d9\001\002\000\036\003\u02de\046\u0223\047\u021d\050\u0222" +
    "\051\u022c\052\u0225\076\u02db\107\u02df\110\u02d9\112\u02e1\115" +
    "\u02dc\117\u02d8\122\u02da\130\u0228\001\002\000\036\003\u0229" +
    "\046\u0223\047\u021d\050\u0222\051\u022c\052\u0225\067\u0220\107" +
    "\u022a\110\u021f\112\u022b\115\u0226\117\u0221\122\u021e\130\u0228" +
    "\001\002\000\010\055\uff75\077\uff75\126\uff75\001\002\000" +
    "\010\054\u03e0\072\u03df\073\u03e2\001\002\000\004\130\u03de" +
    "\001\002\000\010\054\u03e0\072\u03df\073\u03e2\001\002\000" +
    "\004\130\u03fe\001\002\000\016\106\u03e6\127\u03e3\130\u03e4" +
    "\131\u03e5\132\u03e8\133\u03e9\001\002\000\040\003\uff3e\046" +
    "\uff3e\047\uff3e\050\uff3e\051\uff3e\052\uff3e\067\uff3e\076\uff3e" +
    "\107\uff3e\110\uff3e\112\uff3e\115\uff3e\117\uff3e\122\uff3e\130" +
    "\uff3e\001\002\000\040\003\ufefc\046\ufefc\047\ufefc\050\ufefc" +
    "\051\ufefc\052\ufefc\067\ufefc\076\ufefc\107\ufefc\110\ufefc\112" +
    "\ufefc\115\ufefc\117\ufefc\122\ufefc\130\ufefc\001\002\000\016" +
    "\062\ufef3\063\ufef3\064\ufef3\065\ufef3\072\ufef3\073\ufef3\001" +
    "\002\000\016\062\ufef1\063\ufef1\064\ufef1\065\ufef1\072\ufef1" +
    "\073\ufef1\001\002\000\016\062\ufef5\063\ufef5\064\ufef5\065" +
    "\ufef5\072\ufef5\073\ufef5\001\002\000\004\070\u03fb\001\002" +
    "\000\016\062\u03ed\063\u03ea\064\u03ef\065\u03ee\072\u03eb\073" +
    "\u03f0\001\002\000\016\062\ufef4\063\ufef4\064\ufef4\065\ufef4" +
    "\072\ufef4\073\ufef4\001\002\000\016\062\ufef2\063\ufef2\064" +
    "\ufef2\065\ufef2\072\ufef2\073\ufef2\001\002\000\014\127\u03e3" +
    "\130\u03e4\131\u03e5\132\u03e8\133\u03e9\001\002\000\004\130" +
    "\u03f7\001\002\000\040\003\ufeff\046\ufeff\047\ufeff\050\ufeff" +
    "\051\ufeff\052\ufeff\067\ufeff\076\ufeff\107\ufeff\110\ufeff\112" +
    "\ufeff\115\ufeff\117\ufeff\122\ufeff\130\ufeff\001\002\000\014" +
    "\127\u03e3\130\u03e4\131\u03e5\132\u03e8\133\u03e9\001\002\000" +
    "\014\127\u03e3\130\u03e4\131\u03e5\132\u03e8\133\u03e9\001\002" +
    "\000\014\127\u03e3\130\u03e4\131\u03e5\132\u03e8\133\u03e9\001" +
    "\002\000\040\003\ufef6\046\ufef6\047\ufef6\050\ufef6\051\ufef6" +
    "\052\ufef6\067\ufef6\076\ufef6\107\ufef6\110\ufef6\112\ufef6\115" +
    "\ufef6\117\ufef6\122\ufef6\130\ufef6\001\002\000\016\062\u03ed" +
    "\063\u03ea\064\u03ef\065\u03ee\072\u03eb\073\u03f0\001\002\000" +
    "\040\003\ufef8\046\ufef8\047\ufef8\050\ufef8\051\ufef8\052\ufef8" +
    "\067\ufef8\076\ufef8\107\ufef8\110\ufef8\112\ufef8\115\ufef8\117" +
    "\ufef8\122\ufef8\130\ufef8\001\002\000\016\062\u03ed\063\u03ea" +
    "\064\u03ef\065\u03ee\072\u03eb\073\u03f0\001\002\000\040\003" +
    "\ufef9\046\ufef9\047\ufef9\050\ufef9\051\ufef9\052\ufef9\067\ufef9" +
    "\076\ufef9\107\ufef9\110\ufef9\112\ufef9\115\ufef9\117\ufef9\122" +
    "\ufef9\130\ufef9\001\002\000\016\062\u03ed\063\u03ea\064\u03ef" +
    "\065\u03ee\072\u03eb\073\u03f0\001\002\000\040\003\ufefb\046" +
    "\ufefb\047\ufefb\050\ufefb\051\ufefb\052\ufefb\067\ufefb\076\ufefb" +
    "\107\ufefb\110\ufefb\112\ufefb\115\ufefb\117\ufefb\122\ufefb\130" +
    "\ufefb\001\002\000\010\054\u03e0\072\u03df\073\u03e2\001\002" +
    "\000\040\003\ufef7\046\ufef7\047\ufef7\050\ufef7\051\ufef7\052" +
    "\ufef7\067\ufef7\076\ufef7\107\ufef7\110\ufef7\112\ufef7\115\ufef7" +
    "\117\ufef7\122\ufef7\130\ufef7\001\002\000\016\062\u03ed\063" +
    "\u03ea\064\u03ef\065\u03ee\072\u03eb\073\u03f0\001\002\000\040" +
    "\003\ufefa\046\ufefa\047\ufefa\050\ufefa\051\ufefa\052\ufefa\067" +
    "\ufefa\076\ufefa\107\ufefa\110\ufefa\112\ufefa\115\ufefa\117\ufefa" +
    "\122\ufefa\130\ufefa\001\002\000\004\071\u03fc\001\002\000" +
    "\016\062\u03ed\063\u03ea\064\u03ef\065\u03ee\072\u03eb\073\u03f0" +
    "\001\002\000\040\003\ufefd\046\ufefd\047\ufefd\050\ufefd\051" +
    "\ufefd\052\ufefd\067\ufefd\076\ufefd\107\ufefd\110\ufefd\112\ufefd" +
    "\115\ufefd\117\ufefd\122\ufefd\130\ufefd\001\002\000\010\054" +
    "\u03e0\072\u03df\073\u03e2\001\002\000\040\003\ufefe\046\ufefe" +
    "\047\ufefe\050\ufefe\051\ufefe\052\ufefe\067\ufefe\076\ufefe\107" +
    "\ufefe\110\ufefe\112\ufefe\115\ufefe\117\ufefe\122\ufefe\130\ufefe" +
    "\001\002\000\040\003\uff43\046\uff43\047\uff43\050\uff43\051" +
    "\uff43\052\uff43\067\uff43\076\uff43\107\uff43\110\uff43\112\uff43" +
    "\115\uff43\117\uff43\122\uff43\130\uff43\001\002\000\004\024" +
    "\u0402\001\002\000\004\056\u0403\001\002\000\006\003\uff7b" +
    "\055\uff7b\001\002\000\004\071\u0405\001\002\000\004\066" +
    "\u0406\001\002\000\036\003\u0229\046\u0223\047\u021d\050\u0222" +
    "\051\u022c\052\u0225\067\u0220\107\u022a\110\u021f\112\u022b\115" +
    "\u0226\117\u0221\122\u021e\130\u0228\001\002\000\010\055\u0217" +
    "\077\u0216\126\u0218\001\002\000\006\003\uff7d\055\uff7d\001" +
    "\002\000\006\056\u040c\066\u040b\001\002\000\004\055\010" +
    "\001\002\000\006\034\u040d\035\u040e\001\002\000\004\055" +
    "\ufffc\001\002\000\004\054\u041d\001\002\000\004\054\u040f" +
    "\001\002\000\004\124\u0410\001\002\000\014\124\u0413\130" +
    "\u0411\131\u0412\132\u0414\135\u0416\001\002\000\014\124\u0413" +
    "\130\u0411\131\u0412\132\u0414\135\u0416\001\002\000\014\124" +
    "\u0413\130\u0411\131\u0412\132\u0414\135\u0416\001\002\000\004" +
    "\067\ufff7\001\002\000\014\124\u0413\130\u0411\131\u0412\132" +
    "\u0414\135\u0416\001\002\000\004\067\u0418\001\002\000\014" +
    "\124\u0413\130\u0411\131\u0412\132\u0414\135\u0416\001\002\000" +
    "\004\067\ufffb\001\002\000\006\056\u040c\066\u040b\001\002" +
    "\000\004\055\ufffd\001\002\000\004\067\ufff8\001\002\000" +
    "\004\067\ufff9\001\002\000\004\067\ufffa\001\002\000\004" +
    "\124\u041e\001\002\000\004\130\u041f\001\002\000\004\124" +
    "\u0420\001\002\000\004\067\u0421\001\002\000\006\056\u040c" +
    "\066\u040b\001\002\000\004\055\ufffe\001\002\000\004\002" +
    "\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0421\000\004\002\005\001\001\000\002\001\001\000" +
    "\006\004\010\030\011\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\004" +
    "\012\030\011\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\024\u0212\001\001\000\002\001\001\000\006\006" +
    "\017\030\021\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\006\022\030\021\001\001\000\002\001\001\000" +
    "\004\011\072\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\043\001\001\000\004\010\066\001\001\000" +
    "\004\010\065\001\001\000\004\010\064\001\001\000\004" +
    "\010\063\001\001\000\004\010\062\001\001\000\004\010" +
    "\061\001\001\000\002\001\001\000\004\010\057\001\001" +
    "\000\004\010\056\001\001\000\004\010\055\001\001\000" +
    "\004\010\054\001\001\000\004\010\053\001\001\000\002" +
    "\001\001\000\004\010\047\001\001\000\004\010\046\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\006\052\030\021\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\006\100\030\021\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\012\117\001" +
    "\001\000\004\012\145\001\001\000\004\012\144\001\001" +
    "\000\004\012\143\001\001\000\004\012\142\001\001\000" +
    "\004\012\141\001\001\000\004\012\140\001\001\000\004" +
    "\012\137\001\001\000\004\012\136\001\001\000\004\012" +
    "\135\001\001\000\004\012\134\001\001\000\004\012\133" +
    "\001\001\000\002\001\001\000\004\012\130\001\001\000" +
    "\004\012\127\001\001\000\004\012\126\001\001\000\004" +
    "\012\125\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\011\132\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\024\152\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\007\155\030\156\001\001" +
    "\000\002\001\001\000\006\007\160\030\156\001\001\000" +
    "\002\001\001\000\006\007\157\030\156\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\023\u0207\001\001\000" +
    "\004\015\u0202\001\001\000\002\001\001\000\004\013\u01fb" +
    "\001\001\000\004\013\u01f6\001\001\000\004\027\u011a\001" +
    "\001\000\002\001\001\000\004\013\u010d\001\001\000\004" +
    "\013\343\001\001\000\004\017\256\001\001\000\004\016" +
    "\176\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\007\203\030\156\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\022\214\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\016\222\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\227\001\001\000\002\001\001\000\004\016\231\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\016\237\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\022\242" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\016" +
    "\245\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\016" +
    "\253\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\007" +
    "\261\030\156\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\021\275\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\017\300\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\017\310\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\017\316\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\017\324\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\017\332\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\017\340\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\010\344\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\007\347\030\156\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\021\357" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\013" +
    "\362\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\013" +
    "\370\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\013" +
    "\376\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\020\u0103\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\u0106\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\u010c\001\001" +
    "\000\002\001\001\000\004\010\u010e\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\007\u0111\030\156\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\026" +
    "\u014d\030\u014e\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\027\u0128\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\021\u012b\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\027\u012e\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\u0131\001\001\000\002\001" +
    "\001\000\004\027\u0133\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\027\u0139\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\027\u013f\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\020\u0142\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\027\u0145\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\027\u014b\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\026\u014f\030" +
    "\u014e\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\007\u0152\030\156\001\001\000\002\001\001\000\004\023" +
    "\u01b8\001\001\000\002\001\001\000\004\015\u0185\001\001" +
    "\000\004\013\u0180\001\001\000\004\013\u0173\001\001\000" +
    "\002\001\001\000\004\013\u016c\001\001\000\004\013\u0167" +
    "\001\001\000\004\017\u0163\001\001\000\004\016\u015d\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\026\u0162\030\u014e\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\026\u0166\030\u014e\001\001\000\002\001\001\000\004\010" +
    "\u0168\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\026\u016b\030\u014e\001\001\000\002\001\001\000\004\010" +
    "\u016d\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\026\u0170\030\u014e\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\014\u0175\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\026" +
    "\u0178\030\u014e\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\010\u017c\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\014\u017f\001\001\000\002" +
    "\001\001\000\004\010\u0181\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\026\u0184\030\u014e\001\001\000\002" +
    "\001\001\000\004\010\u01b2\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\015\u0193\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\021\u0196\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\015\u0199\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\015\u019f\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\015\u01a5\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\020\u01a8\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\015\u01ab\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\015\u01b1\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\026\u01b5\030\u014e\001\001\000\002\001\001\000" +
    "\006\026\u01b7\030\u014e\001\001\000\002\001\001\000\004" +
    "\010\u01f2\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\025\u01c6\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\023" +
    "\u01c8\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\021\u01d1" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\023" +
    "\u01d4\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\u01d7\001\001\000\002\001\001\000\004\023\u01d9\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\023\u01df\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\023\u01e5\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\020\u01e8" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\023" +
    "\u01eb\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\023" +
    "\u01f1\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\026\u01f5\030\u014e\001\001\000\002\001" +
    "\001\000\004\014\u01f7\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\007\u01fa\030\156\001\001\000\002\001" +
    "\001\000\004\010\u01fc\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\007\u01ff\030\156\001\001\000\002\001" +
    "\001\000\006\007\u0201\030\156\001\001\000\002\001\001" +
    "\000\004\010\u0203\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\007\u0206\030\156\001\001\000\002\001\001" +
    "\000\004\010\u0208\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\007\u020b\030\156\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\012\u020f\001" +
    "\001\000\002\001\001\000\004\011\u0211\001\001\000\002" +
    "\001\001\000\006\007\u0213\030\156\001\001\000\002\001" +
    "\001\000\004\031\u0218\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\032\u0223\033\u0226\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\031\u0380\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\032\u02c1\033\u0226\001\001\000\004" +
    "\075\u02a8\001\001\000\006\032\u02a6\033\u0226\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\050\u023f\001\001\000\002\001\001\000\004\050\u0231\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\060\u023c\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\060\u0238\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\050" +
    "\u023b\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\050\u023e\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\043\u0243\001\001\000\004\044\u029d\001\001\000\010" +
    "\035\u0247\045\u024c\057\u0252\001\001\000\002\001\001\000" +
    "\006\032\u0245\033\u0226\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\035\u029c\001\001\000" +
    "\004\035\u029b\001\001\000\004\035\u029a\001\001\000\004" +
    "\035\u0299\001\001\000\002\001\001\000\004\035\u0297\001" +
    "\001\000\002\001\001\000\004\035\u0267\001\001\000\004" +
    "\035\u0266\001\001\000\004\035\u0265\001\001\000\004\044" +
    "\u025f\001\001\000\004\035\u025c\001\001\000\004\035\u025b" +
    "\001\001\000\004\035\u025a\001\001\000\004\035\u0259\001" +
    "\001\000\004\035\u0258\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\044\u0264\001\001\000\010\035\u0247\045\u024c\057" +
    "\u0262\001\001\000\004\044\u0263\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\023\u0293\001\001\000\004\015\u028f" +
    "\001\001\000\002\001\001\000\004\013\u028a\001\001\000" +
    "\004\013\u0286\001\001\000\004\027\u0282\001\001\000\004" +
    "\013\u027e\001\001\000\004\013\u027a\001\001\000\004\017" +
    "\u0277\001\001\000\004\016\u0272\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\010\u027b\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\010\u027f\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\026\u0283\030\u014e\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\014\u0287\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\010\u028b\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\010\u0290\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\u0294\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\034\u02a0\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\035\u02a2\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\032\u02a5\033" +
    "\u0226\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\061\u02ab\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\076\u02b2\001\001\000\004\012\u02af" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\061\u02bf\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\061\u02bb\001\001\000\004\061\u02b9\001" +
    "\001\000\004\061\u02b7\001\001\000\002\001\001\000\004" +
    "\076\u02b8\001\001\000\002\001\001\000\004\076\u02ba\001" +
    "\001\000\002\001\001\000\004\076\u02bc\001\001\000\002" +
    "\001\001\000\004\075\u02be\001\001\000\002\001\001\000" +
    "\004\076\u02c0\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\037\u02c7\041\u02c5\067\u02c3\072\u02c6\001\001\000" +
    "\002\001\001\000\006\041\u033a\067\u02c3\001\001\000\002" +
    "\001\001\000\010\071\u0329\073\u0327\074\u032a\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\037\u02d2\041\u02c5\067\u02c3\072\u02c6\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\033\u02dc\042\u02df\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\033\u02dc\042\u02fb\001\001\000" +
    "\006\033\u02dc\042\u02fa\001\001\000\002\001\001\000\004" +
    "\036\u02e6\001\001\000\002\001\001\000\004\043\u02e2\001" +
    "\001\000\002\001\001\000\006\033\u02dc\042\u02e4\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\032\u02e7\033" +
    "\u0226\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\037\u02eb\041\u02c5\067\u02c3\072\u02c6\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\033\u02dc\042\u02f0\001\001\000" +
    "\004\036\u02f1\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\033\u02dc\042\u02f4\001\001\000\002\001\001\000" +
    "\004\034\u02f6\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\033\u02dc\042\u02f9\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\037\u02fd\041\u02c5" +
    "\067\u02c3\072\u02c6\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\033\u02dc" +
    "\042\u0302\001\001\000\004\036\u0303\001\001\000\006\033" +
    "\u02dc\042\u0304\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\037\u0308\041\u02c5\067\u02c3\072" +
    "\u02c6\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\033\u02dc\042\u030d\001" +
    "\001\000\006\033\u02dc\042\u030e\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\033\u02dc\042" +
    "\u0312\001\001\000\002\001\001\000\004\040\u0315\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\067\u0319\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\041\u031d\067" +
    "\u02c3\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\033\u02dc\042\u0322\001" +
    "\001\000\006\033\u02dc\042\u0323\001\001\000\002\001\001" +
    "\000\004\067\u0325\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\041\u02c5" +
    "\067\u02c3\072\u0335\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\037\u0331\041\u02c5\067\u02c3\072" +
    "\u02c6\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\073\u0336\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\037\u0339\041\u02c5" +
    "\067\u02c3\072\u02c6\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\070\u033f\001\001\000\006\041\u0344\067\u02c3" +
    "\001\001\000\006\041\u0343\067\u02c3\001\001\000\006\041" +
    "\u0342\067\u02c3\001\001\000\002\001\001\000\006\041\u0341" +
    "\067\u02c3\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\041\u034c\067\u02c3" +
    "\001\001\000\006\041\u034b\067\u02c3\001\001\000\006\041" +
    "\u034a\067\u02c3\001\001\000\006\041\u0349\067\u02c3\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\051\u037f\001\001\000\002\001\001" +
    "\000\004\051\u0353\001\001\000\002\001\001\000\006\061" +
    "\u035a\063\u035b\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\062\u0364\001\001\000\004\062\u035d\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\061\u0360\001\001\000\002" +
    "\001\001\000\004\062\u0361\001\001\000\002\001\001\000" +
    "\004\051\u0363\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\064\u0367\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\u0369\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\064\u036c\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\062\u0373\001\001\000" +
    "\002\001\001\000\004\064\u0375\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\064\u0378\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\064\u037b\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\051\u037e\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\046\u03a4\001\001\000\002\001\001\000\004\046\u0386\001" +
    "\001\000\002\001\001\000\004\053\u038a\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\054\u03a1\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\054" +
    "\u0396\001\001\000\004\053\u039f\001\001\000\002\001\001" +
    "\000\004\053\u039b\001\001\000\004\053\u0399\001\001\000" +
    "\004\053\u0397\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\054\u0398\001\001\000\002\001\001\000\004\054" +
    "\u039a\001\001\000\002\001\001\000\004\054\u039c\001\001" +
    "\000\002\001\001\000\004\046\u039e\001\001\000\002\001" +
    "\001\000\004\054\u03a0\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\046\u03a3\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\052\u03c2\001\001\000\002\001\001" +
    "\000\004\052\u03aa\001\001\000\002\001\001\000\004\065" +
    "\u03ae\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\066\u03b1\001\001\000" +
    "\002\001\001\000\004\065\u03b9\001\001\000\002\001\001" +
    "\000\004\065\u03b4\001\001\000\002\001\001\000\004\066" +
    "\u03b8\001\001\000\004\065\u03b6\001\001\000\004\066\u03b7" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\066" +
    "\u03bd\001\001\000\004\065\u03bb\001\001\000\004\066\u03bc" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\052" +
    "\u03bf\001\001\000\002\001\001\000\004\052\u03c1\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\040\u03c4\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\041\u03c8\067\u02c3\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\033\u02dc\042\u03cd\001\001\000\006\032\u03ce\033\u0226\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\032\u03d2\033\u0226\001\001\000\002\001\001\000" +
    "\012\037\u03d4\041\u02c5\067\u02c3\072\u02c6\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\033\u02dc\042\u03d9\001\001\000\006\032\u03da" +
    "\033\u0226\001\001\000\002\001\001\000\004\047\u03ff\001" +
    "\001\000\002\001\001\000\004\047\u03e0\001\001\000\002" +
    "\001\001\000\004\055\u03e6\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\056\u03eb\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\055\u03f8\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\055\u03f4\001" +
    "\001\000\004\055\u03f2\001\001\000\004\055\u03f0\001\001" +
    "\000\002\001\001\000\004\056\u03f1\001\001\000\002\001" +
    "\001\000\004\056\u03f3\001\001\000\002\001\001\000\004" +
    "\056\u03f5\001\001\000\002\001\001\000\004\047\u03f7\001" +
    "\001\000\002\001\001\000\004\056\u03f9\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\056\u03fc\001\001\000" +
    "\002\001\001\000\004\047\u03fe\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\032\u0406\033\u0226\001\001\000\004\031\u0407\001\001\000" +
    "\002\001\001\000\004\003\u0409\001\001\000\006\004\u0422" +
    "\030\011\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\u0414\001\001\000\004\005\u041b\001\001\000\004\005" +
    "\u041a\001\001\000\002\001\001\000\004\005\u0419\001\001" +
    "\000\002\001\001\000\004\005\u0416\001\001\000\002\001" +
    "\001\000\004\003\u0418\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\003\u0421\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    //declaracion de variables
    private int filaErr = 0, columnErr = 0;
    private String datErr = "", lexErr = "", idCaptcha = "", namehtml = "", captchaCreado = "";
    private List<String> errorSintactico;
    private List<String> errorSemantico;
    private List<String> listIdEtiqueta;
    private List<LexemeId> ListTablaSimbol;
    private EtiquetaId etiquetaId;
    private TablaSimbolo tablaSimbolo;
    private int parId = 0, parName = 0;
    int asd;

    public Parser(Lexico lex) {
        super(lex);

        this.errorSintactico = new ArrayList();
        this.errorSemantico = new ArrayList();
        this.listIdEtiqueta = new ArrayList();
        this.ListTablaSimbol = new ArrayList();
        this.etiquetaId = new EtiquetaId();
        this.tablaSimbolo = new TablaSimbolo();
        asd = lex.dat();
    }


//recuperacion de errroes
    public void report_error(String message, Object info) {
		System.out.println("reporterror");
	}
	public void report_fatal_error(String message, Object info) {
		System.out.println("reportfatal");
	}
	public void report_fatal_error(Symbol cur) {
		System.out.println("unrecovered_syntax_error");
	}
    
    @Override
    public void syntax_error(Symbol st) {
       Token token = (Token) st.value;
        if(filaErr == 0){
            filaErr = token.getLine();
            columnErr = token.getColumna();
            datErr = token.getLexema();
            lexErr = token.getLexema();
        } else {
            if(filaErr == token.getLine()){
                datErr += " " + token.getLexema();
            } else {
                System.out.println("err: " + lexErr + " este no pertenece a la estructura - linea: " + filaErr + ", columna: " + columnErr + " y verificar lexemas: " + datErr);
                errorSintactico.add(String.format("Error Sintactico lexema: %s  linea: %d  columna: %d. no se esperaba ese token.", token.getLexema(), token.getLine(), token.getColumna()));
                filaErr = token.getLine();
                columnErr = token.getColumna();
                datErr = token.getLexema();
                lexErr = token.getLexema();
            }

        }
        //report_error("Error Sintactico con el  Token:"+ token.getLexema()+" este no pertenece a la estructura - linea: "+token.getLine()+" - columna: "+token.getColumna() + "\n",null);

    // System.out.println("err: " + token.getLexema() + " este no pertenece a la estructura - linea: " + token.getLine() + ", columna: " + token.getColumna());
       // errorSintactico.add(String.format("Error Sintactico lexema: %s  linea: %d  columna: %d. no se esperaba ese token.", token.getLexema(), token.getLine(), token.getColumna()));
    }

    protected int error_sync_size() {
		return 1;
	}
    public List<String> getErrorSintactico(){
	        return errorSintactico;
	    }

    public List<LexemeId> getListTablaSimbol(){
	        return ListTablaSimbol;
    }

 

/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= exp_ini EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // exp_ini ::= MEQ HTML par_html exp_head 
            {
              Object RESULT =null;
		 captchaCreado += "<HTML  ";
                                  System.out.println("TE AMO CARMEN QUIERO VERTE OTRA VEZ");   System.out.println("VIDALIA " + captchaCreado);       
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_ini",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // exp_ini ::= error exp_head 
            {
              Object RESULT =null;
		System.out.println("error html en inicio");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_ini",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // par_html ::= CORIN IDCM IGUAL COMILLA ID COMILLA COROUT par_html 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Token i = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 idCaptcha = i.getLexema(); parId++; 
                                                        if(etiquetaId.existeId(idCaptcha, listIdEtiqueta)){ System.out.println("si existe");
                                                        } else {System.out.println("no existe"); listIdEtiqueta.add(idCaptcha);}
                                                        if(parId > 1){System.out.println("error semantico, aparece 2 veces el parametro id en la etiqueta htm");}  
                                                              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("par_html",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // par_html ::= CORIN NAME IGUAL COMILLA exp_name COROUT par_html 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Token c = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 namehtml = c.getLexema() + i.toString(); parName++; System.out.println("CVXG  " + i.toString()+ " te amo Vidalia "+asd);
                                                        if(parName > 1){System.out.println("error semantico, aparece 2 veces el parametro name en la etiqueta htm");}  
                                                              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("par_html",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // par_html ::= MAQ 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("sintactico parametros html" + a.getLexema() + " " + idCaptcha + " as " + namehtml);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("par_html",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // exp_name ::= CADENA exp_name 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema()+" " + n.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_name",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // exp_name ::= ID exp_name 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema()+" " + n.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_name",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // exp_name ::= NUMENTERO exp_name 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema()+" " + n.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_name",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // exp_name ::= NUMDECIMAL exp_name 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema()+" " + n.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_name",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // exp_name ::= COMILLA 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_name",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // exp_head ::= MEQ HEAD MAQ par_head MEQ BODY par_body exp_contenido 
            {
              Object RESULT =null;
		System.out.println("sintactico head");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_head",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // exp_head ::= exp_script exp_head 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_head",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // exp_head ::= MEQ BODY par_body exp_contenido 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_head",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // par_head ::= MEQ TITLE MAQ exp_cadenatext TITLE MAQ par_head 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("par_head",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // par_head ::= MEQ LINK par_link MEQ DIVISION LINK MAQ par_head 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("par_head",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // par_head ::= MEQ DIVISION HEAD MAQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("par_head",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // par_head ::= exp_script par_head 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("par_head",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // par_body ::= CORIN BACKGROUND IGUAL COMILLA exp_links COROUT par_link 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("par_body",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // par_body ::= MAQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("par_body",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // par_link ::= CORIN REFERENCIA IGUAL COMILLA exp_links COROUT par_link 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("par_link",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // par_link ::= MAQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("par_link",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // exp_links ::= ID exp_links 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_links",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // exp_links ::= DOSP exp_links 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_links",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // exp_links ::= DIVISION exp_links 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_links",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // exp_links ::= CADENA exp_links 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_links",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // exp_links ::= IGUAL exp_links 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_links",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // exp_links ::= NUMENTERO exp_links 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_links",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // exp_links ::= AND exp_links 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_links",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // exp_links ::= NUMDECIMAL exp_links 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_links",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // exp_links ::= SUMA exp_links 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_links",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // exp_links ::= PRODUCTO exp_links 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_links",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // exp_links ::= RESTA exp_links 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_links",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // exp_links ::= PARIN exp_links 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_links",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // exp_links ::= PAROUT exp_links 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_links",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // exp_links ::= COMA exp_links 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_links",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // exp_links ::= HEXADECIMAL exp_links 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_links",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // exp_links ::= COMILLA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_links",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // exp_contenido ::= MEQ SPAM parm_shisp exp_cadenatext SPAM MAQ exp_contenido 
            {
              Object RESULT =null;
		System.out.println("contenido html");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_contenido",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // exp_contenido ::= MEQ SELECTED parm_shisp exp_opciones SELECTED MAQ exp_contenido 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_contenido",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // exp_contenido ::= MEQ H1 parm_shisp exp_cadenatext H1 MAQ exp_contenido 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_contenido",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // exp_contenido ::= MEQ P parm_shisp exp_cadenatext P MAQ exp_contenido 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_contenido",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // exp_contenido ::= MEQ BR MAQ exp_contenido 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_contenido",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // exp_contenido ::= MEQ INPUT parm_input exp_cadenatext INPUT MAQ exp_contenido 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_contenido",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // exp_contenido ::= MEQ IMG parm_image MEQ DIVISION IMG MAQ exp_contenido 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_contenido",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // exp_contenido ::= MEQ TEXTAREA par_areatext TEXTAREA MAQ exp_contenido 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_contenido",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // exp_contenido ::= MEQ DIV par_div contenido_div DIV MAQ exp_contenido 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_contenido",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // exp_contenido ::= MEQ BUTTON par_button exp_cadenatext BUTTON MAQ exp_contenido 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_contenido",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // exp_contenido ::= exp_script exp_contenido 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_contenido",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // exp_contenido ::= MEQ DIVISION BODY MAQ MEQ DIVISION HTML MAQ 
            {
              Object RESULT =null;
		 captchaCreado += "</body> \n</html>"; System.out.println("err: " + lexErr + " este no pertenece a la estructura - linea: " + filaErr + ", columna: " + columnErr + " y verificar lexemas: " + datErr);
                //errorSintactico.add(String.format("Error Sintactico lexema: %s  linea: %d  columna: %d. no se esperaba ese token.", token.getLexema(), token.getLine(), token.getColumna()));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_contenido",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // exp_contenido ::= MEQ DIVISION HTML MAQ 
            {
              Object RESULT =null;
		 captchaCreado += "</html>"; System.out.println("err: " + lexErr + " este no pertenece a la estructura - linea: " + filaErr + ", columna: " + columnErr + " y verificar lexemas: " + datErr);
                //errorSintactico.add(String.format("Error Sintactico lexema: %s  linea: %d  columna: %d. no se esperaba ese token.", token.getLexema(), token.getLine(), token.getColumna()));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_contenido",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // exp_contenido ::= error exp_contenido 
            {
              Object RESULT =null;
		System.out.println("error html");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_contenido",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // contenido_div ::= MEQ SPAM parm_shisp exp_cadenatext SPAM MAQ contenido_div 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_div",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // contenido_div ::= MEQ SELECTED parm_shisp exp_opciones SELECTED MAQ contenido_div 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_div",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // contenido_div ::= MEQ H1 parm_shisp exp_cadenatext H1 MAQ contenido_div 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_div",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // contenido_div ::= MEQ P parm_shisp exp_cadenatext P MAQ contenido_div 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_div",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // contenido_div ::= MEQ BR MAQ contenido_div 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_div",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // contenido_div ::= MEQ INPUT parm_input exp_cadenatext INPUT MAQ contenido_div 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_div",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // contenido_div ::= MEQ IMG parm_image MEQ DIVISION IMG MAQ contenido_div 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_div",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // contenido_div ::= MEQ TEXTAREA par_areatext TEXTAREA MAQ contenido_div 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_div",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // contenido_div ::= MEQ BUTTON par_button exp_cadenatext BUTTON MAQ contenido_div 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_div",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // contenido_div ::= exp_script contenido_div 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_div",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // contenido_div ::= MEQ DIVISION DIV MAQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_div",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // par_div ::= CORIN IDCM IGUAL COMILLA ID COMILLA COROUT par_div 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("par_div",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // par_div ::= CORIN ALINGN IGUAL COMILLA ID COMILLA COROUT par_div 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("par_div",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // par_div ::= CORIN COLOR IGUAL COMILLA par_color COMILLA COROUT par_div 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("par_div",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // par_div ::= CORIN FONTFY IGUAL COMILLA ID COMILLA COROUT par_div 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("par_div",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // par_div ::= CORIN FONTSZ IGUAL COMILLA par_fontsize COMILLA COROUT par_div 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("par_div",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // par_div ::= CORIN BACKGROUND IGUAL COMILLA exp_links COROUT par_div 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("par_div",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // par_div ::= CORIN CLASE IGUAL COMILLA ID COROUT par_div 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("par_div",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // par_div ::= MAQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("par_div",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // par_button ::= CORIN IDCM IGUAL COMILLA ID COMILLA COROUT par_button 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("par_button",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // par_button ::= CORIN ALINGN IGUAL COMILLA ID COMILLA COROUT par_button 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("par_button",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // par_button ::= CORIN COLOR IGUAL COMILLA par_color COMILLA COROUT par_button 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("par_button",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // par_button ::= CORIN FONTFY IGUAL COMILLA ID COMILLA COROUT par_button 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("par_button",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // par_button ::= CORIN FONTSZ IGUAL COMILLA par_fontsize COMILLA COROUT par_button 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("par_button",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // par_button ::= CORIN BACKGROUND IGUAL COMILLA exp_links COROUT par_button 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("par_button",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // par_button ::= CORIN ONCLICK IGUAL COMILLA exp_proceso COROUT par_button 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("par_button",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // par_button ::= MAQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("par_button",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // par_areatext ::= CORIN IDCM IGUAL COMILLA ID COMILLA COROUT par_areatext 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("par_areatext",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // par_areatext ::= CORIN COLUMNA IGUAL COMILLA NUMENTERO COMILLA COROUT par_areatext 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("par_areatext",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // par_areatext ::= CORIN FILA IGUAL COMILLA NUMENTERO COMILLA COROUT par_areatext 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("par_areatext",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // par_areatext ::= CORIN ALINGN IGUAL COMILLA ID COMILLA COROUT par_areatext 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("par_areatext",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // par_areatext ::= CORIN FONTFY IGUAL COMILLA ID COMILLA COROUT par_areatext 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("par_areatext",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // par_areatext ::= CORIN FONTSZ IGUAL COMILLA par_fontsize COMILLA COROUT par_areatext 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("par_areatext",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // par_areatext ::= MAQ DIVISION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("par_areatext",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // parm_shisp ::= CORIN IDCM IGUAL COMILLA ID COMILLA COROUT parm_shisp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parm_shisp",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // parm_shisp ::= CORIN COLOR IGUAL COMILLA par_color COMILLA COROUT parm_shisp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parm_shisp",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // parm_shisp ::= CORIN ALINGN IGUAL COMILLA ID COMILLA COROUT parm_shisp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parm_shisp",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // parm_shisp ::= CORIN FONTFY IGUAL COMILLA ID COMILLA COROUT parm_shisp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parm_shisp",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // parm_shisp ::= CORIN FONTSZ IGUAL COMILLA par_fontsize COMILLA COROUT parm_shisp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parm_shisp",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // parm_shisp ::= MAQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parm_shisp",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // parm_input ::= CORIN IDCM IGUAL COMILLA ID COMILLA COROUT parm_input 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parm_input",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // parm_input ::= CORIN TYPE IGUAL COMILLA ID COMILLA COROUT parm_input 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parm_input",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // parm_input ::= CORIN COLOR IGUAL COMILLA par_color COMILLA COROUT parm_input 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parm_input",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // parm_input ::= CORIN ALINGN IGUAL COMILLA ID COMILLA COROUT parm_input 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parm_input",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // parm_input ::= CORIN FONTFY IGUAL COMILLA ID COMILLA COROUT parm_input 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parm_input",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // parm_input ::= CORIN FONTSZ IGUAL COMILLA par_fontsize COMILLA COROUT parm_input 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parm_input",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // parm_input ::= MAQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parm_input",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // parm_image ::= CORIN IDCM IGUAL COMILLA ID COMILLA COROUT parm_image 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parm_image",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // parm_image ::= CORIN SRC IGUAL COMILLA exp_links COROUT parm_image 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parm_image",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // parm_image ::= CORIN ALT IGUAL COMILLA ID COMILLA COROUT parm_image 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parm_image",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // parm_image ::= CORIN WIDTH IGUAL COMILLA par_heigtwith COMILLA COROUT parm_image 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parm_image",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // parm_image ::= CORIN HEIGHT IGUAL COMILLA par_heigtwith COMILLA COROUT parm_image 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parm_image",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // parm_image ::= MAQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parm_image",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // exp_proceso ::= PROCESOS PARIN PAROUT COMILLA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_proceso",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // exp_proceso ::= LOAD PARIN PAROUT COMILLA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_proceso",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // exp_cadenatext ::= CADENA exp_cadenatext 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_cadenatext",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // exp_cadenatext ::= ID exp_cadenatext 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_cadenatext",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // exp_cadenatext ::= NUMENTERO exp_cadenatext 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_cadenatext",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // exp_cadenatext ::= NUMDECIMAL exp_cadenatext 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_cadenatext",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // exp_cadenatext ::= SUMA exp_cadenatext 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_cadenatext",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // exp_cadenatext ::= RESTA exp_cadenatext 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_cadenatext",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // exp_cadenatext ::= PRODUCTO exp_cadenatext 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_cadenatext",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // exp_cadenatext ::= DIVISION exp_cadenatext 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_cadenatext",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // exp_cadenatext ::= DOSP exp_cadenatext 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_cadenatext",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // exp_cadenatext ::= COMA exp_cadenatext 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_cadenatext",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // exp_cadenatext ::= IGUAL exp_cadenatext 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_cadenatext",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // exp_cadenatext ::= PARIN exp_cadenatext 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_cadenatext",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // exp_cadenatext ::= PAROUT exp_cadenatext 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_cadenatext",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // exp_cadenatext ::= MEQ DIVISION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_cadenatext",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // exp_opciones ::= MEQ OPTION MAQ exp_cadenatext OPTION MAQ exp_opciones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_opciones",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // exp_opciones ::= MEQ DIVISION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_opciones",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // par_color ::= ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("par_color",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // par_color ::= HEXADECIMAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("par_color",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // par_fontsize ::= NUMENTERO ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("par_fontsize",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // par_fontsize ::= NUMDECIMAL ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("par_fontsize",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // par_heigtwith ::= NUMENTERO ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("par_heigtwith",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // par_heigtwith ::= NUMDECIMAL ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("par_heigtwith",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // par_heigtwith ::= NUMENTERO CADENA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("par_heigtwith",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // par_heigtwith ::= NUMDECIMAL CADENA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("par_heigtwith",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // exp_script ::= MEQ SCRIPT MAQ exp_funciones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_script",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // exp_funciones ::= LOAD PARIN PAROUT CORIN instrucciones exp_funciones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_funciones",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // exp_funciones ::= PROCESOS PARIN PAROUT CORIN instrucciones exp_funciones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_funciones",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // exp_funciones ::= MEQ DIVISION SCRIPT MAQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_funciones",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // instrucciones ::= exp_variables instrucciones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // instrucciones ::= ALERTF PARIN texto PAROUT PUNTOCOMA instrucciones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // instrucciones ::= EXIT PARIN PAROUT PUNTOCOMA instrucciones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // instrucciones ::= IF PARIN condiciones THEN INIT LLAVEIN DOSP instrucciones_intro instrucciones_if instrucciones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // instrucciones ::= REPEAT PARIN condiciones_repeat PAROUT HUNTIL PARIN limit_repeat PAROUT INIT LLAVEIN DOSP instrucciones_intro instrucciones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // instrucciones ::= WHILE PARIN condiciones THENWHILE INIT LLAVEIN DOSP instrucciones_intro instrucciones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // instrucciones ::= INSERT PARIN par_insert PUNTOCOMA instrucciones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // instrucciones ::= COROUT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // instrucciones ::= error instrucciones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // instrucciones_intro ::= exp_variables instrucciones_intro 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones_intro",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // instrucciones_intro ::= ALERTF PARIN texto PAROUT PUNTOCOMA instrucciones_intro 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones_intro",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // instrucciones_intro ::= EXIT PARIN PAROUT PUNTOCOMA instrucciones_intro 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones_intro",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // instrucciones_intro ::= IF PARIN condiciones THEN INIT LLAVEIN DOSP instrucciones_intro instrucciones_if instrucciones_intro 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones_intro",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // instrucciones_intro ::= REPEAT PARIN condiciones_repeat PAROUT HUNTIL PARIN limit_repeat PAROUT INIT LLAVEIN DOSP instrucciones_intro instrucciones_intro 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones_intro",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // instrucciones_intro ::= WHILE PARIN condiciones THENWHILE INIT LLAVEIN DOSP instrucciones_intro instrucciones_intro 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones_intro",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // instrucciones_intro ::= INSERT PARIN par_insert PUNTOCOMA instrucciones_intro 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones_intro",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // instrucciones_intro ::= DOSP LLAVEOUT END 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones_intro",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // instrucciones_intro ::= error instrucciones_intro 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones_intro",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // condiciones ::= NOT condiciones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condiciones",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // condiciones ::= exp_condicion exp_conds 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condiciones",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // exp_conds ::= signo_condicion exp_condicion oper_cond 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_conds",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // exp_conds ::= oper_cond 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_conds",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // exp_condicion ::= BOOLEANOS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_condicion",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // exp_condicion ::= limit_repeat 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_condicion",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // exp_condicion ::= COMILLA ID COMILLA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_condicion",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // exp_condicion ::= COMILLA CADENA COMILLA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_condicion",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // oper_cond ::= AND AND condiciones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("oper_cond",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // oper_cond ::= OR OR condiciones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("oper_cond",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // oper_cond ::= PAROUT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("oper_cond",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // signo_condicion ::= IGUAL IGUAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("signo_condicion",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // signo_condicion ::= NOT IGUAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("signo_condicion",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // signo_condicion ::= MEQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("signo_condicion",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // signo_condicion ::= MEQ IGUAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("signo_condicion",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // signo_condicion ::= MAQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("signo_condicion",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // signo_condicion ::= MAQ IGUAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("signo_condicion",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // instrucciones_if ::= ELSE IF PARIN condiciones THEN INIT LLAVEIN DOSP instrucciones_intro instrucciones_if 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones_if",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // instrucciones_if ::= ELSE INIT LLAVEIN DOSP instrucciones_intro 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones_if",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // instrucciones_if ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones_if",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // limit_repeat ::= numeros SUMA limit_repeat 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("limit_repeat",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // limit_repeat ::= numeros RESTA limit_repeat 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("limit_repeat",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // limit_repeat ::= numeros PRODUCTO limit_repeat 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("limit_repeat",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // limit_repeat ::= numeros DIVISION limit_repeat 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("limit_repeat",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // limit_repeat ::= PARIN limit_repeat PAROUT expr_numerica 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("limit_repeat",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // limit_repeat ::= numeros 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("limit_repeat",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // expr_numerica ::= SUMA limit_repeat 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_numerica",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // expr_numerica ::= RESTA limit_repeat 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_numerica",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // expr_numerica ::= PRODUCTO limit_repeat 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_numerica",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // expr_numerica ::= DIVISION limit_repeat 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_numerica",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // expr_numerica ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_numerica",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // condiciones_repeat ::= ID IGUAL numeros 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condiciones_repeat",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // condiciones_repeat ::= ENTERO ID IGUAL numeros 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condiciones_repeat",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // numeros ::= NUMENTERO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numeros",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // numeros ::= NUMDECIMAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numeros",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // numeros ::= ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numeros",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // exp_variables ::= ENTERO ID exp_entero 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_variables",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // exp_variables ::= DECIMAL ID exp_decimal 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_variables",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // exp_variables ::= CHAR ID exp_char 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_variables",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // exp_variables ::= STRING ID exp_string 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_variables",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // exp_variables ::= BOOLEANO ID exp_boolean 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_variables",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // exp_variables ::= ENTERO GLOBAL ID exp_entero 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_variables",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // exp_variables ::= DECIMAL GLOBAL ID exp_decimal 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_variables",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // exp_variables ::= CHAR GLOBAL ID exp_char 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_variables",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // exp_variables ::= STRING GLOBAL ID exp_string 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_variables",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // exp_variables ::= BOOLEANO GLOBAL ID exp_boolean 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_variables",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // exp_variables ::= ID exp_dir 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_variables",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // exp_dir ::= IGUAL dato_string exp_oper_id 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_dir",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // exp_oper_id ::= SUMA dato_string exp_oper_id 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_oper_id",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // exp_oper_id ::= RESTA dato_string exp_oper_id 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_oper_id",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // exp_oper_id ::= DIVISION dato_string exp_oper_id 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_oper_id",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // exp_oper_id ::= PRODUCTO dato_string exp_oper_id 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_oper_id",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // exp_oper_id ::= COMA ID exp_dir 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_oper_id",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // exp_oper_id ::= PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_oper_id",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // exp_boolean ::= IGUAL dat_boolean exp_oper_bool 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_boolean",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // exp_boolean ::= COMA ID exp_boolean 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_boolean",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // exp_boolean ::= PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_boolean",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // dat_boolean ::= BOOLEANOS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dat_boolean",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // dat_boolean ::= ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dat_boolean",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // exp_oper_bool ::= OR dat_boolean exp_oper_bool 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_oper_bool",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // exp_oper_bool ::= OR OR dat_boolean exp_oper_bool 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_oper_bool",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // exp_oper_bool ::= AND dat_boolean exp_oper_bool 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_oper_bool",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // exp_oper_bool ::= AND AND dat_boolean exp_oper_bool 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_oper_bool",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // exp_oper_bool ::= COMA ID exp_boolean 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_oper_bool",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // exp_oper_bool ::= PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_oper_bool",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // exp_string ::= IGUAL dato_string exp_oper_string 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_string",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // exp_string ::= COMA ID exp_string 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_string",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // exp_string ::= IGUAL GETID PARIN APOSTROFO ID APOSTROFO PAROUT exp_oper_string 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_string",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // exp_string ::= IGUAL exp_funciones_especial exp_oper_string 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_string",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // exp_string ::= PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_string",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // exp_funciones_especial ::= ASCF PARIN par_function_esp PAROUT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_funciones_especial",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // exp_funciones_especial ::= DESCF PARIN par_function_esp PAROUT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_funciones_especial",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // exp_funciones_especial ::= LETPF PARIN par_function_esp PAROUT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_funciones_especial",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // exp_funciones_especial ::= LETIMF PARIN par_function_esp PAROUT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_funciones_especial",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // exp_funciones_especial ::= REVERSEF PARIN par_function_esp PAROUT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_funciones_especial",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // par_function_esp ::= ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("par_function_esp",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // par_function_esp ::= COMILLA exp_links 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("par_function_esp",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // exp_oper_string ::= SUMA dato_string exp_oper_string 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_oper_string",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // exp_oper_string ::= COMA ID exp_string 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_oper_string",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // exp_oper_string ::= PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_oper_string",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // dato_string ::= NUMENTERO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dato_string",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // dato_string ::= CARACTER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dato_string",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // dato_string ::= NUMDECIMAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dato_string",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // dato_string ::= COMILLA exp_links 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dato_string",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // dato_string ::= ID 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  if(tablaSimbolo.existeId(tp.getLexema(), ListTablaSimbol)) { System.out.println("si existe id");
                              } else {
                                  errorSemantico.add(String.format("Error semantico con id: %s  linea: %d  columna: %d. no existe este id.", tp.getLexema(), tp.getLine(), tp.getColumna()));
                              }  RESULT = tp.getLexema(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dato_string",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // exp_char ::= IGUAL CARACTER dat_char 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_char",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // exp_char ::= COMA ID exp_char 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_char",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // exp_char ::= IGUAL CARALEF PARIN PAROUT dat_char 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_char",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // exp_char ::= PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_char",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // dat_char ::= COMA ID exp_char 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dat_char",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // dat_char ::= PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dat_char",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // exp_entero ::= IGUAL dato_entero exp_opeinteger 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_entero",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // exp_entero ::= COMA ID exp_entero 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_entero",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // exp_entero ::= IGUAL NUMALEF PARIN PAROUT exp_opeinteger 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_entero",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // exp_entero ::= PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_entero",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // exp_opeinteger ::= SUMA dato_entero exp_opeinteger 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_opeinteger",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // exp_opeinteger ::= RESTA dato_entero exp_opeinteger 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_opeinteger",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // exp_opeinteger ::= DIVISION dato_entero exp_opeinteger 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_opeinteger",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // exp_opeinteger ::= PRODUCTO dato_entero exp_opeinteger 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_opeinteger",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // exp_opeinteger ::= COMA ID exp_entero 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_opeinteger",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // exp_opeinteger ::= PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_opeinteger",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // dato_entero ::= NUMENTERO 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dato_entero",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // dato_entero ::= BOOLEANOS 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  if(tp.getLexema().equals("true")) { RESULT = "1";
                                       } else if(tp.getLexema().equals("false")) { RESULT = "0"; } else {
                                         errorSemantico.add(String.format("Error semantico con id: %s  linea: %d  columna: %d. no existe este id.", tp.getLexema(), tp.getLine(), tp.getColumna()));
                                         RESULT = tp.getLexema();
                                        }  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dato_entero",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // dato_entero ::= CARACTER 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 char as = tp.getLexema().charAt(1);int asciiValue = as;  RESULT = asciiValue; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dato_entero",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // dato_entero ::= ID 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  if(tablaSimbolo.existeId(tp.getLexema(), ListTablaSimbol)) { System.out.println("si existe id");
                              } else {
                                  errorSemantico.add(String.format("Error semantico con id: %s  linea: %d  columna: %d. no existe este id.", tp.getLexema(), tp.getLine(), tp.getColumna()));
                              }  RESULT = tp.getLexema(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dato_entero",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // exp_decimal ::= IGUAL dato_decimal exp_oper_decimal 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_decimal",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // exp_decimal ::= COMA ID exp_decimal 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_decimal",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // exp_decimal ::= IGUAL NUMALEF PARIN PAROUT exp_oper_decimal 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_decimal",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // exp_decimal ::= PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_decimal",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // exp_oper_decimal ::= SUMA dato_decimal exp_oper_decimal 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_oper_decimal",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // exp_oper_decimal ::= RESTA dato_decimal exp_oper_decimal 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_oper_decimal",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // exp_oper_decimal ::= DIVISION dato_decimal exp_oper_decimal 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_oper_decimal",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // exp_oper_decimal ::= PRODUCTO dato_decimal exp_oper_decimal 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_oper_decimal",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // exp_oper_decimal ::= COMA ID exp_decimal 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_oper_decimal",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // exp_oper_decimal ::= PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_oper_decimal",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // dato_decimal ::= NUMENTERO 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dato_decimal",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // dato_decimal ::= NUMDECIMAL 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dato_decimal",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // dato_decimal ::= BOOLEANOS 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  if(tp.getLexema().equals("true")) { RESULT = 1;
                                       } else if(tp.getLexema().equals("false")) { RESULT = 0; } else {
                                         errorSemantico.add(String.format("Error semantico con id: %s  linea: %d  columna: %d. no existe este id.", tp.getLexema(), tp.getLine(), tp.getColumna()));
                                         RESULT = tp.getLexema();
                                        }  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dato_decimal",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // dato_decimal ::= CARACTER 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 char as = tp.getLexema().charAt(1);int asciiValue = as;  RESULT = asciiValue; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dato_decimal",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // dato_decimal ::= ID 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  if(tablaSimbolo.existeId(tp.getLexema(), ListTablaSimbol)) { System.out.println("si existe id");
                              } else {
                                  errorSemantico.add(String.format("Error semantico con id: %s  linea: %d  columna: %d. no existe este id.", tp.getLexema(), tp.getLine(), tp.getColumna()));
                              }  RESULT = tp.getLexema(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dato_decimal",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // par_insert ::= ID par_insert1 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  if(tablaSimbolo.existeId(tp.getLexema(), ListTablaSimbol)) { System.out.println("si existe id");
                              } else {
                                  errorSemantico.add(String.format("Error semantico con id: %s  linea: %d  columna: %d. no existe este id.", tp.getLexema(), tp.getLine(), tp.getColumna()));
                              }  RESULT =  tp.getLexema() + n.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("par_insert",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // par_insert ::= APOSTROFO texto_insert par_insert1 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = " + " +  tp.getLexema()+" " + e.toString() + n.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("par_insert",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // par_insert1 ::= COMA ID par_insert1 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  if(tablaSimbolo.existeId(tp.getLexema(), ListTablaSimbol)) { System.out.println("si existe id");
                              } else {
                                  errorSemantico.add(String.format("Error semantico con id: %s  linea: %d  columna: %d. no existe este id.", tp.getLexema(), tp.getLine(), tp.getColumna()));
                              } RESULT = " + " + tp.getLexema() + n.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("par_insert1",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // par_insert1 ::= COMA APOSTROFO texto_insert par_insert1 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = " + " +  tp.getLexema()+" " + e.toString() + n.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("par_insert1",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // par_insert1 ::= PAROUT 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("par_insert1",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // texto_insert ::= mensaje_texto 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT =  n.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("texto_insert",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // texto_insert ::= texto_etiqueta APOSTROFO 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.toString() + n.getLexema(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("texto_insert",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // texto_etiqueta ::= MEQ SPAM parm_shisp exp_cadenatext SPAM MAQ 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT = "<spam " + p.toString()+"> " + n.toString() + "</spam>"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("texto_etiqueta",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // texto_etiqueta ::= MEQ SELECTED parm_shisp exp_opciones SELECTED MAQ 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT = "<select " + p.toString()+"> " + n.toString() + "</select>"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("texto_etiqueta",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // texto_etiqueta ::= MEQ H1 parm_shisp exp_cadenatext H1 MAQ 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT = "<h1 " + p.toString()+"> " + n.toString() + "</h1>"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("texto_etiqueta",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // texto_etiqueta ::= MEQ P parm_shisp exp_cadenatext P MAQ 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT = "<p " + p.toString()+"> " + n.toString() + "</p>"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("texto_etiqueta",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // texto_etiqueta ::= MEQ BR MAQ 
            {
              Object RESULT =null;
		RESULT = "<br>"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("texto_etiqueta",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // texto_etiqueta ::= MEQ INPUT parm_input exp_cadenatext INPUT MAQ 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT = "<input " + p.toString()+"> " + n.toString() + "</input>"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("texto_etiqueta",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // texto_etiqueta ::= MEQ IMG parm_image MEQ DIVISION IMG MAQ 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		RESULT = "<img " + p.toString()+"> " + "</img>"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("texto_etiqueta",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // texto_etiqueta ::= MEQ TEXTAREA par_areatext TEXTAREA MAQ 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT = "<textarea " + p.toString()+"> " + "</textarea>"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("texto_etiqueta",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // texto_etiqueta ::= MEQ DIV par_div contenido_div DIV MAQ 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT = "<div " + p.toString()+"> " + n.toString() + "</div>"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("texto_etiqueta",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // texto_etiqueta ::= MEQ BUTTON par_button exp_cadenatext BUTTON MAQ 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT = "<button " + p.toString()+"> " + n.toString() + "</button>"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("texto_etiqueta",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // texto ::= ID 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  if(tablaSimbolo.existeId(tp.getLexema(), ListTablaSimbol)) { System.out.println("si existe id");
                              } else {
                                  errorSemantico.add(String.format("Error semantico con id: %s  linea: %d  columna: %d. no existe este id.", tp.getLexema(), tp.getLine(), tp.getColumna()));
                              }RESULT = tp.getLexema(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("texto",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // texto ::= APOSTROFO mensaje_texto 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema()+" " + n.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("texto",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // mensaje_texto ::= CADENA mensaje_texto 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema()+" " + n.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mensaje_texto",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // mensaje_texto ::= ID mensaje_texto 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema()+" " + n.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mensaje_texto",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // mensaje_texto ::= NUMENTERO mensaje_texto 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema()+" " + n.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mensaje_texto",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // mensaje_texto ::= NUMDECIMAL mensaje_texto 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema()+" " + n.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mensaje_texto",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // mensaje_texto ::= SUMA mensaje_texto 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema()+" " + n.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mensaje_texto",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // mensaje_texto ::= RESTA mensaje_texto 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema()+" " + n.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mensaje_texto",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // mensaje_texto ::= PRODUCTO mensaje_texto 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema()+" " + n.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mensaje_texto",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // mensaje_texto ::= DIVISION mensaje_texto 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema()+" " + n.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mensaje_texto",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */
  /** Method 1 with the actual generated action code for actions 300 to 600. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000001(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // mensaje_texto ::= DOSP mensaje_texto 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema()+" " + n.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mensaje_texto",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // mensaje_texto ::= COMA mensaje_texto 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema()+" " + n.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mensaje_texto",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // mensaje_texto ::= IGUAL mensaje_texto 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema()+" " + n.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mensaje_texto",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // mensaje_texto ::= PARIN mensaje_texto 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema()+" " + n.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mensaje_texto",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 304: // mensaje_texto ::= PAROUT mensaje_texto 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema()+" " + n.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mensaje_texto",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 305: // mensaje_texto ::= APOSTROFO 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mensaje_texto",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* select the action handler based on the action number */
      switch (CUP$Parser$act_num/300)
        {
          /*. . . . . . . . 0 < #action < 300. . . . . . . . . . . .*/
          case 0: 
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
          /*. . . . . . . . 300 < #action < 600. . . . . . . . . . . .*/
          case 1: 
              return CUP$Parser$do_action_part00000001(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
          /* . . . no valid action number: . . .*/
          default:
            throw new Exception("Invalid action number found in internal parse table");

        }      /* end of switch */
    }
}

}
