
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.adolfo.analizadores;

import java_cup.runtime.*;
import java.util.List;
import java.util.ArrayList;
import com.adolfo.analizadores.Token;
import com.adolfo.analizadores.datos.LexemeId;
import com.adolfo.analizadores.datos.EtiquetaId;
import com.adolfo.analizadores.datos.TablaSimbolo;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u0154\000\002\002\004\000\002\002\006\000\002\002" +
    "\004\000\002\003\012\000\002\003\011\000\002\003\003" +
    "\000\002\005\004\000\002\005\004\000\002\005\004\000" +
    "\002\005\004\000\002\005\003\000\002\004\012\000\002" +
    "\004\004\000\002\004\006\000\002\004\004\000\002\006" +
    "\011\000\002\006\012\000\002\006\006\000\002\006\004" +
    "\000\002\024\012\000\002\024\003\000\002\011\011\000" +
    "\002\011\003\000\002\012\004\000\002\012\004\000\002" +
    "\012\004\000\002\012\004\000\002\012\004\000\002\012" +
    "\004\000\002\012\004\000\002\012\004\000\002\012\004" +
    "\000\002\012\004\000\002\012\004\000\002\012\004\000" +
    "\002\012\004\000\002\012\004\000\002\012\004\000\002" +
    "\012\003\000\002\007\011\000\002\007\011\000\002\007" +
    "\011\000\002\007\011\000\002\007\006\000\002\007\011" +
    "\000\002\007\012\000\002\007\012\000\002\007\011\000" +
    "\002\007\011\000\002\007\004\000\002\007\012\000\002" +
    "\007\006\000\002\007\004\000\002\025\011\000\002\025" +
    "\011\000\002\025\011\000\002\025\011\000\002\025\006" +
    "\000\002\025\011\000\002\025\012\000\002\025\012\000" +
    "\002\025\011\000\002\025\004\000\002\025\011\000\002" +
    "\025\004\000\002\026\012\000\002\026\012\000\002\026" +
    "\012\000\002\026\012\000\002\026\012\000\002\026\012" +
    "\000\002\026\012\000\002\026\003\000\002\023\012\000" +
    "\002\023\012\000\002\023\012\000\002\023\012\000\002" +
    "\023\012\000\002\023\012\000\002\023\014\000\002\023" +
    "\003\000\002\017\012\000\002\017\012\000\002\017\012" +
    "\000\002\017\012\000\002\017\012\000\002\017\012\000" +
    "\002\017\003\000\002\013\012\000\002\013\012\000\002" +
    "\013\012\000\002\013\012\000\002\013\012\000\002\013" +
    "\003\000\002\015\012\000\002\015\012\000\002\015\012" +
    "\000\002\015\012\000\002\015\012\000\002\015\012\000" +
    "\002\015\003\000\002\016\012\000\002\016\011\000\002" +
    "\016\011\000\002\016\012\000\002\016\012\000\002\016" +
    "\003\000\002\010\004\000\002\010\004\000\002\010\004" +
    "\000\002\010\004\000\002\010\004\000\002\010\004\000" +
    "\002\010\004\000\002\010\004\000\002\010\004\000\002" +
    "\010\004\000\002\010\004\000\002\010\004\000\002\010" +
    "\004\000\002\010\004\000\002\010\004\000\002\010\004" +
    "\000\002\010\004\000\002\010\004\000\002\014\011\000" +
    "\002\014\004\000\002\020\003\000\002\020\003\000\002" +
    "\021\004\000\002\021\004\000\002\022\004\000\002\022" +
    "\004\000\002\022\004\000\002\022\004\000\002\027\006" +
    "\000\002\030\010\000\002\030\010\000\002\030\006\000" +
    "\002\031\004\000\002\031\010\000\002\031\007\000\002" +
    "\031\014\000\002\031\017\000\002\031\013\000\002\031" +
    "\007\000\002\031\007\000\002\031\003\000\002\031\004" +
    "\000\002\041\004\000\002\041\010\000\002\041\007\000" +
    "\002\041\014\000\002\041\017\000\002\041\013\000\002" +
    "\041\007\000\002\041\007\000\002\041\005\000\002\036" +
    "\004\000\002\036\004\000\002\073\005\000\002\073\003" +
    "\000\002\071\005\000\002\071\005\000\002\071\005\000" +
    "\002\071\005\000\002\071\005\000\002\071\003\000\002" +
    "\071\004\000\002\071\003\000\002\072\005\000\002\072" +
    "\005\000\002\072\003\000\002\070\004\000\002\070\004" +
    "\000\002\070\003\000\002\070\004\000\002\070\003\000" +
    "\002\070\004\000\002\035\014\000\002\035\007\000\002" +
    "\035\002\000\002\040\005\000\002\040\005\000\002\040" +
    "\005\000\002\040\005\000\002\040\006\000\002\040\003" +
    "\000\002\067\004\000\002\067\004\000\002\067\004\000" +
    "\002\067\004\000\002\067\002\000\002\037\005\000\002" +
    "\037\006\000\002\066\003\000\002\066\003\000\002\066" +
    "\003\000\002\032\005\000\002\032\005\000\002\032\005" +
    "\000\002\032\005\000\002\032\005\000\002\032\006\000" +
    "\002\032\006\000\002\032\006\000\002\032\006\000\002" +
    "\032\006\000\002\032\004\000\002\074\005\000\002\074" +
    "\005\000\002\075\005\000\002\075\005\000\002\075\005" +
    "\000\002\075\005\000\002\075\003\000\002\051\005\000" +
    "\002\051\005\000\002\051\003\000\002\065\005\000\002" +
    "\065\006\000\002\065\005\000\002\065\006\000\002\065" +
    "\005\000\002\065\003\000\002\050\005\000\002\050\005" +
    "\000\002\050\012\000\002\050\005\000\002\050\003\000" +
    "\002\062\006\000\002\062\006\000\002\062\006\000\002" +
    "\062\006\000\002\062\006\000\002\063\003\000\002\063" +
    "\004\000\002\061\005\000\002\061\005\000\002\061\003" +
    "\000\002\060\003\000\002\060\003\000\002\060\003\000" +
    "\002\060\004\000\002\060\003\000\002\047\005\000\002" +
    "\047\005\000\002\047\007\000\002\047\003\000\002\057" +
    "\005\000\002\057\003\000\002\045\005\000\002\045\005" +
    "\000\002\045\007\000\002\045\003\000\002\053\005\000" +
    "\002\053\005\000\002\053\005\000\002\053\005\000\002" +
    "\053\005\000\002\053\003\000\002\052\003\000\002\052" +
    "\003\000\002\052\003\000\002\052\005\000\002\052\003" +
    "\000\002\046\005\000\002\046\005\000\002\046\003\000" +
    "\002\055\005\000\002\055\005\000\002\055\005\000\002" +
    "\055\005\000\002\055\005\000\002\055\003\000\002\054" +
    "\003\000\002\054\003\000\002\054\003\000\002\054\003" +
    "\000\002\054\005\000\002\054\003\000\002\042\004\000" +
    "\002\042\005\000\002\042\004\000\002\043\005\000\002" +
    "\043\006\000\002\043\005\000\002\043\003\000\002\056" +
    "\003\000\002\056\004\000\002\044\005\000\002\044\005" +
    "\000\002\044\005\000\002\044\005\000\002\044\005\000" +
    "\002\044\005\000\002\044\005\000\002\044\005\000\002" +
    "\044\005\000\002\044\005\000\002\044\006\000\002\077" +
    "\003\000\002\077\003\000\002\077\003\000\002\077\003" +
    "\000\002\077\003\000\002\077\003\000\002\077\003\000" +
    "\002\077\003\000\002\077\003\000\002\033\003\000\002" +
    "\033\004\000\002\034\004\000\002\034\004\000\002\034" +
    "\004\000\002\034\004\000\002\034\004\000\002\034\004" +
    "\000\002\034\004\000\002\034\004\000\002\034\004\000" +
    "\002\034\004\000\002\034\004\000\002\034\004\000\002" +
    "\034\004\000\002\034\003\000\002\076\004\000\002\076" +
    "\004\000\002\076\004\000\002\076\004\000\002\076\004" +
    "\000\002\076\004\000\002\076\004\000\002\076\004\000" +
    "\002\076\004\000\002\076\004\000\002\076\004\000\002" +
    "\076\004\000\002\076\004\000\002\076\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u044f\000\006\003\005\055\004\001\002\000\004\004" +
    "\u0437\001\002\000\006\003\011\055\010\001\002\000\004" +
    "\002\007\001\002\000\004\002\001\001\002\000\010\005" +
    "\u040a\010\u0409\024\031\001\002\000\006\003\016\055\015" +
    "\001\002\000\004\002\uffff\001\002\000\006\003\011\055" +
    "\010\001\002\000\004\002\ufff5\001\002\000\032\011\033" +
    "\012\025\013\035\014\027\016\030\017\036\020\024\021" +
    "\023\022\034\023\026\024\031\065\032\001\002\000\006" +
    "\003\016\055\015\001\002\000\004\002\ufff3\001\002\000" +
    "\006\003\016\055\015\001\002\000\004\002\uffd0\001\002" +
    "\000\004\002\uffcd\001\002\000\006\056\u01f3\066\u01f2\001" +
    "\002\000\004\056\u0402\001\002\000\006\056\u01c5\066\u01c4" +
    "\001\002\000\006\056\277\066\276\001\002\000\006\056" +
    "\277\066\276\001\002\000\006\056\u018f\066\u018e\001\002" +
    "\000\004\056\u011b\001\002\000\006\004\u0114\010\u0113\001" +
    "\002\000\006\056\277\066\276\001\002\000\006\056\277" +
    "\066\276\001\002\000\006\056\211\066\210\001\002\000" +
    "\006\056\040\066\037\001\002\000\014\034\050\041\052" +
    "\042\051\043\053\044\047\001\002\000\006\055\uff97\126" +
    "\uff97\001\002\000\004\055\042\001\002\000\004\065\043" +
    "\001\002\000\004\017\044\001\002\000\004\056\045\001" +
    "\002\000\006\003\016\055\015\001\002\000\004\002\uffd4" +
    "\001\002\000\004\054\150\001\002\000\004\054\142\001" +
    "\002\000\004\054\134\001\002\000\004\054\070\001\002" +
    "\000\004\054\054\001\002\000\004\125\055\001\002\000" +
    "\006\132\056\133\060\001\002\000\006\131\066\136\067" +
    "\001\002\000\004\125\063\001\002\000\006\131\061\136" +
    "\062\001\002\000\004\125\uff7d\001\002\000\004\125\uff7b" +
    "\001\002\000\004\067\064\001\002\000\006\056\040\066" +
    "\037\001\002\000\006\055\uff98\126\uff98\001\002\000\004" +
    "\125\uff7e\001\002\000\004\125\uff7c\001\002\000\004\125" +
    "\071\001\002\000\042\054\103\060\073\062\100\063\110" +
    "\064\074\065\104\070\077\071\101\072\076\076\075\125" +
    "\112\131\102\132\105\133\107\135\111\136\072\001\002" +
    "\000\042\054\103\060\073\062\100\063\110\064\074\065" +
    "\104\070\077\071\101\072\076\076\075\125\112\131\102" +
    "\132\105\133\107\135\111\136\072\001\002\000\042\054" +
    "\103\060\073\062\100\063\110\064\074\065\104\070\077" +
    "\071\101\072\076\076\075\125\112\131\102\132\105\133" +
    "\107\135\111\136\072\001\002\000\042\054\103\060\073" +
    "\062\100\063\110\064\074\065\104\070\077\071\101\072" +
    "\076\076\075\125\112\131\102\132\105\133\107\135\111" +
    "\136\072\001\002\000\042\054\103\060\073\062\100\063" +
    "\110\064\074\065\104\070\077\071\101\072\076\076\075" +
    "\125\112\131\102\132\105\133\107\135\111\136\072\001" +
    "\002\000\042\054\103\060\073\062\100\063\110\064\074" +
    "\065\104\070\077\071\101\072\076\076\075\125\112\131" +
    "\102\132\105\133\107\135\111\136\072\001\002\000\042" +
    "\054\103\060\073\062\100\063\110\064\074\065\104\070" +
    "\077\071\101\072\076\076\075\125\112\131\102\132\105" +
    "\133\107\135\111\136\072\001\002\000\042\054\103\060" +
    "\073\062\100\063\110\064\074\065\104\070\077\071\101" +
    "\072\076\076\075\125\112\131\102\132\105\133\107\135" +
    "\111\136\072\001\002\000\042\054\103\060\073\062\100" +
    "\063\110\064\074\065\104\070\077\071\101\072\076\076" +
    "\075\125\112\131\102\132\105\133\107\135\111\136\072" +
    "\001\002\000\042\054\103\060\073\062\100\063\110\064" +
    "\074\065\104\070\077\071\101\072\076\076\075\125\112" +
    "\131\102\132\105\133\107\135\111\136\072\001\002\000" +
    "\042\054\103\060\073\062\100\063\110\064\074\065\104" +
    "\070\077\071\101\072\076\076\075\125\112\131\102\132" +
    "\105\133\107\135\111\136\072\001\002\000\042\054\103" +
    "\060\073\062\100\063\110\064\074\065\104\070\077\071" +
    "\101\072\076\076\075\125\112\131\102\132\105\133\107" +
    "\135\111\136\072\001\002\000\042\054\103\060\073\062" +
    "\100\063\110\064\074\065\104\070\077\071\101\072\076" +
    "\076\075\125\112\131\102\132\105\133\107\135\111\136" +
    "\072\001\002\000\004\067\116\001\002\000\042\054\103" +
    "\060\073\062\100\063\110\064\074\065\104\070\077\071" +
    "\101\072\076\076\075\125\112\131\102\132\105\133\107" +
    "\135\111\136\072\001\002\000\042\054\103\060\073\062" +
    "\100\063\110\064\074\065\104\070\077\071\101\072\076" +
    "\076\075\125\112\131\102\132\105\133\107\135\111\136" +
    "\072\001\002\000\042\054\103\060\073\062\100\063\110" +
    "\064\074\065\104\070\077\071\101\072\076\076\075\125" +
    "\112\131\102\132\105\133\107\135\111\136\072\001\002" +
    "\000\026\054\uffdb\055\uffdb\056\uffdb\057\uffdb\060\uffdb\061" +
    "\uffdb\067\uffdb\071\uffdb\072\uffdb\073\uffdb\001\002\000\026" +
    "\054\uffdc\055\uffdc\056\uffdc\057\uffdc\060\uffdc\061\uffdc\067" +
    "\uffdc\071\uffdc\072\uffdc\073\uffdc\001\002\000\026\054\uffe0" +
    "\055\uffe0\056\uffe0\057\uffe0\060\uffe0\061\uffe0\067\uffe0\071" +
    "\uffe0\072\uffe0\073\uffe0\001\002\000\026\054\uffe3\055\uffe3" +
    "\056\uffe3\057\uffe3\060\uffe3\061\uffe3\067\uffe3\071\uffe3\072" +
    "\uffe3\073\uffe3\001\002\000\006\056\040\066\037\001\002" +
    "\000\006\055\uff9b\126\uff9b\001\002\000\026\054\uffe5\055" +
    "\uffe5\056\uffe5\057\uffe5\060\uffe5\061\uffe5\067\uffe5\071\uffe5" +
    "\072\uffe5\073\uffe5\001\002\000\026\054\uffe8\055\uffe8\056" +
    "\uffe8\057\uffe8\060\uffe8\061\uffe8\067\uffe8\071\uffe8\072\uffe8" +
    "\073\uffe8\001\002\000\026\054\uffe6\055\uffe6\056\uffe6\057" +
    "\uffe6\060\uffe6\061\uffe6\067\uffe6\071\uffe6\072\uffe6\073\uffe6" +
    "\001\002\000\026\054\uffea\055\uffea\056\uffea\057\uffea\060" +
    "\uffea\061\uffea\067\uffea\071\uffea\072\uffea\073\uffea\001\002" +
    "\000\026\054\uffde\055\uffde\056\uffde\057\uffde\060\uffde\061" +
    "\uffde\067\uffde\071\uffde\072\uffde\073\uffde\001\002\000\026" +
    "\054\uffe2\055\uffe2\056\uffe2\057\uffe2\060\uffe2\061\uffe2\067" +
    "\uffe2\071\uffe2\072\uffe2\073\uffe2\001\002\000\026\054\uffdf" +
    "\055\uffdf\056\uffdf\057\uffdf\060\uffdf\061\uffdf\067\uffdf\071" +
    "\uffdf\072\uffdf\073\uffdf\001\002\000\026\054\uffdd\055\uffdd" +
    "\056\uffdd\057\uffdd\060\uffdd\061\uffdd\067\uffdd\071\uffdd\072" +
    "\uffdd\073\uffdd\001\002\000\026\054\uffe9\055\uffe9\056\uffe9" +
    "\057\uffe9\060\uffe9\061\uffe9\067\uffe9\071\uffe9\072\uffe9\073" +
    "\uffe9\001\002\000\026\054\uffe1\055\uffe1\056\uffe1\057\uffe1" +
    "\060\uffe1\061\uffe1\067\uffe1\071\uffe1\072\uffe1\073\uffe1\001" +
    "\002\000\026\054\uffe4\055\uffe4\056\uffe4\057\uffe4\060\uffe4" +
    "\061\uffe4\067\uffe4\071\uffe4\072\uffe4\073\uffe4\001\002\000" +
    "\026\054\uffe7\055\uffe7\056\uffe7\057\uffe7\060\uffe7\061\uffe7" +
    "\067\uffe7\071\uffe7\072\uffe7\073\uffe7\001\002\000\004\125" +
    "\135\001\002\000\006\132\056\133\060\001\002\000\004" +
    "\125\137\001\002\000\004\067\140\001\002\000\006\056" +
    "\040\066\037\001\002\000\006\055\uff99\126\uff99\001\002" +
    "\000\004\125\143\001\002\000\004\131\144\001\002\000" +
    "\004\125\145\001\002\000\004\067\146\001\002\000\006" +
    "\056\040\066\037\001\002\000\006\055\uff9c\126\uff9c\001" +
    "\002\000\004\125\151\001\002\000\036\054\163\062\157" +
    "\063\166\064\153\065\164\070\156\071\161\072\155\076" +
    "\154\125\170\131\162\132\165\133\167\136\152\001\002" +
    "\000\036\054\163\062\157\063\166\064\153\065\164\070" +
    "\156\071\161\072\155\076\154\125\170\131\162\132\165" +
    "\133\167\136\152\001\002\000\036\054\163\062\157\063" +
    "\166\064\153\065\164\070\156\071\161\072\155\076\154" +
    "\125\170\131\162\132\165\133\167\136\152\001\002\000" +
    "\036\054\163\062\157\063\166\064\153\065\164\070\156" +
    "\071\161\072\155\076\154\125\170\131\162\132\165\133" +
    "\167\136\152\001\002\000\036\054\163\062\157\063\166" +
    "\064\153\065\164\070\156\071\161\072\155\076\154\125" +
    "\170\131\162\132\165\133\167\136\152\001\002\000\036" +
    "\054\163\062\157\063\166\064\153\065\164\070\156\071" +
    "\161\072\155\076\154\125\170\131\162\132\165\133\167" +
    "\136\152\001\002\000\036\054\163\062\157\063\166\064" +
    "\153\065\164\070\156\071\161\072\155\076\154\125\170" +
    "\131\162\132\165\133\167\136\152\001\002\000\004\067" +
    "\200\001\002\000\036\054\163\062\157\063\166\064\153" +
    "\065\164\070\156\071\161\072\155\076\154\125\170\131" +
    "\162\132\165\133\167\136\152\001\002\000\036\054\163" +
    "\062\157\063\166\064\153\065\164\070\156\071\161\072" +
    "\155\076\154\125\170\131\162\132\165\133\167\136\152" +
    "\001\002\000\036\054\163\062\157\063\166\064\153\065" +
    "\164\070\156\071\161\072\155\076\154\125\170\131\162" +
    "\132\165\133\167\136\152\001\002\000\036\054\163\062" +
    "\157\063\166\064\153\065\164\070\156\071\161\072\155" +
    "\076\154\125\170\131\162\132\165\133\167\136\152\001" +
    "\002\000\036\054\163\062\157\063\166\064\153\065\164" +
    "\070\156\071\161\072\155\076\154\125\170\131\162\132" +
    "\165\133\167\136\152\001\002\000\036\054\163\062\157" +
    "\063\166\064\153\065\164\070\156\071\161\072\155\076" +
    "\154\125\170\131\162\132\165\133\167\136\152\001\002" +
    "\000\036\054\163\062\157\063\166\064\153\065\164\070" +
    "\156\071\161\072\155\076\154\125\170\131\162\132\165" +
    "\133\167\136\152\001\002\000\022\062\ufeae\063\ufeae\064" +
    "\ufeae\065\ufeae\067\ufeae\071\ufeae\072\ufeae\073\ufeae\001\002" +
    "\000\022\062\ufeb8\063\ufeb8\064\ufeb8\065\ufeb8\067\ufeb8\071" +
    "\ufeb8\072\ufeb8\073\ufeb8\001\002\000\022\062\ufeb6\063\ufeb6" +
    "\064\ufeb6\065\ufeb6\067\ufeb6\071\ufeb6\072\ufeb6\073\ufeb6\001" +
    "\002\000\022\062\ufeb9\063\ufeb9\064\ufeb9\065\ufeb9\067\ufeb9" +
    "\071\ufeb9\072\ufeb9\073\ufeb9\001\002\000\022\062\ufeb4\063" +
    "\ufeb4\064\ufeb4\065\ufeb4\067\ufeb4\071\ufeb4\072\ufeb4\073\ufeb4" +
    "\001\002\000\022\062\ufeb1\063\ufeb1\064\ufeb1\065\ufeb1\067" +
    "\ufeb1\071\ufeb1\072\ufeb1\073\ufeb1\001\002\000\022\062\ufeba" +
    "\063\ufeba\064\ufeba\065\ufeba\067\ufeba\071\ufeba\072\ufeba\073" +
    "\ufeba\001\002\000\022\062\ufeaf\063\ufeaf\064\ufeaf\065\ufeaf" +
    "\067\ufeaf\071\ufeaf\072\ufeaf\073\ufeaf\001\002\000\006\056" +
    "\040\066\037\001\002\000\006\055\uff9a\126\uff9a\001\002" +
    "\000\022\062\ufeb7\063\ufeb7\064\ufeb7\065\ufeb7\067\ufeb7\071" +
    "\ufeb7\072\ufeb7\073\ufeb7\001\002\000\022\062\ufeb0\063\ufeb0" +
    "\064\ufeb0\065\ufeb0\067\ufeb0\071\ufeb0\072\ufeb0\073\ufeb0\001" +
    "\002\000\022\062\ufeb2\063\ufeb2\064\ufeb2\065\ufeb2\067\ufeb2" +
    "\071\ufeb2\072\ufeb2\073\ufeb2\001\002\000\022\062\ufeb3\063" +
    "\ufeb3\064\ufeb3\065\ufeb3\067\ufeb3\071\ufeb3\072\ufeb3\073\ufeb3" +
    "\001\002\000\022\062\ufeb5\063\ufeb5\064\ufeb5\065\ufeb5\067" +
    "\ufeb5\071\ufeb5\072\ufeb5\073\ufeb5\001\002\000\022\062\ufebb" +
    "\063\ufebb\064\ufebb\065\ufebb\067\ufebb\071\ufebb\072\ufebb\073" +
    "\ufebb\001\002\000\016\030\225\031\222\032\220\034\223" +
    "\036\224\037\221\001\002\000\006\055\uffaa\126\uffaa\001" +
    "\002\000\004\055\213\001\002\000\004\065\214\001\002" +
    "\000\004\013\215\001\002\000\004\056\216\001\002\000" +
    "\006\003\016\055\015\001\002\000\004\002\uffd3\001\002" +
    "\000\004\054\270\001\002\000\004\054\262\001\002\000" +
    "\004\054\254\001\002\000\004\054\246\001\002\000\004" +
    "\054\240\001\002\000\004\054\226\001\002\000\004\125" +
    "\227\001\002\000\006\132\230\133\231\001\002\000\004" +
    "\131\237\001\002\000\004\131\236\001\002\000\004\125" +
    "\233\001\002\000\004\067\234\001\002\000\006\056\211" +
    "\066\210\001\002\000\006\055\uffab\126\uffab\001\002\000" +
    "\004\125\uff7f\001\002\000\004\125\uff80\001\002\000\004" +
    "\125\241\001\002\000\004\132\242\001\002\000\004\125" +
    "\243\001\002\000\004\067\244\001\002\000\006\056\211" +
    "\066\210\001\002\000\006\055\uffaf\126\uffaf\001\002\000" +
    "\004\125\247\001\002\000\004\131\250\001\002\000\004" +
    "\125\251\001\002\000\004\067\252\001\002\000\006\056" +
    "\211\066\210\001\002\000\006\055\uffb0\126\uffb0\001\002" +
    "\000\004\125\255\001\002\000\004\131\256\001\002\000" +
    "\004\125\257\001\002\000\004\067\260\001\002\000\006" +
    "\056\211\066\210\001\002\000\006\055\uffac\126\uffac\001" +
    "\002\000\004\125\263\001\002\000\004\132\264\001\002" +
    "\000\004\125\265\001\002\000\004\067\266\001\002\000" +
    "\006\056\211\066\210\001\002\000\006\055\uffae\126\uffae" +
    "\001\002\000\004\125\271\001\002\000\004\131\272\001" +
    "\002\000\004\125\273\001\002\000\004\067\274\001\002" +
    "\000\006\056\211\066\210\001\002\000\006\055\uffad\126" +
    "\uffad\001\002\000\014\027\352\030\355\031\354\032\351" +
    "\034\353\001\002\000\050\054\uffa4\055\uffa4\057\uffa4\060" +
    "\uffa4\061\uffa4\062\uffa4\063\uffa4\064\uffa4\065\uffa4\070\uffa4" +
    "\071\uffa4\072\uffa4\076\uffa4\126\uffa4\131\uffa4\132\uffa4\133" +
    "\uffa4\135\uffa4\136\uffa4\001\002\000\046\054\304\055\312" +
    "\057\305\060\302\061\310\062\307\063\323\064\320\065" +
    "\306\070\316\071\317\072\315\076\313\131\314\132\311" +
    "\133\322\135\321\136\303\001\002\000\004\022\346\001" +
    "\002\000\046\054\304\055\312\057\305\060\302\061\310" +
    "\062\307\063\323\064\320\065\306\070\316\071\317\072" +
    "\315\076\313\131\314\132\311\133\322\135\321\136\303" +
    "\001\002\000\046\054\304\055\312\057\305\060\302\061" +
    "\310\062\307\063\323\064\320\065\306\070\316\071\317" +
    "\072\315\076\313\131\314\132\311\133\322\135\321\136" +
    "\303\001\002\000\046\054\304\055\312\057\305\060\302" +
    "\061\310\062\307\063\323\064\320\065\306\070\316\071" +
    "\317\072\315\076\313\131\314\132\311\133\322\135\321" +
    "\136\303\001\002\000\046\054\304\055\312\057\305\060" +
    "\302\061\310\062\307\063\323\064\320\065\306\070\316" +
    "\071\317\072\315\076\313\131\314\132\311\133\322\135" +
    "\321\136\303\001\002\000\046\054\304\055\312\057\305" +
    "\060\302\061\310\062\307\063\323\064\320\065\306\070" +
    "\316\071\317\072\315\076\313\131\314\132\311\133\322" +
    "\135\321\136\303\001\002\000\046\054\304\055\312\057" +
    "\305\060\302\061\310\062\307\063\323\064\320\065\306" +
    "\070\316\071\317\072\315\076\313\131\314\132\311\133" +
    "\322\135\321\136\303\001\002\000\046\054\304\055\312" +
    "\057\305\060\302\061\310\062\307\063\323\064\320\065" +
    "\306\070\316\071\317\072\315\076\313\131\314\132\311" +
    "\133\322\135\321\136\303\001\002\000\046\054\304\055" +
    "\312\057\305\060\302\061\310\062\307\063\323\064\320" +
    "\065\306\070\316\071\317\072\315\076\313\131\314\132" +
    "\311\133\322\135\321\136\303\001\002\000\004\065\335" +
    "\001\002\000\046\054\304\055\312\057\305\060\302\061" +
    "\310\062\307\063\323\064\320\065\306\070\316\071\317" +
    "\072\315\076\313\131\314\132\311\133\322\135\321\136" +
    "\303\001\002\000\046\054\304\055\312\057\305\060\302" +
    "\061\310\062\307\063\323\064\320\065\306\070\316\071" +
    "\317\072\315\076\313\131\314\132\311\133\322\135\321" +
    "\136\303\001\002\000\046\054\304\055\312\057\305\060" +
    "\302\061\310\062\307\063\323\064\320\065\306\070\316" +
    "\071\317\072\315\076\313\131\314\132\311\133\322\135" +
    "\321\136\303\001\002\000\046\054\304\055\312\057\305" +
    "\060\302\061\310\062\307\063\323\064\320\065\306\070" +
    "\316\071\317\072\315\076\313\131\314\132\311\133\322" +
    "\135\321\136\303\001\002\000\046\054\304\055\312\057" +
    "\305\060\302\061\310\062\307\063\323\064\320\065\306" +
    "\070\316\071\317\072\315\076\313\131\314\132\311\133" +
    "\322\135\321\136\303\001\002\000\046\054\304\055\312" +
    "\057\305\060\302\061\310\062\307\063\323\064\320\065" +
    "\306\070\316\071\317\072\315\076\313\131\314\132\311" +
    "\133\322\135\321\136\303\001\002\000\046\054\304\055" +
    "\312\057\305\060\302\061\310\062\307\063\323\064\320" +
    "\065\306\070\316\071\317\072\315\076\313\131\314\132" +
    "\311\133\322\135\321\136\303\001\002\000\046\054\304" +
    "\055\312\057\305\060\302\061\310\062\307\063\323\064" +
    "\320\065\306\070\316\071\317\072\315\076\313\131\314" +
    "\132\311\133\322\135\321\136\303\001\002\000\046\054" +
    "\304\055\312\057\305\060\302\061\310\062\307\063\323" +
    "\064\320\065\306\070\316\071\317\072\315\076\313\131" +
    "\314\132\311\133\322\135\321\136\303\001\002\000\020" +
    "\006\uff90\011\uff90\012\uff90\015\uff90\021\uff90\022\uff90\023" +
    "\uff90\001\002\000\020\006\uff93\011\uff93\012\uff93\015\uff93" +
    "\021\uff93\022\uff93\023\uff93\001\002\000\020\006\uff92\011" +
    "\uff92\012\uff92\015\uff92\021\uff92\022\uff92\023\uff92\001\002" +
    "\000\020\006\uff8f\011\uff8f\012\uff8f\015\uff8f\021\uff8f\022" +
    "\uff8f\023\uff8f\001\002\000\020\006\uff86\011\uff86\012\uff86" +
    "\015\uff86\021\uff86\022\uff86\023\uff86\001\002\000\020\006" +
    "\uff87\011\uff87\012\uff87\015\uff87\021\uff87\022\uff87\023\uff87" +
    "\001\002\000\020\006\uff89\011\uff89\012\uff89\015\uff89\021" +
    "\uff89\022\uff89\023\uff89\001\002\000\020\006\uff95\011\uff95" +
    "\012\uff95\015\uff95\021\uff95\022\uff95\023\uff95\001\002\000" +
    "\020\006\uff8a\011\uff8a\012\uff8a\015\uff8a\021\uff8a\022\uff8a" +
    "\023\uff8a\001\002\000\020\006\uff85\011\uff85\012\uff85\015" +
    "\uff85\021\uff85\022\uff85\023\uff85\001\002\000\020\006\uff94" +
    "\011\uff94\012\uff94\015\uff94\021\uff94\022\uff94\023\uff94\001" +
    "\002\000\020\006\uff8c\011\uff8c\012\uff8c\015\uff8c\021\uff8c" +
    "\022\uff8c\023\uff8c\001\002\000\020\006\uff91\011\uff91\012" +
    "\uff91\015\uff91\021\uff91\022\uff91\023\uff91\001\002\000\020" +
    "\006\uff8b\011\uff8b\012\uff8b\015\uff8b\021\uff8b\022\uff8b\023" +
    "\uff8b\001\002\000\020\006\uff8d\011\uff8d\012\uff8d\015\uff8d" +
    "\021\uff8d\022\uff8d\023\uff8d\001\002\000\020\006\uff88\011" +
    "\uff88\012\uff88\015\uff88\021\uff88\022\uff88\023\uff88\001\002" +
    "\000\020\006\uff96\011\uff96\012\uff96\015\uff96\021\uff96\022" +
    "\uff96\023\uff96\001\002\000\020\006\uff8e\011\uff8e\012\uff8e" +
    "\015\uff8e\021\uff8e\022\uff8e\023\uff8e\001\002\000\004\056" +
    "\347\001\002\000\006\003\016\055\015\001\002\000\004" +
    "\002\uffd8\001\002\000\004\054\u0108\001\002\000\004\054" +
    "\u0100\001\002\000\004\054\372\001\002\000\004\054\364" +
    "\001\002\000\004\054\356\001\002\000\004\125\357\001" +
    "\002\000\006\132\230\133\231\001\002\000\004\125\361" +
    "\001\002\000\004\067\362\001\002\000\006\056\277\066" +
    "\276\001\002\000\050\054\uffa5\055\uffa5\057\uffa5\060\uffa5" +
    "\061\uffa5\062\uffa5\063\uffa5\064\uffa5\065\uffa5\070\uffa5\071" +
    "\uffa5\072\uffa5\076\uffa5\126\uffa5\131\uffa5\132\uffa5\133\uffa5" +
    "\135\uffa5\136\uffa5\001\002\000\004\125\365\001\002\000" +
    "\004\131\366\001\002\000\004\125\367\001\002\000\004" +
    "\067\370\001\002\000\006\056\277\066\276\001\002\000" +
    "\050\054\uffa6\055\uffa6\057\uffa6\060\uffa6\061\uffa6\062\uffa6" +
    "\063\uffa6\064\uffa6\065\uffa6\070\uffa6\071\uffa6\072\uffa6\076" +
    "\uffa6\126\uffa6\131\uffa6\132\uffa6\133\uffa6\135\uffa6\136\uffa6" +
    "\001\002\000\004\125\373\001\002\000\004\131\374\001" +
    "\002\000\004\125\375\001\002\000\004\067\376\001\002" +
    "\000\006\056\277\066\276\001\002\000\050\054\uffa9\055" +
    "\uffa9\057\uffa9\060\uffa9\061\uffa9\062\uffa9\063\uffa9\064\uffa9" +
    "\065\uffa9\070\uffa9\071\uffa9\072\uffa9\076\uffa9\126\uffa9\131" +
    "\uffa9\132\uffa9\133\uffa9\135\uffa9\136\uffa9\001\002\000\004" +
    "\125\u0101\001\002\000\006\131\u0102\135\u0103\001\002\000" +
    "\004\125\uff82\001\002\000\004\125\uff81\001\002\000\004" +
    "\125\u0105\001\002\000\004\067\u0106\001\002\000\006\056" +
    "\277\066\276\001\002\000\050\054\uffa8\055\uffa8\057\uffa8" +
    "\060\uffa8\061\uffa8\062\uffa8\063\uffa8\064\uffa8\065\uffa8\070" +
    "\uffa8\071\uffa8\072\uffa8\076\uffa8\126\uffa8\131\uffa8\132\uffa8" +
    "\133\uffa8\135\uffa8\136\uffa8\001\002\000\004\125\u0109\001" +
    "\002\000\004\131\u010a\001\002\000\004\125\u010b\001\002" +
    "\000\004\067\u010c\001\002\000\006\056\277\066\276\001" +
    "\002\000\050\054\uffa7\055\uffa7\057\uffa7\060\uffa7\061\uffa7" +
    "\062\uffa7\063\uffa7\064\uffa7\065\uffa7\070\uffa7\071\uffa7\072" +
    "\uffa7\076\uffa7\126\uffa7\131\uffa7\132\uffa7\133\uffa7\135\uffa7" +
    "\136\uffa7\001\002\000\046\054\304\055\312\057\305\060" +
    "\302\061\310\062\307\063\323\064\320\065\306\070\316" +
    "\071\317\072\315\076\313\131\314\132\311\133\322\135" +
    "\321\136\303\001\002\000\004\011\u0110\001\002\000\004" +
    "\056\u0111\001\002\000\006\003\016\055\015\001\002\000" +
    "\004\002\uffda\001\002\000\004\056\u0116\001\002\000\004" +
    "\056\u0115\001\002\000\004\002\uffce\001\002\000\004\055" +
    "\u0117\001\002\000\004\065\u0118\001\002\000\004\004\u0119" +
    "\001\002\000\004\056\u011a\001\002\000\004\002\uffcf\001" +
    "\002\000\010\055\u011c\077\u011d\127\u011f\001\002\000\004" +
    "\065\u03a4\001\002\000\004\070\u039f\001\002\000\006\003" +
    "\uff7a\055\uff7a\001\002\000\004\070\u0120\001\002\000\004" +
    "\071\u0121\001\002\000\004\066\u0122\001\002\000\040\003" +
    "\u012f\046\u0129\047\u0125\050\u0128\051\u0133\052\u012b\067\u0126" +
    "\107\u0132\110\u0130\111\u0123\113\u0131\116\u012c\120\u0124\123" +
    "\u0127\131\u012e\001\002\000\004\070\u039b\001\002\000\004" +
    "\070\u038f\001\002\000\006\053\u036c\131\u036b\001\002\000" +
    "\010\055\uff6e\077\uff6e\127\uff6e\001\002\000\004\070\u0363" +
    "\001\002\000\006\053\u0348\131\u0347\001\002\000\006\053" +
    "\u0321\131\u0320\001\002\000\010\055\u011c\077\u011d\127\u011f" +
    "\001\002\000\006\053\u02ed\131\u02ec\001\002\000\004\070" +
    "\u0256\001\002\000\040\003\u012f\046\u0129\047\u0125\050\u0128" +
    "\051\u0133\052\u012b\067\u0126\107\u0132\110\u0130\111\u0123\113" +
    "\u0131\116\u012c\120\u0124\123\u0127\131\u012e\001\002\000\004" +
    "\054\u023c\001\002\000\040\003\u012f\046\u0129\047\u0125\050" +
    "\u0128\051\u0133\052\u012b\067\u0126\107\u0132\110\u0130\111\u0123" +
    "\113\u0131\116\u012c\120\u0124\123\u0127\131\u012e\001\002\000" +
    "\004\070\u0233\001\002\000\004\070\u014c\001\002\000\004" +
    "\070\u0148\001\002\000\006\053\u0135\131\u0134\001\002\000" +
    "\010\054\u0138\072\u0137\073\u013a\001\002\000\004\131\u0136" +
    "\001\002\000\010\054\u0138\072\u0137\073\u013a\001\002\000" +
    "\004\131\u0145\001\002\000\006\105\u013c\134\u013b\001\002" +
    "\000\042\003\uff34\046\uff34\047\uff34\050\uff34\051\uff34\052" +
    "\uff34\067\uff34\076\uff34\107\uff34\110\uff34\111\uff34\113\uff34" +
    "\116\uff34\120\uff34\123\uff34\131\uff34\001\002\000\042\003" +
    "\uff09\046\uff09\047\uff09\050\uff09\051\uff09\052\uff09\067\uff09" +
    "\076\uff09\107\uff09\110\uff09\111\uff09\113\uff09\116\uff09\120" +
    "\uff09\123\uff09\131\uff09\001\002\000\006\072\u013f\073\u0141" +
    "\001\002\000\004\070\u013d\001\002\000\004\071\u013e\001" +
    "\002\000\006\072\u013f\073\u0141\001\002\000\004\131\u0142" +
    "\001\002\000\042\003\uff0a\046\uff0a\047\uff0a\050\uff0a\051" +
    "\uff0a\052\uff0a\067\uff0a\076\uff0a\107\uff0a\110\uff0a\111\uff0a" +
    "\113\uff0a\116\uff0a\120\uff0a\123\uff0a\131\uff0a\001\002\000" +
    "\042\003\uff07\046\uff07\047\uff07\050\uff07\051\uff07\052\uff07" +
    "\067\uff07\076\uff07\107\uff07\110\uff07\111\uff07\113\uff07\116" +
    "\uff07\120\uff07\123\uff07\131\uff07\001\002\000\010\054\u0138" +
    "\072\u0137\073\u013a\001\002\000\042\003\uff08\046\uff08\047" +
    "\uff08\050\uff08\051\uff08\052\uff08\067\uff08\076\uff08\107\uff08" +
    "\110\uff08\111\uff08\113\uff08\116\uff08\120\uff08\123\uff08\131" +
    "\uff08\001\002\000\042\003\uff0c\046\uff0c\047\uff0c\050\uff0c" +
    "\051\uff0c\052\uff0c\067\uff0c\076\uff0c\107\uff0c\110\uff0c\111" +
    "\uff0c\113\uff0c\116\uff0c\120\uff0c\123\uff0c\131\uff0c\001\002" +
    "\000\010\054\u0138\072\u0137\073\u013a\001\002\000\042\003" +
    "\uff0b\046\uff0b\047\uff0b\050\uff0b\051\uff0b\052\uff0b\067\uff0b" +
    "\076\uff0b\107\uff0b\110\uff0b\111\uff0b\113\uff0b\116\uff0b\120" +
    "\uff0b\123\uff0b\131\uff0b\001\002\000\042\003\uff39\046\uff39" +
    "\047\uff39\050\uff39\051\uff39\052\uff39\067\uff39\076\uff39\107" +
    "\uff39\110\uff39\111\uff39\113\uff39\116\uff39\120\uff39\123\uff39" +
    "\131\uff39\001\002\000\004\071\u0149\001\002\000\004\073" +
    "\u014a\001\002\000\040\003\u012f\046\u0129\047\u0125\050\u0128" +
    "\051\u0133\052\u012b\067\u0126\107\u0132\110\u0130\111\u0123\113" +
    "\u0131\116\u012c\120\u0124\123\u0127\131\u012e\001\002\000\010" +
    "\055\uff6f\077\uff6f\127\uff6f\001\002\000\010\126\u014e\131" +
    "\u014d\134\u0150\001\002\000\006\071\u0151\072\u0152\001\002" +
    "\000\040\054\u015b\055\u0160\062\u015d\063\u0169\064\u0167\065" +
    "\u015c\070\u0165\071\u0166\072\u0163\076\u0161\126\u0158\131\u0162" +
    "\132\u015f\133\u0168\136\u015a\001\002\000\004\073\u022e\001" +
    "\002\000\006\071\u0151\072\u0152\001\002\000\004\073\ufee2" +
    "\001\002\000\010\126\u0155\131\u0154\134\u0156\001\002\000" +
    "\004\073\ufee6\001\002\000\006\071\u0151\072\u0152\001\002" +
    "\000\040\054\u015b\055\u0160\062\u015d\063\u0169\064\u0167\065" +
    "\u015c\070\u0165\071\u0166\072\u0163\076\u0161\126\u0158\131\u0162" +
    "\132\u015f\133\u0168\136\u015a\001\002\000\006\071\u0151\072" +
    "\u0152\001\002\000\004\073\ufee3\001\002\000\006\071\ufebc" +
    "\072\ufebc\001\002\000\006\071\ufee1\072\ufee1\001\002\000" +
    "\036\054\u015b\062\u015d\063\u0169\064\u0167\065\u015c\070\u0165" +
    "\071\u0166\072\u0163\076\u0161\126\u0158\131\u0162\132\u015f\133" +
    "\u0168\136\u015a\001\002\000\036\054\u015b\062\u015d\063\u0169" +
    "\064\u0167\065\u015c\070\u0165\071\u0166\072\u0163\076\u0161\126" +
    "\u0158\131\u0162\132\u015f\133\u0168\136\u015a\001\002\000\036" +
    "\054\u015b\062\u015d\063\u0169\064\u0167\065\u015c\070\u0165\071" +
    "\u0166\072\u0163\076\u0161\126\u0158\131\u0162\132\u015f\133\u0168" +
    "\136\u015a\001\002\000\036\054\u015b\062\u015d\063\u0169\064" +
    "\u0167\065\u015c\070\u0165\071\u0166\072\u0163\076\u0161\126\u0158" +
    "\131\u0162\132\u015f\133\u0168\136\u015a\001\002\000\004\126" +
    "\u0228\001\002\000\036\054\u015b\062\u015d\063\u0169\064\u0167" +
    "\065\u015c\070\u0165\071\u0166\072\u0163\076\u0161\126\u0158\131" +
    "\u0162\132\u015f\133\u0168\136\u015a\001\002\000\030\011\u017a" +
    "\012\u0175\013\u017c\014\u0176\016\u0178\017\u017d\020\u0174\021" +
    "\u0173\022\u017b\023\u0177\065\u0179\001\002\000\036\054\u015b" +
    "\062\u015d\063\u0169\064\u0167\065\u015c\070\u0165\071\u0166\072" +
    "\u0163\076\u0161\126\u0158\131\u0162\132\u015f\133\u0168\136\u015a" +
    "\001\002\000\036\054\u015b\062\u015d\063\u0169\064\u0167\065" +
    "\u015c\070\u0165\071\u0166\072\u0163\076\u0161\126\u0158\131\u0162" +
    "\132\u015f\133\u0168\136\u015a\001\002\000\036\054\u015b\062" +
    "\u015d\063\u0169\064\u0167\065\u015c\070\u0165\071\u0166\072\u0163" +
    "\076\u0161\126\u0158\131\u0162\132\u015f\133\u0168\136\u015a\001" +
    "\002\000\006\071\u0151\072\u0152\001\002\000\036\054\u015b" +
    "\062\u015d\063\u0169\064\u0167\065\u015c\070\u0165\071\u0166\072" +
    "\u0163\076\u0161\126\u0158\131\u0162\132\u015f\133\u0168\136\u015a" +
    "\001\002\000\036\054\u015b\062\u015d\063\u0169\064\u0167\065" +
    "\u015c\070\u0165\071\u0166\072\u0163\076\u0161\126\u0158\131\u0162" +
    "\132\u015f\133\u0168\136\u015a\001\002\000\036\054\u015b\062" +
    "\u015d\063\u0169\064\u0167\065\u015c\070\u0165\071\u0166\072\u0163" +
    "\076\u0161\126\u0158\131\u0162\132\u015f\133\u0168\136\u015a\001" +
    "\002\000\036\054\u015b\062\u015d\063\u0169\064\u0167\065\u015c" +
    "\070\u0165\071\u0166\072\u0163\076\u0161\126\u0158\131\u0162\132" +
    "\u015f\133\u0168\136\u015a\001\002\000\036\054\u015b\062\u015d" +
    "\063\u0169\064\u0167\065\u015c\070\u0165\071\u0166\072\u0163\076" +
    "\u0161\126\u0158\131\u0162\132\u015f\133\u0168\136\u015a\001\002" +
    "\000\006\071\ufec4\072\ufec4\001\002\000\006\071\ufec6\072" +
    "\ufec6\001\002\000\006\071\ufec3\072\ufec3\001\002\000\006" +
    "\071\ufebd\072\ufebd\001\002\000\006\071\ufebe\072\ufebe\001" +
    "\002\000\004\073\ufee4\001\002\000\006\071\ufec0\072\ufec0" +
    "\001\002\000\006\071\ufec8\072\ufec8\001\002\000\006\071" +
    "\ufec1\072\ufec1\001\002\000\006\056\u01f3\066\u01f2\001\002" +
    "\000\004\056\u01f0\001\002\000\006\056\u01c5\066\u01c4\001" +
    "\002\000\006\056\277\066\276\001\002\000\006\056\277" +
    "\066\276\001\002\000\006\056\u018f\066\u018e\001\002\000" +
    "\024\011\u0188\012\u0183\013\u018a\014\u0184\016\u0187\017\u018b" +
    "\021\u0182\022\u0189\023\u0185\001\002\000\006\056\277\066" +
    "\276\001\002\000\006\056\277\066\276\001\002\000\006" +
    "\056\211\066\210\001\002\000\006\056\040\066\037\001" +
    "\002\000\004\126\ufed9\001\002\000\004\126\ufed8\001\002" +
    "\000\004\126\ufedd\001\002\000\004\126\ufedf\001\002\000" +
    "\004\056\ufecc\001\002\000\004\056\ufed0\001\002\000\004" +
    "\056\ufed3\001\002\000\004\056\ufed1\001\002\000\004\056" +
    "\u018c\001\002\000\004\056\ufecd\001\002\000\004\056\ufed4" +
    "\001\002\000\004\056\ufed2\001\002\000\004\056\ufece\001" +
    "\002\000\004\056\ufecf\001\002\000\004\126\ufed5\001\002" +
    "\000\004\126\ufed7\001\002\000\020\026\u0194\027\u0191\030" +
    "\u0195\031\u0193\032\u0190\034\u0192\040\u0196\001\002\000\006" +
    "\055\uffb9\126\uffb9\001\002\000\004\054\u01bb\001\002\000" +
    "\004\054\u01b5\001\002\000\004\054\u01af\001\002\000\004" +
    "\054\u01a9\001\002\000\004\054\u01a3\001\002\000\004\054" +
    "\u019d\001\002\000\004\054\u0197\001\002\000\004\125\u0198" +
    "\001\002\000\004\131\u0199\001\002\000\004\125\u019a\001" +
    "\002\000\004\067\u019b\001\002\000\006\056\u018f\066\u018e" +
    "\001\002\000\006\055\uffba\126\uffba\001\002\000\004\125" +
    "\u019e\001\002\000\006\132\230\133\231\001\002\000\004" +
    "\125\u01a0\001\002\000\004\067\u01a1\001\002\000\006\056" +
    "\u018f\066\u018e\001\002\000\006\055\uffbc\126\uffbc\001\002" +
    "\000\004\125\u01a4\001\002\000\006\131\u0102\135\u0103\001" +
    "\002\000\004\125\u01a6\001\002\000\004\067\u01a7\001\002" +
    "\000\006\056\u018f\066\u018e\001\002\000\006\055\uffbb\126" +
    "\uffbb\001\002\000\004\125\u01aa\001\002\000\004\131\u01ab" +
    "\001\002\000\004\125\u01ac\001\002\000\004\067\u01ad\001" +
    "\002\000\006\056\u018f\066\u018e\001\002\000\006\055\uffbd" +
    "\126\uffbd\001\002\000\004\125\u01b0\001\002\000\004\131" +
    "\u01b1\001\002\000\004\125\u01b2\001\002\000\004\067\u01b3" +
    "\001\002\000\006\056\u018f\066\u018e\001\002\000\006\055" +
    "\uffc0\126\uffc0\001\002\000\004\125\u01b6\001\002\000\006" +
    "\131\u0102\135\u0103\001\002\000\004\125\u01b8\001\002\000" +
    "\004\067\u01b9\001\002\000\006\056\u018f\066\u018e\001\002" +
    "\000\006\055\uffbe\126\uffbe\001\002\000\004\125\u01bc\001" +
    "\002\000\004\131\u01bd\001\002\000\004\125\u01be\001\002" +
    "\000\004\067\u01bf\001\002\000\006\056\u018f\066\u018e\001" +
    "\002\000\006\055\uffbf\126\uffbf\001\002\000\004\126\ufedc" +
    "\001\002\000\004\126\ufede\001\002\000\004\126\ufeda\001" +
    "\002\000\016\027\u01c7\030\u01ca\031\u01c9\032\u01c6\033\u01cb" +
    "\034\u01c8\001\002\000\050\054\uff9d\055\uff9d\057\uff9d\060" +
    "\uff9d\061\uff9d\062\uff9d\063\uff9d\064\uff9d\065\uff9d\070\uff9d" +
    "\071\uff9d\072\uff9d\076\uff9d\126\uff9d\131\uff9d\132\uff9d\133" +
    "\uff9d\135\uff9d\136\uff9d\001\002\000\004\054\u01ea\001\002" +
    "\000\004\054\u01e4\001\002\000\004\054\u01de\001\002\000" +
    "\004\054\u01d8\001\002\000\004\054\u01d2\001\002\000\004" +
    "\054\u01cc\001\002\000\004\125\u01cd\001\002\000\004\131" +
    "\u01ce\001\002\000\004\125\u01cf\001\002\000\004\067\u01d0" +
    "\001\002\000\006\056\u01c5\066\u01c4\001\002\000\050\054" +
    "\uffa2\055\uffa2\057\uffa2\060\uffa2\061\uffa2\062\uffa2\063\uffa2" +
    "\064\uffa2\065\uffa2\070\uffa2\071\uffa2\072\uffa2\076\uffa2\126" +
    "\uffa2\131\uffa2\132\uffa2\133\uffa2\135\uffa2\136\uffa2\001\002" +
    "\000\004\125\u01d3\001\002\000\006\132\230\133\231\001" +
    "\002\000\004\125\u01d5\001\002\000\004\067\u01d6\001\002" +
    "\000\006\056\u01c5\066\u01c4\001\002\000\050\054\uff9e\055" +
    "\uff9e\057\uff9e\060\uff9e\061\uff9e\062\uff9e\063\uff9e\064\uff9e" +
    "\065\uff9e\070\uff9e\071\uff9e\072\uff9e\076\uff9e\126\uff9e\131" +
    "\uff9e\132\uff9e\133\uff9e\135\uff9e\136\uff9e\001\002\000\004" +
    "\125\u01d9\001\002\000\004\131\u01da\001\002\000\004\125" +
    "\u01db\001\002\000\004\067\u01dc\001\002\000\006\056\u01c5" +
    "\066\u01c4\001\002\000\050\054\uff9f\055\uff9f\057\uff9f\060" +
    "\uff9f\061\uff9f\062\uff9f\063\uff9f\064\uff9f\065\uff9f\070\uff9f" +
    "\071\uff9f\072\uff9f\076\uff9f\126\uff9f\131\uff9f\132\uff9f\133" +
    "\uff9f\135\uff9f\136\uff9f\001\002\000\004\125\u01df\001\002" +
    "\000\004\131\u01e0\001\002\000\004\125\u01e1\001\002\000" +
    "\004\067\u01e2\001\002\000\006\056\u01c5\066\u01c4\001\002" +
    "\000\050\054\uffa3\055\uffa3\057\uffa3\060\uffa3\061\uffa3\062" +
    "\uffa3\063\uffa3\064\uffa3\065\uffa3\070\uffa3\071\uffa3\072\uffa3" +
    "\076\uffa3\126\uffa3\131\uffa3\132\uffa3\133\uffa3\135\uffa3\136" +
    "\uffa3\001\002\000\004\125\u01e5\001\002\000\006\131\u0102" +
    "\135\u0103\001\002\000\004\125\u01e7\001\002\000\004\067" +
    "\u01e8\001\002\000\006\056\u01c5\066\u01c4\001\002\000\050" +
    "\054\uffa1\055\uffa1\057\uffa1\060\uffa1\061\uffa1\062\uffa1\063" +
    "\uffa1\064\uffa1\065\uffa1\070\uffa1\071\uffa1\072\uffa1\076\uffa1" +
    "\126\uffa1\131\uffa1\132\uffa1\133\uffa1\135\uffa1\136\uffa1\001" +
    "\002\000\004\125\u01eb\001\002\000\004\131\u01ec\001\002" +
    "\000\004\125\u01ed\001\002\000\004\067\u01ee\001\002\000" +
    "\006\056\u01c5\066\u01c4\001\002\000\050\054\uffa0\055\uffa0" +
    "\057\uffa0\060\uffa0\061\uffa0\062\uffa0\063\uffa0\064\uffa0\065" +
    "\uffa0\070\uffa0\071\uffa0\072\uffa0\076\uffa0\126\uffa0\131\uffa0" +
    "\132\uffa0\133\uffa0\135\uffa0\136\uffa0\001\002\000\004\126" +
    "\ufedb\001\002\000\004\126\ufed6\001\002\000\020\026\u01f8" +
    "\027\u01f5\030\u01f9\031\u01f7\032\u01f4\034\u01f6\045\u01fa\001" +
    "\002\000\050\054\uffb1\055\uffb1\057\uffb1\060\uffb1\061\uffb1" +
    "\062\uffb1\063\uffb1\064\uffb1\065\uffb1\070\uffb1\071\uffb1\072" +
    "\uffb1\076\uffb1\126\uffb1\131\uffb1\132\uffb1\133\uffb1\135\uffb1" +
    "\136\uffb1\001\002\000\004\054\u0221\001\002\000\004\054" +
    "\u021b\001\002\000\004\054\u0215\001\002\000\004\054\u020f" +
    "\001\002\000\004\054\u0209\001\002\000\004\054\u0203\001" +
    "\002\000\004\054\u01fb\001\002\000\004\125\u01fc\001\002" +
    "\000\004\127\u01fd\001\002\000\004\070\u01fe\001\002\000" +
    "\004\071\u01ff\001\002\000\004\125\u0200\001\002\000\004" +
    "\067\u0201\001\002\000\006\056\u01f3\066\u01f2\001\002\000" +
    "\050\054\uffb2\055\uffb2\057\uffb2\060\uffb2\061\uffb2\062\uffb2" +
    "\063\uffb2\064\uffb2\065\uffb2\070\uffb2\071\uffb2\072\uffb2\076" +
    "\uffb2\126\uffb2\131\uffb2\132\uffb2\133\uffb2\135\uffb2\136\uffb2" +
    "\001\002\000\004\125\u0204\001\002\000\006\132\230\133" +
    "\231\001\002\000\004\125\u0206\001\002\000\004\067\u0207" +
    "\001\002\000\006\056\u01f3\066\u01f2\001\002\000\050\054" +
    "\uffb4\055\uffb4\057\uffb4\060\uffb4\061\uffb4\062\uffb4\063\uffb4" +
    "\064\uffb4\065\uffb4\070\uffb4\071\uffb4\072\uffb4\076\uffb4\126" +
    "\uffb4\131\uffb4\132\uffb4\133\uffb4\135\uffb4\136\uffb4\001\002" +
    "\000\004\125\u020a\001\002\000\006\131\u0102\135\u0103\001" +
    "\002\000\004\125\u020c\001\002\000\004\067\u020d\001\002" +
    "\000\006\056\u01f3\066\u01f2\001\002\000\050\054\uffb3\055" +
    "\uffb3\057\uffb3\060\uffb3\061\uffb3\062\uffb3\063\uffb3\064\uffb3" +
    "\065\uffb3\070\uffb3\071\uffb3\072\uffb3\076\uffb3\126\uffb3\131" +
    "\uffb3\132\uffb3\133\uffb3\135\uffb3\136\uffb3\001\002\000\004" +
    "\125\u0210\001\002\000\004\131\u0211\001\002\000\004\125" +
    "\u0212\001\002\000\004\067\u0213\001\002\000\006\056\u01f3" +
    "\066\u01f2\001\002\000\050\054\uffb5\055\uffb5\057\uffb5\060" +
    "\uffb5\061\uffb5\062\uffb5\063\uffb5\064\uffb5\065\uffb5\070\uffb5" +
    "\071\uffb5\072\uffb5\076\uffb5\126\uffb5\131\uffb5\132\uffb5\133" +
    "\uffb5\135\uffb5\136\uffb5\001\002\000\004\125\u0216\001\002" +
    "\000\004\131\u0217\001\002\000\004\125\u0218\001\002\000" +
    "\004\067\u0219\001\002\000\006\056\u01f3\066\u01f2\001\002" +
    "\000\050\054\uffb8\055\uffb8\057\uffb8\060\uffb8\061\uffb8\062" +
    "\uffb8\063\uffb8\064\uffb8\065\uffb8\070\uffb8\071\uffb8\072\uffb8" +
    "\076\uffb8\126\uffb8\131\uffb8\132\uffb8\133\uffb8\135\uffb8\136" +
    "\uffb8\001\002\000\004\125\u021c\001\002\000\006\131\u0102" +
    "\135\u0103\001\002\000\004\125\u021e\001\002\000\004\067" +
    "\u021f\001\002\000\006\056\u01f3\066\u01f2\001\002\000\050" +
    "\054\uffb6\055\uffb6\057\uffb6\060\uffb6\061\uffb6\062\uffb6\063" +
    "\uffb6\064\uffb6\065\uffb6\070\uffb6\071\uffb6\072\uffb6\076\uffb6" +
    "\126\uffb6\131\uffb6\132\uffb6\133\uffb6\135\uffb6\136\uffb6\001" +
    "\002\000\004\125\u0222\001\002\000\004\131\u0223\001\002" +
    "\000\004\125\u0224\001\002\000\004\067\u0225\001\002\000" +
    "\006\056\u01f3\066\u01f2\001\002\000\050\054\uffb7\055\uffb7" +
    "\057\uffb7\060\uffb7\061\uffb7\062\uffb7\063\uffb7\064\uffb7\065" +
    "\uffb7\070\uffb7\071\uffb7\072\uffb7\076\uffb7\126\uffb7\131\uffb7" +
    "\132\uffb7\133\uffb7\135\uffb7\136\uffb7\001\002\000\006\071" +
    "\ufec7\072\ufec7\001\002\000\006\071\ufee0\072\ufee0\001\002" +
    "\000\006\071\ufec5\072\ufec5\001\002\000\006\071\ufec2\072" +
    "\ufec2\001\002\000\006\071\ufebf\072\ufebf\001\002\000\006" +
    "\071\ufec9\072\ufec9\001\002\000\004\073\ufee5\001\002\000" +
    "\040\003\u012f\046\u0129\047\u0125\050\u0128\051\u0133\052\u012b" +
    "\067\u0126\107\u0132\110\u0130\111\u0123\113\u0131\116\u012c\120" +
    "\u0124\123\u0127\131\u012e\001\002\000\010\055\uff70\077\uff70" +
    "\127\uff70\001\002\000\006\071\u0151\072\u0152\001\002\000" +
    "\004\073\ufee7\001\002\000\004\073\ufee8\001\002\000\006" +
    "\125\u0236\131\u0235\001\002\000\004\071\u0238\001\002\000" +
    "\004\071\ufecb\001\002\000\036\054\163\062\157\063\166" +
    "\064\153\065\164\070\156\071\161\072\155\076\154\125" +
    "\170\131\162\132\165\133\167\136\152\001\002\000\004" +
    "\071\ufeca\001\002\000\004\073\u0239\001\002\000\040\003" +
    "\u012f\046\u0129\047\u0125\050\u0128\051\u0133\052\u012b\067\u0126" +
    "\107\u0132\110\u0130\111\u0123\113\u0131\116\u012c\120\u0124\123" +
    "\u0127\131\u012e\001\002\000\010\055\uff75\077\uff75\127\uff75" +
    "\001\002\000\010\055\uff6d\077\uff6d\127\uff6d\001\002\000" +
    "\016\125\u0242\130\u023e\131\u023f\132\u0241\133\u0243\134\u0244" +
    "\001\002\000\042\003\uff31\046\uff31\047\uff31\050\uff31\051" +
    "\uff31\052\uff31\067\uff31\076\uff31\107\uff31\110\uff31\111\uff31" +
    "\113\uff31\116\uff31\120\uff31\123\uff31\131\uff31\001\002\000" +
    "\014\062\u0248\063\u0246\064\u024a\065\u0249\073\u024b\001\002" +
    "\000\016\062\uff0d\063\uff0d\064\uff0d\065\uff0d\072\uff0d\073" +
    "\uff0d\001\002\000\014\062\u0248\063\u0246\064\u024a\065\u0249" +
    "\073\u024b\001\002\000\016\062\uff11\063\uff11\064\uff11\065" +
    "\uff11\072\uff11\073\uff11\001\002\000\036\054\163\062\157" +
    "\063\166\064\153\065\164\070\156\071\161\072\155\076" +
    "\154\125\170\131\162\132\165\133\167\136\152\001\002" +
    "\000\016\062\uff0f\063\uff0f\064\uff0f\065\uff0f\072\uff0f\073" +
    "\uff0f\001\002\000\016\062\uff10\063\uff10\064\uff10\065\uff10" +
    "\072\uff10\073\uff10\001\002\000\016\062\uff0e\063\uff0e\064" +
    "\uff0e\065\uff0e\072\uff0e\073\uff0e\001\002\000\014\125\u0242" +
    "\131\u023f\132\u0241\133\u0243\134\u0244\001\002\000\042\003" +
    "\uff30\046\uff30\047\uff30\050\uff30\051\uff30\052\uff30\067\uff30" +
    "\076\uff30\107\uff30\110\uff30\111\uff30\113\uff30\116\uff30\120" +
    "\uff30\123\uff30\131\uff30\001\002\000\014\125\u0242\131\u023f" +
    "\132\u0241\133\u0243\134\u0244\001\002\000\014\125\u0242\131" +
    "\u023f\132\u0241\133\u0243\134\u0244\001\002\000\014\125\u0242" +
    "\131\u023f\132\u0241\133\u0243\134\u0244\001\002\000\042\003" +
    "\uff2a\046\uff2a\047\uff2a\050\uff2a\051\uff2a\052\uff2a\067\uff2a" +
    "\076\uff2a\107\uff2a\110\uff2a\111\uff2a\113\uff2a\116\uff2a\120" +
    "\uff2a\123\uff2a\131\uff2a\001\002\000\014\062\u0248\063\u0246" +
    "\064\u024a\065\u0249\073\u024b\001\002\000\042\003\uff2b\046" +
    "\uff2b\047\uff2b\050\uff2b\051\uff2b\052\uff2b\067\uff2b\076\uff2b" +
    "\107\uff2b\110\uff2b\111\uff2b\113\uff2b\116\uff2b\120\uff2b\123" +
    "\uff2b\131\uff2b\001\002\000\014\062\u0248\063\u0246\064\u024a" +
    "\065\u0249\073\u024b\001\002\000\042\003\uff2c\046\uff2c\047" +
    "\uff2c\050\uff2c\051\uff2c\052\uff2c\067\uff2c\076\uff2c\107\uff2c" +
    "\110\uff2c\111\uff2c\113\uff2c\116\uff2c\120\uff2c\123\uff2c\131" +
    "\uff2c\001\002\000\014\062\u0248\063\u0246\064\u024a\065\u0249" +
    "\073\u024b\001\002\000\042\003\uff2e\046\uff2e\047\uff2e\050" +
    "\uff2e\051\uff2e\052\uff2e\067\uff2e\076\uff2e\107\uff2e\110\uff2e" +
    "\111\uff2e\113\uff2e\116\uff2e\120\uff2e\123\uff2e\131\uff2e\001" +
    "\002\000\014\062\u0248\063\u0246\064\u024a\065\u0249\073\u024b" +
    "\001\002\000\042\003\uff2d\046\uff2d\047\uff2d\050\uff2d\051" +
    "\uff2d\052\uff2d\067\uff2d\076\uff2d\107\uff2d\110\uff2d\111\uff2d" +
    "\113\uff2d\116\uff2d\120\uff2d\123\uff2d\131\uff2d\001\002\000" +
    "\042\003\uff2f\046\uff2f\047\uff2f\050\uff2f\051\uff2f\052\uff2f" +
    "\067\uff2f\076\uff2f\107\uff2f\110\uff2f\111\uff2f\113\uff2f\116" +
    "\uff2f\120\uff2f\123\uff2f\131\uff2f\001\002\000\010\055\uff76" +
    "\077\uff76\127\uff76\001\002\000\020\061\u025d\070\u0258\125" +
    "\u0260\130\u025b\131\u025c\132\u025e\133\u025f\001\002\000\034" +
    "\054\uff5a\055\uff5a\056\uff5a\057\uff5a\060\uff5a\061\uff5a\062" +
    "\u02e5\063\u02e4\064\u02e7\065\u02e6\071\uff5a\072\uff5a\073\uff5a" +
    "\001\002\000\016\070\u0258\125\u0260\130\u025b\131\u025c\132" +
    "\u025e\133\u025f\001\002\000\020\054\u02d5\055\u02d0\056\u02d4" +
    "\057\u02d7\060\u02cf\061\u02d6\071\u02d3\001\002\000\004\122" +
    "\u0263\001\002\000\024\054\uff58\055\uff58\056\uff58\057\uff58" +
    "\060\uff58\061\uff58\071\uff58\072\uff58\073\uff58\001\002\000" +
    "\034\054\uff3c\055\uff3c\056\uff3c\057\uff3c\060\uff3c\061\uff3c" +
    "\062\uff3c\063\uff3c\064\uff3c\065\uff3c\071\uff3c\072\uff3c\073" +
    "\uff3c\001\002\000\020\061\u025d\070\u0258\125\u0260\130\u025b" +
    "\131\u025c\132\u025e\133\u025f\001\002\000\034\054\uff3e\055" +
    "\uff3e\056\uff3e\057\uff3e\060\uff3e\061\uff3e\062\uff3e\063\uff3e" +
    "\064\uff3e\065\uff3e\071\uff3e\072\uff3e\073\uff3e\001\002\000" +
    "\034\054\uff3d\055\uff3d\056\uff3d\057\uff3d\060\uff3d\061\uff3d" +
    "\062\uff3d\063\uff3d\064\uff3d\065\uff3d\071\uff3d\072\uff3d\073" +
    "\uff3d\001\002\000\042\054\103\060\073\062\100\063\110" +
    "\064\074\065\104\070\077\071\101\072\076\076\075\125" +
    "\112\131\102\132\105\133\107\135\111\136\072\001\002" +
    "\000\024\054\uff59\055\uff59\056\uff59\057\uff59\060\uff59\061" +
    "\uff59\071\uff59\072\uff59\073\uff59\001\002\000\030\054\uff63" +
    "\055\uff63\056\uff63\057\uff63\060\uff63\061\uff63\071\uff63\072" +
    "\uff63\073\uff63\122\uff63\124\uff63\001\002\000\004\114\u0264" +
    "\001\002\000\004\074\u0265\001\002\000\004\076\u0266\001" +
    "\002\000\036\046\u0129\047\u0125\050\u0128\051\u0133\052\u012b" +
    "\076\u0268\107\u0270\110\u026d\111\u0269\113\u026e\116\u026b\120" +
    "\u0267\123\u026a\131\u012e\001\002\000\004\070\u02a6\001\002" +
    "\000\004\075\u02a4\001\002\000\004\070\u02a0\001\002\000" +
    "\004\070\u0298\001\002\000\004\070\u028f\001\002\000\036" +
    "\046\u0129\047\u0125\050\u0128\051\u0133\052\u012b\076\u0268\107" +
    "\u0270\110\u026d\111\u0269\113\u026e\116\u026b\120\u0267\123\u026a" +
    "\131\u012e\001\002\000\004\070\u0289\001\002\000\004\070" +
    "\u0285\001\002\000\042\003\uff4c\046\uff4c\047\uff4c\050\uff4c" +
    "\051\uff4c\052\uff4c\067\uff4c\107\uff4c\110\uff4c\111\uff4c\113" +
    "\uff4c\116\uff4c\117\u0276\120\uff4c\123\uff4c\131\uff4c\001\002" +
    "\000\004\070\u0271\001\002\000\004\071\u0272\001\002\000" +
    "\004\073\u0273\001\002\000\036\046\u0129\047\u0125\050\u0128" +
    "\051\u0133\052\u012b\076\u0268\107\u0270\110\u026d\111\u0269\113" +
    "\u026e\116\u026b\120\u0267\123\u026a\131\u012e\001\002\000\044" +
    "\003\uff65\046\uff65\047\uff65\050\uff65\051\uff65\052\uff65\067" +
    "\uff65\076\uff65\107\uff65\110\uff65\111\uff65\113\uff65\116\uff65" +
    "\117\uff65\120\uff65\123\uff65\131\uff65\001\002\000\040\003" +
    "\u012f\046\u0129\047\u0125\050\u0128\051\u0133\052\u012b\067\u0126" +
    "\107\u0132\110\u0130\111\u0123\113\u0131\116\u012c\120\u0124\123" +
    "\u0127\131\u012e\001\002\000\006\114\u0277\116\u0278\001\002" +
    "\000\004\074\u0281\001\002\000\004\070\u0279\001\002\000" +
    "\020\061\u025d\070\u0258\125\u0260\130\u025b\131\u025c\132\u025e" +
    "\133\u025f\001\002\000\004\122\u027b\001\002\000\004\114" +
    "\u027c\001\002\000\004\074\u027d\001\002\000\004\076\u027e" +
    "\001\002\000\036\046\u0129\047\u0125\050\u0128\051\u0133\052" +
    "\u012b\076\u0268\107\u0270\110\u026d\111\u0269\113\u026e\116\u026b" +
    "\120\u0267\123\u026a\131\u012e\001\002\000\044\003\uff4c\046" +
    "\uff4c\047\uff4c\050\uff4c\051\uff4c\052\uff4c\067\uff4c\076\uff4c" +
    "\107\uff4c\110\uff4c\111\uff4c\113\uff4c\116\uff4c\117\u0276\120" +
    "\uff4c\123\uff4c\131\uff4c\001\002\000\042\003\uff4e\046\uff4e" +
    "\047\uff4e\050\uff4e\051\uff4e\052\uff4e\067\uff4e\076\uff4e\107" +
    "\uff4e\110\uff4e\111\uff4e\113\uff4e\116\uff4e\120\uff4e\123\uff4e" +
    "\131\uff4e\001\002\000\004\076\u0282\001\002\000\036\046" +
    "\u0129\047\u0125\050\u0128\051\u0133\052\u012b\076\u0268\107\u0270" +
    "\110\u026d\111\u0269\113\u026e\116\u026b\120\u0267\123\u026a\131" +
    "\u012e\001\002\000\042\003\uff4d\046\uff4d\047\uff4d\050\uff4d" +
    "\051\uff4d\052\uff4d\067\uff4d\076\uff4d\107\uff4d\110\uff4d\111" +
    "\uff4d\113\uff4d\116\uff4d\120\uff4d\123\uff4d\131\uff4d\001\002" +
    "\000\010\055\uff73\077\uff73\127\uff73\001\002\000\010\126" +
    "\u014e\131\u014d\134\u0150\001\002\000\004\073\u0287\001\002" +
    "\000\036\046\u0129\047\u0125\050\u0128\051\u0133\052\u012b\076" +
    "\u0268\107\u0270\110\u026d\111\u0269\113\u026e\116\u026b\120\u0267" +
    "\123\u026a\131\u012e\001\002\000\044\003\uff66\046\uff66\047" +
    "\uff66\050\uff66\051\uff66\052\uff66\067\uff66\076\uff66\107\uff66" +
    "\110\uff66\111\uff66\113\uff66\116\uff66\117\uff66\120\uff66\123" +
    "\uff66\131\uff66\001\002\000\006\125\u0236\131\u0235\001\002" +
    "\000\004\071\u028b\001\002\000\004\073\u028c\001\002\000" +
    "\036\046\u0129\047\u0125\050\u0128\051\u0133\052\u012b\076\u0268" +
    "\107\u0270\110\u026d\111\u0269\113\u026e\116\u026b\120\u0267\123" +
    "\u026a\131\u012e\001\002\000\044\003\uff6b\046\uff6b\047\uff6b" +
    "\050\uff6b\051\uff6b\052\uff6b\067\uff6b\076\uff6b\107\uff6b\110" +
    "\uff6b\111\uff6b\113\uff6b\116\uff6b\117\uff6b\120\uff6b\123\uff6b" +
    "\131\uff6b\001\002\000\044\003\uff6c\046\uff6c\047\uff6c\050" +
    "\uff6c\051\uff6c\052\uff6c\067\uff6c\076\uff6c\107\uff6c\110\uff6c" +
    "\111\uff6c\113\uff6c\116\uff6c\117\uff6c\120\uff6c\123\uff6c\131" +
    "\uff6c\001\002\000\020\061\u025d\070\u0258\125\u0260\130\u025b" +
    "\131\u025c\132\u025e\133\u025f\001\002\000\004\122\u0291\001" +
    "\002\000\004\114\u0292\001\002\000\004\074\u0293\001\002" +
    "\000\004\076\u0294\001\002\000\036\046\u0129\047\u0125\050" +
    "\u0128\051\u0133\052\u012b\076\u0268\107\u0270\110\u026d\111\u0269" +
    "\113\u026e\116\u026b\120\u0267\123\u026a\131\u012e\001\002\000" +
    "\040\046\uff4c\047\uff4c\050\uff4c\051\uff4c\052\uff4c\076\uff4c" +
    "\107\uff4c\110\uff4c\111\uff4c\113\uff4c\116\uff4c\117\u0276\120" +
    "\uff4c\123\uff4c\131\uff4c\001\002\000\036\046\u0129\047\u0125" +
    "\050\u0128\051\u0133\052\u012b\076\u0268\107\u0270\110\u026d\111" +
    "\u0269\113\u026e\116\u026b\120\u0267\123\u026a\131\u012e\001\002" +
    "\000\044\003\uff69\046\uff69\047\uff69\050\uff69\051\uff69\052" +
    "\uff69\067\uff69\076\uff69\107\uff69\110\uff69\111\uff69\113\uff69" +
    "\116\uff69\117\uff69\120\uff69\123\uff69\131\uff69\001\002\000" +
    "\020\061\u025d\070\u0258\125\u0260\130\u025b\131\u025c\132\u025e" +
    "\133\u025f\001\002\000\004\124\u029a\001\002\000\004\114" +
    "\u029b\001\002\000\004\074\u029c\001\002\000\004\076\u029d" +
    "\001\002\000\036\046\u0129\047\u0125\050\u0128\051\u0133\052" +
    "\u012b\076\u0268\107\u0270\110\u026d\111\u0269\113\u026e\116\u026b" +
    "\120\u0267\123\u026a\131\u012e\001\002\000\036\046\u0129\047" +
    "\u0125\050\u0128\051\u0133\052\u012b\076\u0268\107\u0270\110\u026d" +
    "\111\u0269\113\u026e\116\u026b\120\u0267\123\u026a\131\u012e\001" +
    "\002\000\044\003\uff67\046\uff67\047\uff67\050\uff67\051\uff67" +
    "\052\uff67\067\uff67\076\uff67\107\uff67\110\uff67\111\uff67\113" +
    "\uff67\116\uff67\117\uff67\120\uff67\123\uff67\131\uff67\001\002" +
    "\000\004\071\u02a1\001\002\000\004\073\u02a2\001\002\000" +
    "\036\046\u0129\047\u0125\050\u0128\051\u0133\052\u012b\076\u0268" +
    "\107\u0270\110\u026d\111\u0269\113\u026e\116\u026b\120\u0267\123" +
    "\u026a\131\u012e\001\002\000\044\003\uff6a\046\uff6a\047\uff6a" +
    "\050\uff6a\051\uff6a\052\uff6a\067\uff6a\076\uff6a\107\uff6a\110" +
    "\uff6a\111\uff6a\113\uff6a\116\uff6a\117\uff6a\120\uff6a\123\uff6a" +
    "\131\uff6a\001\002\000\004\115\u02a5\001\002\000\044\003" +
    "\uff64\046\uff64\047\uff64\050\uff64\051\uff64\052\uff64\067\uff64" +
    "\076\uff64\107\uff64\110\uff64\111\uff64\113\uff64\116\uff64\117" +
    "\uff64\120\uff64\123\uff64\131\uff64\001\002\000\006\046\u02a9" +
    "\131\u02a7\001\002\000\004\054\u02cc\001\002\000\004\071" +
    "\u02ad\001\002\000\004\131\u02aa\001\002\000\004\054\u02ab" +
    "\001\002\000\010\131\u025c\132\u025e\133\u025f\001\002\000" +
    "\004\071\uff3f\001\002\000\004\121\u02ae\001\002\000\004" +
    "\070\u02af\001\002\000\012\070\u02b1\131\u025c\132\u025e\133" +
    "\u025f\001\002\000\014\062\u02c5\063\u02c4\064\u02c7\065\u02c6" +
    "\071\uff46\001\002\000\012\070\u02b1\131\u025c\132\u025e\133" +
    "\u025f\001\002\000\004\071\u02b3\001\002\000\004\114\u02b4" +
    "\001\002\000\004\074\u02b5\001\002\000\004\076\u02b6\001" +
    "\002\000\036\046\u0129\047\u0125\050\u0128\051\u0133\052\u012b" +
    "\076\u0268\107\u0270\110\u026d\111\u0269\113\u026e\116\u026b\120" +
    "\u0267\123\u026a\131\u012e\001\002\000\036\046\u0129\047\u0125" +
    "\050\u0128\051\u0133\052\u012b\076\u0268\107\u0270\110\u026d\111" +
    "\u0269\113\u026e\116\u026b\120\u0267\123\u026a\131\u012e\001\002" +
    "\000\044\003\uff68\046\uff68\047\uff68\050\uff68\051\uff68\052" +
    "\uff68\067\uff68\076\uff68\107\uff68\110\uff68\111\uff68\113\uff68" +
    "\116\uff68\117\uff68\120\uff68\123\uff68\131\uff68\001\002\000" +
    "\004\071\u02ba\001\002\000\014\062\u02bc\063\u02bb\064\u02bf" +
    "\065\u02bd\071\uff41\001\002\000\012\070\u02b1\131\u025c\132" +
    "\u025e\133\u025f\001\002\000\012\070\u02b1\131\u025c\132\u025e" +
    "\133\u025f\001\002\000\012\070\u02b1\131\u025c\132\u025e\133" +
    "\u025f\001\002\000\004\071\uff47\001\002\000\012\070\u02b1" +
    "\131\u025c\132\u025e\133\u025f\001\002\000\004\071\uff43\001" +
    "\002\000\004\071\uff42\001\002\000\004\071\uff45\001\002" +
    "\000\004\071\uff44\001\002\000\012\070\u02b1\131\u025c\132" +
    "\u025e\133\u025f\001\002\000\012\070\u02b1\131\u025c\132\u025e" +
    "\133\u025f\001\002\000\012\070\u02b1\131\u025c\132\u025e\133" +
    "\u025f\001\002\000\012\070\u02b1\131\u025c\132\u025e\133\u025f" +
    "\001\002\000\004\071\uff49\001\002\000\004\071\uff48\001" +
    "\002\000\004\071\uff4b\001\002\000\004\071\uff4a\001\002" +
    "\000\010\131\u025c\132\u025e\133\u025f\001\002\000\004\071" +
    "\uff40\001\002\000\030\054\uff60\055\uff60\056\uff60\057\uff60" +
    "\060\uff60\061\uff60\071\uff60\072\uff60\073\uff60\122\uff60\124" +
    "\uff60\001\002\000\004\060\u02e0\001\002\000\020\054\u02df" +
    "\070\uff52\125\uff52\130\uff52\131\uff52\132\uff52\133\uff52\001" +
    "\002\000\016\070\u0258\125\u0260\130\u025b\131\u025c\132\u025e" +
    "\133\u025f\001\002\000\030\054\uff62\055\uff62\056\uff62\057" +
    "\uff62\060\uff62\061\uff62\071\uff62\072\uff62\073\uff62\122\uff62" +
    "\124\uff62\001\002\000\030\054\uff55\055\uff55\056\uff55\057" +
    "\uff55\060\uff55\061\uff55\071\uff55\072\uff55\073\uff55\122\uff55" +
    "\124\uff55\001\002\000\020\054\u02dc\070\uff50\125\uff50\130" +
    "\uff50\131\uff50\132\uff50\133\uff50\001\002\000\004\054\u02db" +
    "\001\002\000\004\054\u02da\001\002\000\004\057\u02d8\001" +
    "\002\000\020\061\u025d\070\u0258\125\u0260\130\u025b\131\u025c" +
    "\132\u025e\133\u025f\001\002\000\030\054\uff56\055\uff56\056" +
    "\uff56\057\uff56\060\uff56\061\uff56\071\uff56\072\uff56\073\uff56" +
    "\122\uff56\124\uff56\001\002\000\016\070\uff53\125\uff53\130" +
    "\uff53\131\uff53\132\uff53\133\uff53\001\002\000\016\070\uff54" +
    "\125\uff54\130\uff54\131\uff54\132\uff54\133\uff54\001\002\000" +
    "\016\070\uff4f\125\uff4f\130\uff4f\131\uff4f\132\uff4f\133\uff4f" +
    "\001\002\000\010\057\u02d7\060\u02cf\071\u02d3\001\002\000" +
    "\030\054\uff61\055\uff61\056\uff61\057\uff61\060\uff61\061\uff61" +
    "\071\uff61\072\uff61\073\uff61\122\uff61\124\uff61\001\002\000" +
    "\016\070\uff51\125\uff51\130\uff51\131\uff51\132\uff51\133\uff51" +
    "\001\002\000\020\061\u025d\070\u0258\125\u0260\130\u025b\131" +
    "\u025c\132\u025e\133\u025f\001\002\000\030\054\uff57\055\uff57" +
    "\056\uff57\057\uff57\060\uff57\061\uff57\071\uff57\072\uff57\073" +
    "\uff57\122\uff57\124\uff57\001\002\000\020\054\u02d5\055\u02d0" +
    "\056\u02d4\057\u02d7\060\u02cf\061\u02d6\071\u02d3\001\002\000" +
    "\024\054\uff5b\055\uff5b\056\uff5b\057\uff5b\060\uff5b\061\uff5b" +
    "\071\uff5b\072\uff5b\073\uff5b\001\002\000\016\070\u0258\125" +
    "\u0260\130\u025b\131\u025c\132\u025e\133\u025f\001\002\000\016" +
    "\070\u0258\125\u0260\130\u025b\131\u025c\132\u025e\133\u025f\001" +
    "\002\000\016\070\u0258\125\u0260\130\u025b\131\u025c\132\u025e" +
    "\133\u025f\001\002\000\016\070\u0258\125\u0260\130\u025b\131" +
    "\u025c\132\u025e\133\u025f\001\002\000\024\054\uff5d\055\uff5d" +
    "\056\uff5d\057\uff5d\060\uff5d\061\uff5d\071\uff5d\072\uff5d\073" +
    "\uff5d\001\002\000\024\054\uff5c\055\uff5c\056\uff5c\057\uff5c" +
    "\060\uff5c\061\uff5c\071\uff5c\072\uff5c\073\uff5c\001\002\000" +
    "\024\054\uff5f\055\uff5f\056\uff5f\057\uff5f\060\uff5f\061\uff5f" +
    "\071\uff5f\072\uff5f\073\uff5f\001\002\000\024\054\uff5e\055" +
    "\uff5e\056\uff5e\057\uff5e\060\uff5e\061\uff5e\071\uff5e\072\uff5e" +
    "\073\uff5e\001\002\000\010\054\u02f0\072\u02ef\073\u02f1\001" +
    "\002\000\004\131\u02ee\001\002\000\010\054\u02f0\072\u02ef" +
    "\073\u02f1\001\002\000\004\131\u031c\001\002\000\030\100" +
    "\u02f5\101\u02f7\102\u02f8\103\u02f3\104\u02f6\112\u02f4\125\u0242" +
    "\131\u023f\132\u0241\133\u0243\134\u0244\001\002\000\042\003" +
    "\uff1c\046\uff1c\047\uff1c\050\uff1c\051\uff1c\052\uff1c\067\uff1c" +
    "\076\uff1c\107\uff1c\110\uff1c\111\uff1c\113\uff1c\116\uff1c\120" +
    "\uff1c\123\uff1c\131\uff1c\001\002\000\042\003\uff33\046\uff33" +
    "\047\uff33\050\uff33\051\uff33\052\uff33\067\uff33\076\uff33\107" +
    "\uff33\110\uff33\111\uff33\113\uff33\116\uff33\120\uff33\123\uff33" +
    "\131\uff33\001\002\000\004\070\u0319\001\002\000\004\070" +
    "\u0313\001\002\000\004\070\u0310\001\002\000\004\070\u030d" +
    "\001\002\000\004\070\u030a\001\002\000\004\070\u0304\001" +
    "\002\000\010\062\u02fd\072\u02fb\073\u02fe\001\002\000\010" +
    "\062\u02fd\072\u02fb\073\u02fe\001\002\000\004\131\u0301\001" +
    "\002\000\042\003\uff1d\046\uff1d\047\uff1d\050\uff1d\051\uff1d" +
    "\052\uff1d\067\uff1d\076\uff1d\107\uff1d\110\uff1d\111\uff1d\113" +
    "\uff1d\116\uff1d\120\uff1d\123\uff1d\131\uff1d\001\002\000\014" +
    "\125\u0242\131\u023f\132\u0241\133\u0243\134\u0244\001\002\000" +
    "\042\003\uff12\046\uff12\047\uff12\050\uff12\051\uff12\052\uff12" +
    "\067\uff12\076\uff12\107\uff12\110\uff12\111\uff12\113\uff12\116" +
    "\uff12\120\uff12\123\uff12\131\uff12\001\002\000\010\062\u02fd" +
    "\072\u02fb\073\u02fe\001\002\000\042\003\uff14\046\uff14\047" +
    "\uff14\050\uff14\051\uff14\052\uff14\067\uff14\076\uff14\107\uff14" +
    "\110\uff14\111\uff14\113\uff14\116\uff14\120\uff14\123\uff14\131" +
    "\uff14\001\002\000\010\054\u02f0\072\u02ef\073\u02f1\001\002" +
    "\000\042\003\uff13\046\uff13\047\uff13\050\uff13\051\uff13\052" +
    "\uff13\067\uff13\076\uff13\107\uff13\110\uff13\111\uff13\113\uff13" +
    "\116\uff13\120\uff13\123\uff13\131\uff13\001\002\000\042\003" +
    "\uff20\046\uff20\047\uff20\050\uff20\051\uff20\052\uff20\067\uff20" +
    "\076\uff20\107\uff20\110\uff20\111\uff20\113\uff20\116\uff20\120" +
    "\uff20\123\uff20\131\uff20\001\002\000\006\125\u0307\131\u0305" +
    "\001\002\000\004\071\uff16\001\002\000\004\071\u0309\001" +
    "\002\000\036\054\163\062\157\063\166\064\153\065\164" +
    "\070\156\071\161\072\155\076\154\125\170\131\162\132" +
    "\165\133\167\136\152\001\002\000\004\071\uff15\001\002" +
    "\000\010\062\uff19\072\uff19\073\uff19\001\002\000\006\125" +
    "\u0307\131\u0305\001\002\000\004\071\u030c\001\002\000\010" +
    "\062\uff1a\072\uff1a\073\uff1a\001\002\000\006\125\u0307\131" +
    "\u0305\001\002\000\004\071\u030f\001\002\000\010\062\uff17" +
    "\072\uff17\073\uff17\001\002\000\006\125\u0307\131\u0305\001" +
    "\002\000\004\071\u0312\001\002\000\010\062\uff1b\072\uff1b" +
    "\073\uff1b\001\002\000\004\126\u0314\001\002\000\004\131" +
    "\u0315\001\002\000\004\126\u0316\001\002\000\004\071\u0317" +
    "\001\002\000\010\062\u02fd\072\u02fb\073\u02fe\001\002\000" +
    "\042\003\uff1e\046\uff1e\047\uff1e\050\uff1e\051\uff1e\052\uff1e" +
    "\067\uff1e\076\uff1e\107\uff1e\110\uff1e\111\uff1e\113\uff1e\116" +
    "\uff1e\120\uff1e\123\uff1e\131\uff1e\001\002\000\006\125\u0307" +
    "\131\u0305\001\002\000\004\071\u031b\001\002\000\010\062" +
    "\uff18\072\uff18\073\uff18\001\002\000\010\054\u02f0\072\u02ef" +
    "\073\u02f1\001\002\000\042\003\uff1f\046\uff1f\047\uff1f\050" +
    "\uff1f\051\uff1f\052\uff1f\067\uff1f\076\uff1f\107\uff1f\110\uff1f" +
    "\111\uff1f\113\uff1f\116\uff1f\120\uff1f\123\uff1f\131\uff1f\001" +
    "\002\000\042\003\uff38\046\uff38\047\uff38\050\uff38\051\uff38" +
    "\052\uff38\067\uff38\076\uff38\107\uff38\110\uff38\111\uff38\113" +
    "\uff38\116\uff38\120\uff38\123\uff38\131\uff38\001\002\000\006" +
    "\003\uff78\055\uff78\001\002\000\010\054\u0324\072\u0323\073" +
    "\u0326\001\002\000\004\131\u0322\001\002\000\010\054\u0324" +
    "\072\u0323\073\u0326\001\002\000\004\131\u0344\001\002\000" +
    "\016\070\u032b\106\u032c\130\u0327\131\u0329\132\u032a\134\u032d" +
    "\001\002\000\042\003\uff36\046\uff36\047\uff36\050\uff36\051" +
    "\uff36\052\uff36\067\uff36\076\uff36\107\uff36\110\uff36\111\uff36" +
    "\113\uff36\116\uff36\120\uff36\123\uff36\131\uff36\001\002\000" +
    "\042\003\uff03\046\uff03\047\uff03\050\uff03\051\uff03\052\uff03" +
    "\067\uff03\076\uff03\107\uff03\110\uff03\111\uff03\113\uff03\116" +
    "\uff03\120\uff03\123\uff03\131\uff03\001\002\000\016\062\ufefb" +
    "\063\ufefb\064\ufefb\065\ufefb\072\ufefb\073\ufefb\001\002\000" +
    "\016\062\u0332\063\u0330\064\u0334\065\u0333\072\u0331\073\u0335" +
    "\001\002\000\016\062\ufef8\063\ufef8\064\ufef8\065\ufef8\072" +
    "\ufef8\073\ufef8\001\002\000\016\062\ufefc\063\ufefc\064\ufefc" +
    "\065\ufefc\072\ufefc\073\ufefc\001\002\000\012\070\u02b1\131" +
    "\u025c\132\u025e\133\u025f\001\002\000\004\070\u032e\001\002" +
    "\000\016\062\ufefa\063\ufefa\064\ufefa\065\ufefa\072\ufefa\073" +
    "\ufefa\001\002\000\004\071\u032f\001\002\000\016\062\u0332" +
    "\063\u0330\064\u0334\065\u0333\072\u0331\073\u0335\001\002\000" +
    "\014\070\u032b\130\u0327\131\u0329\132\u032a\134\u032d\001\002" +
    "\000\004\131\u033d\001\002\000\014\070\u032b\130\u0327\131" +
    "\u0329\132\u032a\134\u032d\001\002\000\014\070\u032b\130\u0327" +
    "\131\u0329\132\u032a\134\u032d\001\002\000\014\070\u032b\130" +
    "\u0327\131\u0329\132\u032a\134\u032d\001\002\000\042\003\ufefd" +
    "\046\ufefd\047\ufefd\050\ufefd\051\ufefd\052\ufefd\067\ufefd\076" +
    "\ufefd\107\ufefd\110\ufefd\111\ufefd\113\ufefd\116\ufefd\120\ufefd" +
    "\123\ufefd\131\ufefd\001\002\000\042\003\uff04\046\uff04\047" +
    "\uff04\050\uff04\051\uff04\052\uff04\067\uff04\076\uff04\107\uff04" +
    "\110\uff04\111\uff04\113\uff04\116\uff04\120\uff04\123\uff04\131" +
    "\uff04\001\002\000\016\062\u0332\063\u0330\064\u0334\065\u0333" +
    "\072\u0331\073\u0335\001\002\000\042\003\ufeff\046\ufeff\047" +
    "\ufeff\050\ufeff\051\ufeff\052\ufeff\067\ufeff\076\ufeff\107\ufeff" +
    "\110\ufeff\111\ufeff\113\ufeff\116\ufeff\120\ufeff\123\ufeff\131" +
    "\ufeff\001\002\000\016\062\u0332\063\u0330\064\u0334\065\u0333" +
    "\072\u0331\073\u0335\001\002\000\042\003\uff00\046\uff00\047" +
    "\uff00\050\uff00\051\uff00\052\uff00\067\uff00\076\uff00\107\uff00" +
    "\110\uff00\111\uff00\113\uff00\116\uff00\120\uff00\123\uff00\131" +
    "\uff00\001\002\000\016\062\u0332\063\u0330\064\u0334\065\u0333" +
    "\072\u0331\073\u0335\001\002\000\042\003\uff02\046\uff02\047" +
    "\uff02\050\uff02\051\uff02\052\uff02\067\uff02\076\uff02\107\uff02" +
    "\110\uff02\111\uff02\113\uff02\116\uff02\120\uff02\123\uff02\131" +
    "\uff02\001\002\000\010\054\u0324\072\u0323\073\u0326\001\002" +
    "\000\042\003\ufefe\046\ufefe\047\ufefe\050\ufefe\051\ufefe\052" +
    "\ufefe\067\ufefe\076\ufefe\107\ufefe\110\ufefe\111\ufefe\113\ufefe" +
    "\116\ufefe\120\ufefe\123\ufefe\131\ufefe\001\002\000\016\062" +
    "\u0332\063\u0330\064\u0334\065\u0333\072\u0331\073\u0335\001\002" +
    "\000\042\003\uff01\046\uff01\047\uff01\050\uff01\051\uff01\052" +
    "\uff01\067\uff01\076\uff01\107\uff01\110\uff01\111\uff01\113\uff01" +
    "\116\uff01\120\uff01\123\uff01\131\uff01\001\002\000\004\071" +
    "\u0342\001\002\000\016\062\ufef9\063\ufef9\064\ufef9\065\ufef9" +
    "\072\ufef9\073\ufef9\001\002\000\042\003\uff06\046\uff06\047" +
    "\uff06\050\uff06\051\uff06\052\uff06\067\uff06\076\uff06\107\uff06" +
    "\110\uff06\111\uff06\113\uff06\116\uff06\120\uff06\123\uff06\131" +
    "\uff06\001\002\000\010\054\u0324\072\u0323\073\u0326\001\002" +
    "\000\042\003\uff05\046\uff05\047\uff05\050\uff05\051\uff05\052" +
    "\uff05\067\uff05\076\uff05\107\uff05\110\uff05\111\uff05\113\uff05" +
    "\116\uff05\120\uff05\123\uff05\131\uff05\001\002\000\042\003" +
    "\uff3b\046\uff3b\047\uff3b\050\uff3b\051\uff3b\052\uff3b\067\uff3b" +
    "\076\uff3b\107\uff3b\110\uff3b\111\uff3b\113\uff3b\116\uff3b\120" +
    "\uff3b\123\uff3b\131\uff3b\001\002\000\010\054\u034b\072\u034a" +
    "\073\u034d\001\002\000\004\131\u0349\001\002\000\010\054" +
    "\u034b\072\u034a\073\u034d\001\002\000\004\131\u0360\001\002" +
    "\000\016\070\u0258\125\u0260\130\u025b\131\u025c\132\u025e\133" +
    "\u025f\001\002\000\042\003\uff32\046\uff32\047\uff32\050\uff32" +
    "\051\uff32\052\uff32\067\uff32\076\uff32\107\uff32\110\uff32\111" +
    "\uff32\113\uff32\116\uff32\120\uff32\123\uff32\131\uff32\001\002" +
    "\000\042\003\uff27\046\uff27\047\uff27\050\uff27\051\uff27\052" +
    "\uff27\067\uff27\076\uff27\107\uff27\110\uff27\111\uff27\113\uff27" +
    "\116\uff27\120\uff27\123\uff27\131\uff27\001\002\000\012\057" +
    "\u0353\060\u0350\072\u034f\073\u0352\001\002\000\004\131\u035e" +
    "\001\002\000\004\060\u035a\001\002\000\042\003\uff29\046" +
    "\uff29\047\uff29\050\uff29\051\uff29\052\uff29\067\uff29\076\uff29" +
    "\107\uff29\110\uff29\111\uff29\113\uff29\116\uff29\120\uff29\123" +
    "\uff29\131\uff29\001\002\000\042\003\uff21\046\uff21\047\uff21" +
    "\050\uff21\051\uff21\052\uff21\067\uff21\076\uff21\107\uff21\110" +
    "\uff21\111\uff21\113\uff21\116\uff21\120\uff21\123\uff21\131\uff21" +
    "\001\002\000\004\057\u0355\001\002\000\012\057\u0353\060" +
    "\u0350\072\u034f\073\u0352\001\002\000\002\001\002\000\012" +
    "\057\u0353\060\u0350\072\u034f\073\u0352\001\002\000\042\003" +
    "\uff25\046\uff25\047\uff25\050\uff25\051\uff25\052\uff25\067\uff25" +
    "\076\uff25\107\uff25\110\uff25\111\uff25\113\uff25\116\uff25\120" +
    "\uff25\123\uff25\131\uff25\001\002\000\042\003\uff26\046\uff26" +
    "\047\uff26\050\uff26\051\uff26\052\uff26\067\uff26\076\uff26\107" +
    "\uff26\110\uff26\111\uff26\113\uff26\116\uff26\120\uff26\123\uff26" +
    "\131\uff26\001\002\000\012\057\u0353\060\u0350\072\u034f\073" +
    "\u0352\001\002\000\002\001\002\000\012\057\u0353\060\u0350" +
    "\072\u034f\073\u0352\001\002\000\042\003\uff23\046\uff23\047" +
    "\uff23\050\uff23\051\uff23\052\uff23\067\uff23\076\uff23\107\uff23" +
    "\110\uff23\111\uff23\113\uff23\116\uff23\120\uff23\123\uff23\131" +
    "\uff23\001\002\000\042\003\uff24\046\uff24\047\uff24\050\uff24" +
    "\051\uff24\052\uff24\067\uff24\076\uff24\107\uff24\110\uff24\111" +
    "\uff24\113\uff24\116\uff24\120\uff24\123\uff24\131\uff24\001\002" +
    "\000\010\054\u034b\072\u034a\073\u034d\001\002\000\042\003" +
    "\uff22\046\uff22\047\uff22\050\uff22\051\uff22\052\uff22\067\uff22" +
    "\076\uff22\107\uff22\110\uff22\111\uff22\113\uff22\116\uff22\120" +
    "\uff22\123\uff22\131\uff22\001\002\000\010\054\u034b\072\u034a" +
    "\073\u034d\001\002\000\042\003\uff28\046\uff28\047\uff28\050" +
    "\uff28\051\uff28\052\uff28\067\uff28\076\uff28\107\uff28\110\uff28" +
    "\111\uff28\113\uff28\116\uff28\120\uff28\123\uff28\131\uff28\001" +
    "\002\000\042\003\uff37\046\uff37\047\uff37\050\uff37\051\uff37" +
    "\052\uff37\067\uff37\076\uff37\107\uff37\110\uff37\111\uff37\113" +
    "\uff37\116\uff37\120\uff37\123\uff37\131\uff37\001\002\000\020" +
    "\061\u025d\070\u0258\125\u0260\130\u025b\131\u025c\132\u025e\133" +
    "\u025f\001\002\000\004\124\u0365\001\002\000\004\114\u0366" +
    "\001\002\000\004\074\u0367\001\002\000\004\076\u0368\001" +
    "\002\000\036\046\u0129\047\u0125\050\u0128\051\u0133\052\u012b" +
    "\076\u0268\107\u0270\110\u026d\111\u0269\113\u026e\116\u026b\120" +
    "\u0267\123\u026a\131\u012e\001\002\000\040\003\u012f\046\u0129" +
    "\047\u0125\050\u0128\051\u0133\052\u012b\067\u0126\107\u0132\110" +
    "\u0130\111\u0123\113\u0131\116\u012c\120\u0124\123\u0127\131\u012e" +
    "\001\002\000\010\055\uff71\077\uff71\127\uff71\001\002\000" +
    "\010\054\u036f\072\u036e\073\u0371\001\002\000\004\131\u036d" +
    "\001\002\000\010\054\u036f\072\u036e\073\u0371\001\002\000" +
    "\004\131\u038c\001\002\000\016\070\u0375\130\u0372\131\u0373" +
    "\132\u0374\133\u0377\134\u0378\001\002\000\042\003\uff35\046" +
    "\uff35\047\uff35\050\uff35\051\uff35\052\uff35\067\uff35\076\uff35" +
    "\107\uff35\110\uff35\111\uff35\113\uff35\116\uff35\120\uff35\123" +
    "\uff35\131\uff35\001\002\000\042\003\ufef5\046\ufef5\047\ufef5" +
    "\050\ufef5\051\ufef5\052\ufef5\067\ufef5\076\ufef5\107\ufef5\110" +
    "\ufef5\111\ufef5\113\ufef5\116\ufef5\120\ufef5\123\ufef5\131\ufef5" +
    "\001\002\000\016\062\ufeec\063\ufeec\064\ufeec\065\ufeec\072" +
    "\ufeec\073\ufeec\001\002\000\016\062\ufee9\063\ufee9\064\ufee9" +
    "\065\ufee9\072\ufee9\073\ufee9\001\002\000\016\062\ufeee\063" +
    "\ufeee\064\ufeee\065\ufeee\072\ufeee\073\ufeee\001\002\000\012" +
    "\070\u02b1\131\u025c\132\u025e\133\u025f\001\002\000\016\062" +
    "\u037c\063\u0379\064\u037e\065\u037d\072\u037a\073\u037f\001\002" +
    "\000\016\062\ufeed\063\ufeed\064\ufeed\065\ufeed\072\ufeed\073" +
    "\ufeed\001\002\000\016\062\ufeeb\063\ufeeb\064\ufeeb\065\ufeeb" +
    "\072\ufeeb\073\ufeeb\001\002\000\016\070\u0375\130\u0372\131" +
    "\u0373\132\u0374\133\u0377\134\u0378\001\002\000\004\131\u0386" +
    "\001\002\000\042\003\ufef7\046\ufef7\047\ufef7\050\ufef7\051" +
    "\ufef7\052\ufef7\067\ufef7\076\ufef7\107\ufef7\110\ufef7\111\ufef7" +
    "\113\ufef7\116\ufef7\120\ufef7\123\ufef7\131\ufef7\001\002\000" +
    "\016\070\u0375\130\u0372\131\u0373\132\u0374\133\u0377\134\u0378" +
    "\001\002\000\016\070\u0375\130\u0372\131\u0373\132\u0374\133" +
    "\u0377\134\u0378\001\002\000\016\070\u0375\130\u0372\131\u0373" +
    "\132\u0374\133\u0377\134\u0378\001\002\000\042\003\ufeef\046" +
    "\ufeef\047\ufeef\050\ufeef\051\ufeef\052\ufeef\067\ufeef\076\ufeef" +
    "\107\ufeef\110\ufeef\111\ufeef\113\ufeef\116\ufeef\120\ufeef\123" +
    "\ufeef\131\ufeef\001\002\000\016\062\u037c\063\u0379\064\u037e" +
    "\065\u037d\072\u037a\073\u037f\001\002\000\042\003\ufef1\046" +
    "\ufef1\047\ufef1\050\ufef1\051\ufef1\052\ufef1\067\ufef1\076\ufef1" +
    "\107\ufef1\110\ufef1\111\ufef1\113\ufef1\116\ufef1\120\ufef1\123" +
    "\ufef1\131\ufef1\001\002\000\016\062\u037c\063\u0379\064\u037e" +
    "\065\u037d\072\u037a\073\u037f\001\002\000\042\003\ufef2\046" +
    "\ufef2\047\ufef2\050\ufef2\051\ufef2\052\ufef2\067\ufef2\076\ufef2" +
    "\107\ufef2\110\ufef2\111\ufef2\113\ufef2\116\ufef2\120\ufef2\123" +
    "\ufef2\131\ufef2\001\002\000\016\062\u037c\063\u0379\064\u037e" +
    "\065\u037d\072\u037a\073\u037f\001\002\000\042\003\ufef4\046" +
    "\ufef4\047\ufef4\050\ufef4\051\ufef4\052\ufef4\067\ufef4\076\ufef4" +
    "\107\ufef4\110\ufef4\111\ufef4\113\ufef4\116\ufef4\120\ufef4\123" +
    "\ufef4\131\ufef4\001\002\000\010\054\u036f\072\u036e\073\u0371" +
    "\001\002\000\042\003\ufef0\046\ufef0\047\ufef0\050\ufef0\051" +
    "\ufef0\052\ufef0\067\ufef0\076\ufef0\107\ufef0\110\ufef0\111\ufef0" +
    "\113\ufef0\116\ufef0\120\ufef0\123\ufef0\131\ufef0\001\002\000" +
    "\016\062\u037c\063\u0379\064\u037e\065\u037d\072\u037a\073\u037f" +
    "\001\002\000\042\003\ufef3\046\ufef3\047\ufef3\050\ufef3\051" +
    "\ufef3\052\ufef3\067\ufef3\076\ufef3\107\ufef3\110\ufef3\111\ufef3" +
    "\113\ufef3\116\ufef3\120\ufef3\123\ufef3\131\ufef3\001\002\000" +
    "\004\071\u038b\001\002\000\016\062\ufeea\063\ufeea\064\ufeea" +
    "\065\ufeea\072\ufeea\073\ufeea\001\002\000\010\054\u036f\072" +
    "\u036e\073\u0371\001\002\000\042\003\ufef6\046\ufef6\047\ufef6" +
    "\050\ufef6\051\ufef6\052\ufef6\067\ufef6\076\ufef6\107\ufef6\110" +
    "\ufef6\111\ufef6\113\ufef6\116\ufef6\120\ufef6\123\ufef6\131\ufef6" +
    "\001\002\000\042\003\uff3a\046\uff3a\047\uff3a\050\uff3a\051" +
    "\uff3a\052\uff3a\067\uff3a\076\uff3a\107\uff3a\110\uff3a\111\uff3a" +
    "\113\uff3a\116\uff3a\120\uff3a\123\uff3a\131\uff3a\001\002\000" +
    "\006\046\u02a9\131\u02a7\001\002\000\004\071\u0391\001\002" +
    "\000\004\121\u0392\001\002\000\004\070\u0393\001\002\000" +
    "\012\070\u02b1\131\u025c\132\u025e\133\u025f\001\002\000\004" +
    "\071\u0395\001\002\000\004\114\u0396\001\002\000\004\074" +
    "\u0397\001\002\000\004\076\u0398\001\002\000\036\046\u0129" +
    "\047\u0125\050\u0128\051\u0133\052\u012b\076\u0268\107\u0270\110" +
    "\u026d\111\u0269\113\u026e\116\u026b\120\u0267\123\u026a\131\u012e" +
    "\001\002\000\040\003\u012f\046\u0129\047\u0125\050\u0128\051" +
    "\u0133\052\u012b\067\u0126\107\u0132\110\u0130\111\u0123\113\u0131" +
    "\116\u012c\120\u0124\123\u0127\131\u012e\001\002\000\010\055" +
    "\uff72\077\uff72\127\uff72\001\002\000\004\071\u039c\001\002" +
    "\000\004\073\u039d\001\002\000\040\003\u012f\046\u0129\047" +
    "\u0125\050\u0128\051\u0133\052\u012b\067\u0126\107\u0132\110\u0130" +
    "\111\u0123\113\u0131\116\u012c\120\u0124\123\u0127\131\u012e\001" +
    "\002\000\010\055\uff74\077\uff74\127\uff74\001\002\000\004" +
    "\071\u03a0\001\002\000\004\066\u03a1\001\002\000\040\003" +
    "\u012f\046\u0129\047\u0125\050\u0128\051\u0133\052\u012b\067\u0126" +
    "\107\u0132\110\u0130\111\u0123\113\u0131\116\u012c\120\u0124\123" +
    "\u0127\131\u012e\001\002\000\010\055\u011c\077\u011d\127\u011f" +
    "\001\002\000\006\003\uff79\055\uff79\001\002\000\004\024" +
    "\u03a5\001\002\000\004\056\u03a6\001\002\000\006\003\uff77" +
    "\055\uff77\001\002\000\004\055\u03a8\001\002\000\032\011" +
    "\u03b6\012\u03b0\013\u03b8\014\u03b3\016\u03b4\017\u03b9\020\u03b1" +
    "\021\u03af\022\u03b7\023\u03b2\024\031\065\u03b5\001\002\000" +
    "\004\016\u03ac\001\002\000\004\055\u03a8\001\002\000\004" +
    "\016\uffc3\001\002\000\004\056\u03ad\001\002\000\006\003" +
    "\016\055\015\001\002\000\004\002\uffd2\001\002\000\006" +
    "\056\u01f3\066\u01f2\001\002\000\006\056\u01c5\066\u01c4\001" +
    "\002\000\004\056\u03e7\001\002\000\006\056\277\066\276" +
    "\001\002\000\006\056\277\066\276\001\002\000\006\056" +
    "\u018f\066\u018e\001\002\000\004\016\uffc1\001\002\000\006" +
    "\056\277\066\276\001\002\000\006\056\277\066\276\001" +
    "\002\000\006\056\211\066\210\001\002\000\006\056\040" +
    "\066\037\001\002\000\004\055\u03bb\001\002\000\004\065" +
    "\u03bc\001\002\000\004\017\u03bd\001\002\000\004\056\u03be" +
    "\001\002\000\004\055\u03a8\001\002\000\004\016\uffc6\001" +
    "\002\000\004\055\u03c1\001\002\000\004\065\u03c2\001\002" +
    "\000\004\013\u03c3\001\002\000\004\056\u03c4\001\002\000" +
    "\004\055\u03a8\001\002\000\004\016\uffc5\001\002\000\046" +
    "\054\304\055\312\057\305\060\302\061\310\062\307\063" +
    "\323\064\320\065\306\070\316\071\317\072\315\076\313" +
    "\131\314\132\311\133\322\135\321\136\303\001\002\000" +
    "\004\022\u03c8\001\002\000\004\056\u03c9\001\002\000\004" +
    "\055\u03a8\001\002\000\004\016\uffca\001\002\000\046\054" +
    "\304\055\312\057\305\060\302\061\310\062\307\063\323" +
    "\064\320\065\306\070\316\071\317\072\315\076\313\131" +
    "\314\132\311\133\322\135\321\136\303\001\002\000\004" +
    "\011\u03cd\001\002\000\004\056\u03ce\001\002\000\004\055" +
    "\u03a8\001\002\000\004\016\uffcc\001\002\000\004\055\u03a8" +
    "\001\002\000\004\016\u03d2\001\002\000\004\056\u03d3\001" +
    "\002\000\004\055\u03a8\001\002\000\004\016\uffc2\001\002" +
    "\000\004\055\u03d6\001\002\000\006\015\u03db\065\u03dc\001" +
    "\002\000\004\014\u03d8\001\002\000\004\056\u03d9\001\002" +
    "\000\004\055\u03a8\001\002\000\004\016\uffcb\001\002\000" +
    "\004\056\u03dd\001\002\000\004\014\uff83\001\002\000\046" +
    "\054\304\055\312\057\305\060\302\061\310\062\307\063" +
    "\323\064\320\065\306\070\316\071\317\072\315\076\313" +
    "\131\314\132\311\133\322\135\321\136\303\001\002\000" +
    "\004\015\u03df\001\002\000\004\056\u03e0\001\002\000\004" +
    "\055\u03d6\001\002\000\004\014\uff84\001\002\000\046\054" +
    "\304\055\312\057\305\060\302\061\310\062\307\063\323" +
    "\064\320\065\306\070\316\071\317\072\315\076\313\131" +
    "\314\132\311\133\322\135\321\136\303\001\002\000\004" +
    "\023\u03e4\001\002\000\004\056\u03e5\001\002\000\004\055" +
    "\u03a8\001\002\000\004\016\uffc9\001\002\000\004\055\u03a8" +
    "\001\002\000\004\016\uffc8\001\002\000\046\054\304\055" +
    "\312\057\305\060\302\061\310\062\307\063\323\064\320" +
    "\065\306\070\316\071\317\072\315\076\313\131\314\132" +
    "\311\133\322\135\321\136\303\001\002\000\004\012\u03eb" +
    "\001\002\000\004\056\u03ec\001\002\000\004\055\u03a8\001" +
    "\002\000\004\016\uffc7\001\002\000\046\054\304\055\312" +
    "\057\305\060\302\061\310\062\307\063\323\064\320\065" +
    "\306\070\316\071\317\072\315\076\313\131\314\132\311" +
    "\133\322\135\321\136\303\001\002\000\004\021\u03f0\001" +
    "\002\000\004\056\u03f1\001\002\000\004\055\u03a8\001\002" +
    "\000\004\016\uffc4\001\002\000\004\055\u03d6\001\002\000" +
    "\004\014\u03f5\001\002\000\004\056\u03f6\001\002\000\006" +
    "\003\016\055\015\001\002\000\004\002\uffd9\001\002\000" +
    "\046\054\304\055\312\057\305\060\302\061\310\062\307" +
    "\063\323\064\320\065\306\070\316\071\317\072\315\076" +
    "\313\131\314\132\311\133\322\135\321\136\303\001\002" +
    "\000\004\023\u03fa\001\002\000\004\056\u03fb\001\002\000" +
    "\006\003\016\055\015\001\002\000\004\002\uffd7\001\002" +
    "\000\046\054\304\055\312\057\305\060\302\061\310\062" +
    "\307\063\323\064\320\065\306\070\316\071\317\072\315" +
    "\076\313\131\314\132\311\133\322\135\321\136\303\001" +
    "\002\000\004\012\u03ff\001\002\000\004\056\u0400\001\002" +
    "\000\006\003\016\055\015\001\002\000\004\002\uffd5\001" +
    "\002\000\006\003\016\055\015\001\002\000\004\002\uffd6" +
    "\001\002\000\046\054\304\055\312\057\305\060\302\061" +
    "\310\062\307\063\323\064\320\065\306\070\316\071\317" +
    "\072\315\076\313\131\314\132\311\133\322\135\321\136" +
    "\303\001\002\000\004\021\u0406\001\002\000\004\056\u0407" +
    "\001\002\000\006\003\016\055\015\001\002\000\004\002" +
    "\uffd1\001\002\000\006\056\u042b\066\u042a\001\002\000\004" +
    "\056\u040b\001\002\000\004\055\u040d\001\002\000\004\055" +
    "\u0428\001\002\000\012\006\u0412\007\u0410\024\031\065\u0411" +
    "\001\002\000\004\055\u040d\001\002\000\004\055\uffef\001" +
    "\002\000\006\056\u041c\066\u041b\001\002\000\004\005\u0418" +
    "\001\002\000\004\056\u0413\001\002\000\046\054\304\055" +
    "\312\057\305\060\302\061\310\062\307\063\323\064\320" +
    "\065\306\070\316\071\317\072\315\076\313\131\314\132" +
    "\311\133\322\135\321\136\303\001\002\000\004\006\u0415" +
    "\001\002\000\004\056\u0416\001\002\000\004\055\u040d\001" +
    "\002\000\004\055\ufff2\001\002\000\004\056\u0419\001\002" +
    "\000\004\055\ufff0\001\002\000\004\055\u0423\001\002\000" +
    "\004\025\u041d\001\002\000\004\055\uffeb\001\002\000\004" +
    "\054\u041e\001\002\000\004\125\u041f\001\002\000\042\054" +
    "\103\060\073\062\100\063\110\064\074\065\104\070\077" +
    "\071\101\072\076\076\075\125\112\131\102\132\105\133" +
    "\107\135\111\136\072\001\002\000\004\067\u0421\001\002" +
    "\000\006\056\u041c\066\u041b\001\002\000\004\055\uffec\001" +
    "\002\000\004\065\u0424\001\002\000\004\007\u0425\001\002" +
    "\000\004\056\u0426\001\002\000\004\055\u040d\001\002\000" +
    "\004\055\ufff1\001\002\000\004\010\u0429\001\002\000\006" +
    "\056\u042b\066\u042a\001\002\000\004\026\u042e\001\002\000" +
    "\006\003\uffed\055\uffed\001\002\000\006\003\016\055\015" +
    "\001\002\000\004\002\ufff6\001\002\000\004\054\u042f\001" +
    "\002\000\004\125\u0430\001\002\000\006\131\u0102\135\u0103" +
    "\001\002\000\004\125\u0432\001\002\000\004\067\u0433\001" +
    "\002\000\006\056\u042b\066\u042a\001\002\000\006\003\uffee" +
    "\055\uffee\001\002\000\006\003\016\055\015\001\002\000" +
    "\004\002\ufff4\001\002\000\006\056\u043a\066\u0439\001\002" +
    "\000\006\003\011\055\010\001\002\000\006\034\u043b\035" +
    "\u043c\001\002\000\006\003\ufffc\055\ufffc\001\002\000\004" +
    "\054\u044b\001\002\000\004\054\u043d\001\002\000\004\125" +
    "\u043e\001\002\000\014\125\u0441\131\u043f\132\u0440\133\u0442" +
    "\136\u0444\001\002\000\014\125\u0441\131\u043f\132\u0440\133" +
    "\u0442\136\u0444\001\002\000\014\125\u0441\131\u043f\132\u0440" +
    "\133\u0442\136\u0444\001\002\000\004\067\ufff7\001\002\000" +
    "\014\125\u0441\131\u043f\132\u0440\133\u0442\136\u0444\001\002" +
    "\000\004\067\u0446\001\002\000\014\125\u0441\131\u043f\132" +
    "\u0440\133\u0442\136\u0444\001\002\000\004\067\ufffb\001\002" +
    "\000\006\056\u043a\066\u0439\001\002\000\006\003\ufffd\055" +
    "\ufffd\001\002\000\004\067\ufff8\001\002\000\004\067\ufff9" +
    "\001\002\000\004\067\ufffa\001\002\000\004\125\u044c\001" +
    "\002\000\004\131\u044d\001\002\000\004\125\u044e\001\002" +
    "\000\004\067\u044f\001\002\000\006\056\u043a\066\u0439\001" +
    "\002\000\006\003\ufffe\055\ufffe\001\002\000\004\002\000" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u044f\000\004\002\005\001\001\000\002\001\001\000" +
    "\006\004\011\027\012\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\007\016\027\017\001" +
    "\001\000\002\001\001\000\006\004\013\027\012\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\007\021\027" +
    "\017\001\001\000\002\001\001\000\006\007\020\027\017" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\023" +
    "\u0403\001\001\000\002\001\001\000\004\015\u03fc\001\001" +
    "\000\004\013\u03f7\001\001\000\004\013\u03f2\001\001\000" +
    "\004\026\u03a6\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\u010d\001\001\000\004\013\277\001\001\000" +
    "\004\017\211\001\001\000\004\016\040\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\007\045" +
    "\027\017\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\022\056\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\016" +
    "\064\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\105\001\001\000" +
    "\004\012\132\001\001\000\004\012\131\001\001\000\004" +
    "\012\130\001\001\000\004\012\127\001\001\000\004\012" +
    "\126\001\001\000\004\012\125\001\001\000\004\012\124" +
    "\001\001\000\004\012\123\001\001\000\004\012\122\001" +
    "\001\000\004\012\121\001\001\000\004\012\120\001\001" +
    "\000\004\012\117\001\001\000\002\001\001\000\004\012" +
    "\114\001\001\000\004\012\113\001\001\000\004\012\112" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\016\116\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\022\135\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\016\140\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\016\146\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\076\157\001\001\000\004\076" +
    "\206\001\001\000\004\076\205\001\001\000\004\076\204" +
    "\001\001\000\004\076\203\001\001\000\004\076\202\001" +
    "\001\000\004\076\201\001\001\000\002\001\001\000\004" +
    "\076\176\001\001\000\004\076\175\001\001\000\004\076" +
    "\174\001\001\000\004\076\173\001\001\000\004\076\172" +
    "\001\001\000\004\076\171\001\001\000\004\076\170\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\016\200\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\007\216\027\017\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\021\231\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\017" +
    "\234\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\017\244\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\017\252\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\017\260\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\017\266\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\017\274\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\010" +
    "\300\001\001\000\002\001\001\000\004\010\344\001\001" +
    "\000\004\010\343\001\001\000\004\010\342\001\001\000" +
    "\004\010\341\001\001\000\004\010\340\001\001\000\004" +
    "\010\337\001\001\000\004\010\336\001\001\000\004\010" +
    "\335\001\001\000\002\001\001\000\004\010\333\001\001" +
    "\000\004\010\332\001\001\000\004\010\331\001\001\000" +
    "\004\010\330\001\001\000\004\010\327\001\001\000\004" +
    "\010\326\001\001\000\004\010\325\001\001\000\004\010" +
    "\324\001\001\000\004\010\323\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\007\347\027\017" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\021\357\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\362\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\370\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\376\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\020\u0103\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\u0106\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\u010c\001\001\000\002\001\001\000" +
    "\004\010\u010e\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\007\u0111\027\017\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\030\u011d\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\031\u0129" +
    "\032\u012c\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\030\u031e\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\031\u0254\032\u012c" +
    "\001\001\000\004\074\u023c\001\001\000\006\031\u023a\032" +
    "\u012c\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\047\u0146\001\001\000" +
    "\002\001\001\000\004\047\u0138\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\057\u0143\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\057\u013f\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\047\u0142\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\047\u0145\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\031\u014a\032\u012c\001\001\000\002\001" +
    "\001\000\004\042\u014e\001\001\000\004\043\u0231\001\001" +
    "\000\010\034\u0158\044\u015d\056\u022f\001\001\000\002\001" +
    "\001\000\004\043\u0152\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\043\u022c\001\001\000" +
    "\010\034\u0158\044\u015d\056\u0163\001\001\000\004\043\u0156" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\034\u022b\001\001\000\004\034\u022a\001\001" +
    "\000\004\034\u0229\001\001\000\004\034\u0228\001\001\000" +
    "\002\001\001\000\004\034\u0226\001\001\000\002\001\001" +
    "\000\004\034\u0171\001\001\000\004\034\u0170\001\001\000" +
    "\004\034\u016f\001\001\000\004\043\u016e\001\001\000\004" +
    "\034\u016d\001\001\000\004\034\u016c\001\001\000\004\034" +
    "\u016b\001\001\000\004\034\u016a\001\001\000\004\034\u0169" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\023\u01f0\001\001\000\002\001\001\000\004\015\u01c2" +
    "\001\001\000\004\013\u01c1\001\001\000\004\013\u01c0\001" +
    "\001\000\004\026\u018c\001\001\000\004\077\u0185\001\001" +
    "\000\004\013\u0180\001\001\000\004\013\u017f\001\001\000" +
    "\004\017\u017e\001\001\000\004\016\u017d\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\026" +
    "\u019b\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\021\u019e\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\026\u01a1\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\020\u01a4\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\026\u01a7\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\026\u01ad\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\026\u01b3\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\020\u01b6\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\026\u01b9\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\026\u01bf\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\015\u01d0\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\021\u01d3" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\015" +
    "\u01d6\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\015" +
    "\u01dc\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\015" +
    "\u01e2\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\020\u01e5\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\015\u01e8\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\015\u01ee\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\023\u0201\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\021\u0204\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\023\u0207\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\020\u020a\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\023\u020d\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\023\u0213\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\023\u0219\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\020\u021c\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\023\u021f\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\023\u0225\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\031\u022e\032\u012c\001\001\000" +
    "\002\001\001\000\004\043\u0230\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\033\u0233\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\076\u0236\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\031\u0239\032\u012c\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\060\u023f" +
    "\001\001\000\002\001\001\000\004\075\u0253\001\001\000" +
    "\002\001\001\000\004\075\u0246\001\001\000\002\001\001" +
    "\000\004\076\u0244\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\060\u0251\001\001\000\002" +
    "\001\001\000\004\060\u024f\001\001\000\004\060\u024d\001" +
    "\001\000\004\060\u024b\001\001\000\002\001\001\000\004" +
    "\075\u024c\001\001\000\002\001\001\000\004\075\u024e\001" +
    "\001\000\002\001\001\000\004\075\u0250\001\001\000\002" +
    "\001\001\000\004\075\u0252\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\036\u0259\066\u0256" +
    "\071\u0258\001\001\000\002\001\001\000\006\066\u0256\071" +
    "\u02e1\001\001\000\010\070\u02d0\072\u02cd\073\u02d1\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\036\u0261\066\u0256\071\u0258\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\u0260\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\032\u026b\041\u026e\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\032\u026b\041\u028d\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\035\u0274" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\032\u026b\041\u0273\001\001\000\002\001\001" +
    "\000\006\031\u0283\032\u012c\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\036\u0279\066\u0256" +
    "\071\u0258\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\032\u026b\041\u027e" +
    "\001\001\000\004\035\u027f\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\032\u026b\041\u0282\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\042\u0285\001\001\000" +
    "\002\001\001\000\006\032\u026b\041\u0287\001\001\000\002" +
    "\001\001\000\004\033\u0289\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\032\u026b\041\u028c\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\036\u028f\066\u0256\071" +
    "\u0258\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\032\u026b\041\u0294\001" +
    "\001\000\004\035\u0295\001\001\000\006\032\u026b\041\u0296" +
    "\001\001\000\002\001\001\000\010\036\u0298\066\u0256\071" +
    "\u0258\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\032\u026b\041\u029d\001" +
    "\001\000\006\032\u026b\041\u029e\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\032\u026b\041" +
    "\u02a2\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\037\u02a7\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\066\u02ab\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\040\u02b1\066\u02af\001\001\000\002" +
    "\001\001\000\006\040\u02b8\066\u02af\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\032\u026b\041\u02b6\001\001\000\006\032\u026b\041" +
    "\u02b7\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\067\u02bd\001\001\000\006\040\u02c2\066\u02af\001\001\000" +
    "\006\040\u02c1\066\u02af\001\001\000\006\040\u02c0\066\u02af" +
    "\001\001\000\002\001\001\000\006\040\u02bf\066\u02af\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\040\u02ca\066\u02af\001\001\000" +
    "\006\040\u02c9\066\u02af\001\001\000\006\040\u02c8\066\u02af" +
    "\001\001\000\006\040\u02c7\066\u02af\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\066\u02cc\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\066\u0256" +
    "\071\u02dc\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\036\u02d8\066\u0256\071\u0258\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\072\u02dd\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\036\u02e0\066\u0256\071\u0258\001\001" +
    "\000\002\001\001\000\010\070\u02d0\072\u02cd\073\u02e2\001" +
    "\001\000\002\001\001\000\006\066\u0256\071\u02ea\001\001" +
    "\000\006\066\u0256\071\u02e9\001\001\000\006\066\u0256\071" +
    "\u02e8\001\001\000\006\066\u0256\071\u02e7\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\050\u031d\001\001\000\002\001\001\000\004" +
    "\050\u02f1\001\001\000\002\001\001\000\006\060\u02f8\062" +
    "\u02f9\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\061\u0302" +
    "\001\001\000\004\061\u02fb\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\060\u02fe\001\001\000\002\001\001" +
    "\000\004\061\u02ff\001\001\000\002\001\001\000\004\050" +
    "\u0301\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\063\u0305\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\076\u0307\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\063\u030a\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\063\u030d\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\063\u0310\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\061\u0317\001\001\000" +
    "\002\001\001\000\004\063\u0319\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\050\u031c\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\045\u0345" +
    "\001\001\000\002\001\001\000\004\045\u0324\001\001\000" +
    "\002\001\001\000\004\052\u0327\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\053\u0342\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\040\u0340" +
    "\066\u02af\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\053\u0335\001\001\000\004\052\u033e" +
    "\001\001\000\002\001\001\000\004\052\u033a\001\001\000" +
    "\004\052\u0338\001\001\000\004\052\u0336\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\053\u0337\001\001\000" +
    "\002\001\001\000\004\053\u0339\001\001\000\002\001\001" +
    "\000\004\053\u033b\001\001\000\002\001\001\000\004\045" +
    "\u033d\001\001\000\002\001\001\000\004\053\u033f\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\045\u0344\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\051\u0361\001\001\000\002\001" +
    "\001\000\004\051\u034b\001\001\000\002\001\001\000\006" +
    "\066\u0256\071\u034d\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\065\u0350\001\001\000\002\001\001\000\004" +
    "\064\u0358\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\064\u0353\001\001\000\004\065\u0357\001\001\000\004" +
    "\064\u0355\001\001\000\004\065\u0356\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\065\u035c\001\001\000\004" +
    "\064\u035a\001\001\000\004\065\u035b\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\051\u035e\001\001\000\002" +
    "\001\001\000\004\051\u0360\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\036\u0363\066\u0256\071\u0258\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\032\u026b\041\u0368\001\001\000\006" +
    "\031\u0369\032\u012c\001\001\000\002\001\001\000\004\046" +
    "\u038d\001\001\000\002\001\001\000\004\046\u036f\001\001" +
    "\000\002\001\001\000\004\054\u0375\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\040\u0389\066\u02af\001\001\000" +
    "\004\055\u037a\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\054\u0387\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\054\u0383\001\001\000\004\054\u0381\001\001" +
    "\000\004\054\u037f\001\001\000\002\001\001\000\004\055" +
    "\u0380\001\001\000\002\001\001\000\004\055\u0382\001\001" +
    "\000\002\001\001\000\004\055\u0384\001\001\000\002\001" +
    "\001\000\004\046\u0386\001\001\000\002\001\001\000\004" +
    "\055\u0388\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\046\u038c\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\037\u038f\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\040\u0393" +
    "\066\u02af\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\032\u026b\041\u0398" +
    "\001\001\000\006\031\u0399\032\u012c\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\031\u039d" +
    "\032\u012c\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\031\u03a1\032\u012c\001\001\000\004" +
    "\030\u03a2\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\025\u03a8\027\u03a9" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\025" +
    "\u03aa\027\u03a9\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\007\u03ad\027\017\001\001\000\002\001\001\000" +
    "\004\023\u03ed\001\001\000\004\015\u03e8\001\001\000\002" +
    "\001\001\000\004\013\u03e1\001\001\000\004\013\u03d4\001" +
    "\001\000\004\026\u03cf\001\001\000\002\001\001\000\004" +
    "\013\u03ca\001\001\000\004\013\u03c5\001\001\000\004\017" +
    "\u03bf\001\001\000\004\016\u03b9\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\025\u03be\027\u03a9\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\025\u03c4\027\u03a9\001\001\000\002\001\001" +
    "\000\004\010\u03c6\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\025\u03c9\027\u03a9\001\001\000\002\001\001" +
    "\000\004\010\u03cb\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\025\u03ce\027\u03a9\001\001\000\002\001\001" +
    "\000\006\025\u03d0\027\u03a9\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\025\u03d3\027\u03a9\001\001\000\002" +
    "\001\001\000\004\014\u03d6\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\025\u03d9\027\u03a9" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\010\u03dd\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\014\u03e0\001\001\000\002\001\001\000" +
    "\004\010\u03e2\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\025\u03e5\027\u03a9\001\001\000\002\001\001\000" +
    "\006\025\u03e7\027\u03a9\001\001\000\002\001\001\000\004" +
    "\010\u03e9\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\025\u03ec\027\u03a9\001\001\000\002\001\001\000\004" +
    "\010\u03ee\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\025\u03f1\027\u03a9\001\001\000\002\001\001\000\004" +
    "\014\u03f3\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\007\u03f6\027\017\001\001\000\002\001\001\000\004" +
    "\010\u03f8\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\007\u03fb\027\017\001\001\000\002\001\001\000\004" +
    "\010\u03fd\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\007\u0400\027\017\001\001\000\002\001\001\000\006" +
    "\007\u0402\027\017\001\001\000\002\001\001\000\004\010" +
    "\u0404\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\007\u0407\027\017\001\001\000\002\001\001\000\004\024" +
    "\u0434\001\001\000\002\001\001\000\006\006\u040b\027\u040d" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\006" +
    "\u040e\027\u040d\001\001\000\002\001\001\000\004\011\u0419" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\010" +
    "\u0413\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\006\u0416\027\u040d\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\012\u041f\001\001\000\002\001\001\000\004\011\u0421" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\006\u0426\027\u040d\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\024\u042b\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\007\u042c" +
    "\027\017\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\020\u0430\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\024\u0433\001\001\000\002\001" +
    "\001\000\006\007\u0435\027\017\001\001\000\002\001\001" +
    "\000\004\003\u0437\001\001\000\006\004\u0450\027\012\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\005\u0442\001" +
    "\001\000\004\005\u0449\001\001\000\004\005\u0448\001\001" +
    "\000\002\001\001\000\004\005\u0447\001\001\000\002\001" +
    "\001\000\004\005\u0444\001\001\000\002\001\001\000\004" +
    "\003\u0446\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\003" +
    "\u044f\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    //declaracion de variables
    private int filaErr = 0, columnErr = 0;
    private String datErr = "", varIdFor = "", lexErr = "", idCaptcha = "", namehtml = "", captchaCreado = "";
    private String varscriptGlobal = "<script> \n", linkRedirigir = "";
    private List<String> errorSintactico;
    private List<String> errorSemantico;
    private List<String> listIdEtiqueta;
    private List<String> listIdVar;
    private List<LexemeId> ListTablaSimbol;
    private EtiquetaId etiquetaId;
    private TablaSimbolo tablaSimbolo;
    private String parInput = "style=\"";
    private String parShipsp = "style=\"";
    private String parDiv = "style=\"";
    private int parId = 0, parName = 0;
    int asd;

    public Parser(Lexico lex) {
        super(lex);

        this.errorSintactico = new ArrayList();
        this.errorSemantico = new ArrayList();
        this.listIdEtiqueta = lex.getListIdEtiqueta();
        this.listIdVar = lex.getListIdVar();
        this.ListTablaSimbol = new ArrayList();
        this.etiquetaId = new EtiquetaId();
        this.tablaSimbolo = new TablaSimbolo();
      
    }


//recuperacion de errroes
    public void report_error(String message, Object info) {
		System.out.println("reporterror");
	}
	public void report_fatal_error(String message, Object info) {
		System.out.println("reportfatal");
	}
	public void report_fatal_error(Symbol cur) {
		System.out.println("unrecovered_syntax_error");
	}
    
    @Override
    public void syntax_error(Symbol st) {
       Token token = (Token) st.value;
      
        if(token.getLexema().compareTo("id") == 0 || token.getLexema().compareTo("integer") == 0 || token.getLexema().compareTo("string") == 0 
            || token.getLexema().compareTo("char") == 0 || token.getLexema().compareTo("decimal") == 0 || token.getLexema().compareTo("boolean") == 0
            || token.getLexema().compareTo("INSERT") == 0 || token.getLexema().compareTo("ALERT_INFO") == 0) {
                errorSintactico.add(String.format("Error Sintactico lexema: %s  linea: %d  columna: %d. no se esperaba ese lexema. es posible que falta un punto y coma o la instruccion INIT {: ", token.getLexema(), token.getLine(), token.getColumna()));
                System.out.println("err: " + token.getLexema() + " no se esperaba este lexema - linea: " + token.getLine() + ", columna: " + token.getColumna() + " es posible que falta un punto y coma. ");

        } else if (token.getLexema().compareTo("ELSE") == 0 || token.getLexema().compareTo("WHILE") == 0 || token.getLexema().compareTo("IF") == 0 
            || token.getLexema().compareTo("REPEAT") == 0 ) {
                errorSintactico.add(String.format("Error Sintactico lexema: %s  linea: %d  columna: %d. no se esperaba ese lexema. es posible que falta puntocoma o  END o INIT  ", token.getLexema(), token.getLine(), token.getColumna()));
                System.out.println("err: " + token.getLexema() + " no se esperaba este lexema - linea: " + token.getLine() + ", columna: " + token.getColumna() + " es posible que falta un punto y coma. ");

        } else {
                errorSintactico.add(String.format("Error Sintactico lexema: %s  linea: %d  columna: %d. no se esperaba ese token. (verificar toda la linea)", token.getLexema(), token.getLine(), token.getColumna()));
             
        //report_error("Error Sintactico con el  Token:"+ token.getLexema()+" este no pertenece a la estructura - linea: "+token.getLine()+" - columna: "+token.getColumna() + "\n",null);

        System.out.println("err: " + token.getLexema() + " este no pertenece a la estructura - linea: " + token.getLine() + ", columna: " + token.getColumna());
       // errorSintactico.add(String.format("Error Sintactico lexema: %s  linea: %d  columna: %d. no se esperaba ese token.", token.getLexema(), token.getLine(), token.getColumna()));
        }
    }

    protected int error_sync_size() {
		return 1;
	}
    public List<String> getErrorSintactico(){
	        return errorSintactico;
	    }
        public List<String> getErroSemantico(){
	        return errorSemantico;
	    }
        public String getCaptchaCreado(){
            return captchaCreado;
        }

        public String getIdCaptcha(){
            return idCaptcha;
        }

        public String getLinkRedirigir() {
            return linkRedirigir;
        }

    public List<LexemeId> getListTablaSimbol(){
	        return ListTablaSimbol;
    }

 

/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= exp_ini EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // exp_ini ::= MEQ HTML par_html exp_head 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 captchaCreado += etiquetaId.scriptLinkRedirigir(linkRedirigir) + etiquetaId.getFuncionEspecial() +"\n<HTML  " + tp.toString() + "\n" + varscriptGlobal + "\n</script>\n"+ n.toString();
                                                  System.out.println("vx " + captchaCreado);       
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_ini",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // exp_ini ::= error exp_head 
            {
              Object RESULT =null;
		System.out.println("error html en inicio");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_ini",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // par_html ::= CORIN IDCM IGUAL COMILLA ID COMILLA COROUT par_html 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Token i = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 idCaptcha = i.getLexema(); parId++;                                                
                                                                        if(parId > 1){errorSemantico.add("error semantico, aparece 2 veces el parametro id en la etiqueta htm");}  
                                                                        RESULT = "  id=\"" + i.getLexema() + "\"  " + n.toString();
                                                                     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("par_html",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // par_html ::= CORIN NAME IGUAL COMILLA exp_name COROUT par_html 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 namehtml =  i.toString(); parName++; 
                                                                     if(parName > 1){errorSemantico.add("error semantico, aparece 2 veces el parametro name en la etiqueta htm");}  
                                                                    RESULT = "  name=\"" + i.toString() + "\"  " + n.toString();
                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("par_html",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // par_html ::= MAQ 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = a.getLexema(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("par_html",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // exp_name ::= CADENA exp_name 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema()+" " + n.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_name",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // exp_name ::= ID exp_name 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema()+" " + n.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_name",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // exp_name ::= NUMENTERO exp_name 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema()+" " + n.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_name",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // exp_name ::= NUMDECIMAL exp_name 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema()+" " + n.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_name",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // exp_name ::= COMILLA 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_name",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // exp_head ::= MEQ HEAD MAQ par_head MEQ BODY par_body exp_contenido 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		   RESULT = "<head> "+ tp.toString() + "  \n<body "+ n.toString() + " \n " +e.toString() ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_head",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // exp_head ::= exp_script exp_head 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.toString()+" " + n.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_head",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // exp_head ::= MEQ BODY par_body exp_contenido 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = "<body "+ tp.toString() + "  "+ n.toString() ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_head",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // exp_head ::= error exp_contenido 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_head",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // par_head ::= MEQ TITLE MAQ exp_cadenatext TITLE MAQ par_head 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = "<title> "+ tp.toString() + "title>  "+ n.toString() ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("par_head",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // par_head ::= MEQ LINK par_link MEQ DIVISION LINK MAQ par_head 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = "<link "+ tp.toString() + "</link>  "+ n.toString() ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("par_head",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // par_head ::= MEQ DIVISION HEAD MAQ 
            {
              Object RESULT =null;
		RESULT = " </head> "; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("par_head",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // par_head ::= exp_script par_head 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.toString()+" " + n.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("par_head",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // par_body ::= CORIN BACKGROUND IGUAL COMILLA par_color COMILLA COROUT par_body 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = "  BgColOr=" + tp.getLexema() + n.toString() + e.getLexema() + e1.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("par_body",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // par_body ::= MAQ 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema() + " "; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("par_body",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // par_link ::= CORIN REFERENCIA IGUAL COMILLA exp_links COROUT par_link 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 linkRedirigir = "\"" + n.toString(); RESULT = " href=" +tp.getLexema() + n.toString() + " " + e.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("par_link",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // par_link ::= MAQ 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema() + " "; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("par_link",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // exp_links ::= ID exp_links 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema() + n.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_links",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // exp_links ::= DOSP exp_links 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema() + n.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_links",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // exp_links ::= DIVISION exp_links 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema() + n.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_links",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // exp_links ::= CADENA exp_links 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema() + n.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_links",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // exp_links ::= IGUAL exp_links 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema() + n.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_links",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // exp_links ::= NUMENTERO exp_links 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema() + n.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_links",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // exp_links ::= AND exp_links 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema() + n.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_links",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // exp_links ::= NUMDECIMAL exp_links 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema() + n.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_links",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // exp_links ::= SUMA exp_links 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema() + n.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_links",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // exp_links ::= PRODUCTO exp_links 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema() + n.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_links",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // exp_links ::= RESTA exp_links 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema() + n.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_links",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // exp_links ::= PARIN exp_links 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema() + n.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_links",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // exp_links ::= PAROUT exp_links 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema() + n.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_links",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // exp_links ::= COMA exp_links 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema() + n.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_links",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // exp_links ::= HEXADECIMAL exp_links 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema() + n.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_links",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // exp_links ::= COMILLA 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_links",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // exp_contenido ::= MEQ SPAM parm_shisp exp_cadenatext SPAM MAQ exp_contenido 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  String styl = parShipsp + "\"  "; parShipsp = "style=\"";   RESULT = "\n<spam "+ styl + tp.toString()+" " + n.toString() + "spam>  " + e.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_contenido",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // exp_contenido ::= MEQ SELECTED parm_shisp exp_opciones SELECTED MAQ exp_contenido 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  String styl = parShipsp + "\"  "; parShipsp = "style=\"";   RESULT = "\n<select "+ styl + tp.toString()+" " + n.toString() + "select>  " + e.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_contenido",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // exp_contenido ::= MEQ H1 parm_shisp exp_cadenatext H1 MAQ exp_contenido 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  String styl = parShipsp + "\"  "; parShipsp = "style=\"";   RESULT = "\n<h1 "+ styl + tp.toString()+" " + n.toString() + "h1>  " + e.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_contenido",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // exp_contenido ::= MEQ P parm_shisp exp_cadenatext P MAQ exp_contenido 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  String styl = parShipsp + "\"  "; parShipsp = "style=\"";   RESULT = "\n<p "+ styl + tp.toString()+" " + n.toString() + "p>  " + e.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_contenido",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // exp_contenido ::= MEQ BR MAQ exp_contenido 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = "\n<br> " + tp.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_contenido",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // exp_contenido ::= MEQ INPUT parm_input exp_cadenatext INPUT MAQ exp_contenido 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  String styl = parInput + "\"  "; parInput = "style=\"";   RESULT = "\n<input "+ styl + tp.toString()+" " + n.toString() + "input>  " + e.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_contenido",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // exp_contenido ::= MEQ IMG parm_image MEQ DIVISION IMG MAQ exp_contenido 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  String styl = "\"\"  "; parInput = "style=\"";   RESULT = "\n<img "+ styl + tp.toString()+" " + "</img>  " + e.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_contenido",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // exp_contenido ::= MEQ TEXTAREA par_areatext MEQ DIVISION TEXTAREA MAQ exp_contenido 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  String styl = parInput + "\"  "; parInput = "style=\"";   RESULT = "\n<textarea "+ styl + tp.toString()+" " +  "textarea>  " + e.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_contenido",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // exp_contenido ::= MEQ DIV par_div contenido_div DIV MAQ exp_contenido 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  String styl = parDiv + "\"  "; parDiv = "style=\"";   RESULT = "\n<div "+ styl + tp.toString()+" " + n.toString() + "  " + e.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_contenido",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // exp_contenido ::= MEQ BUTTON par_button exp_cadenatext BUTTON MAQ exp_contenido 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  String styl = parInput + "\"  "; parInput = "style=\"";   RESULT = "\n<button "+ styl + tp.toString()+" " + n.toString() + "button>  " + e.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_contenido",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // exp_contenido ::= exp_script exp_contenido 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.toString()+" \n" + n.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_contenido",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // exp_contenido ::= MEQ DIVISION BODY MAQ MEQ DIVISION HTML MAQ 
            {
              Object RESULT =null;
		    RESULT = "\n </body> \n</html>"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_contenido",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // exp_contenido ::= MEQ DIVISION HTML MAQ 
            {
              Object RESULT =null;
		    RESULT = "\n</html>"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_contenido",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // exp_contenido ::= error exp_contenido 
            {
              Object RESULT =null;
		System.out.println("error sintactico"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_contenido",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // contenido_div ::= MEQ SPAM parm_shisp exp_cadenatext SPAM MAQ contenido_div 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  String styl = parInput + "\"  "; parInput = "style=\"";   RESULT = "\n<spam "+ styl + tp.toString()+" " + n.toString() + "spam>  " + e.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_div",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // contenido_div ::= MEQ SELECTED parm_shisp exp_opciones SELECTED MAQ contenido_div 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  String styl = parInput + "\"  "; parInput = "style=\"";   RESULT = "\n<select "+ styl + tp.toString()+" " + n.toString() + "select>  " + e.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_div",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // contenido_div ::= MEQ H1 parm_shisp exp_cadenatext H1 MAQ contenido_div 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  String styl = parInput + "\"  "; parInput = "style=\"";   RESULT = "\n<h1 "+ styl + tp.toString()+" " + n.toString() + "h1>  " + e.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_div",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // contenido_div ::= MEQ P parm_shisp exp_cadenatext P MAQ contenido_div 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  String styl = parInput + "\"  "; parInput = "style=\"";   RESULT = "\n<p "+ styl + tp.toString()+" " + n.toString() + "p>  " + e.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_div",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // contenido_div ::= MEQ BR MAQ contenido_div 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = "\n<br> " + tp.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_div",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // contenido_div ::= MEQ INPUT parm_input exp_cadenatext INPUT MAQ contenido_div 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  String styl = parInput + "\"  "; parInput = "style=\"";   RESULT = "\n<input "+ styl + tp.toString()+" " + n.toString() + "input>  " + e.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_div",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // contenido_div ::= MEQ IMG parm_image MEQ DIVISION IMG MAQ contenido_div 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  String styl =   "\"\"  "; parInput = "style=\"";   RESULT = "\n<img "+ styl + tp.toString()+" " + "</img>  " + e.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_div",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // contenido_div ::= MEQ TEXTAREA par_areatext MEQ DIVISION TEXTAREA MAQ contenido_div 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  String styl = parInput + "\"  "; parInput = "style=\"";   RESULT = "\n<textarea "+ styl + tp.toString()+" " +  "textarea>  " + e.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_div",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // contenido_div ::= MEQ BUTTON par_button exp_cadenatext BUTTON MAQ contenido_div 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  String styl = parInput + "\"  "; parInput = "style=\"";   RESULT = "\n<button "+ styl + tp.toString()+" " + n.toString() + "button>  " + e.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_div",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // contenido_div ::= exp_script contenido_div 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.toString()+" " + n.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_div",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // contenido_div ::= MEQ DIV par_div contenido_div DIV MAQ contenido_div 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  String styl = parDiv + "\"  "; parDiv = "style=\"";   RESULT = "\n<div "+ styl + tp.toString()+" " + n.toString() + "  " + e.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_div",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // contenido_div ::= MEQ DIVISION 
            {
              Object RESULT =null;
		RESULT = "\n </div>"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_div",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // par_div ::= CORIN IDCM IGUAL COMILLA ID COMILLA COROUT par_div 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = "  id=\"" + tp.getLexema() + "\"  " + n.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("par_div",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // par_div ::= CORIN ALINGN IGUAL COMILLA ID COMILLA COROUT par_div 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if(tp.getLexema().equalsIgnoreCase("center") || tp.getLexema().equalsIgnoreCase("left") || tp.getLexema().equalsIgnoreCase("rigth") || tp.getLexema().equals("justificar"))
                                                                                    { parDiv += " text-align: " + tp.getLexema() + "; ";    RESULT = "  " + n.toString(); }
                                                                                    else { errorSintactico.add(String.format("Error Sintactico lexema: %s  linea: %d  columna: %d. no se esperaba ese token, se esperaba un atributo de type, text, number, etc", tp.getLexema(), tp.getLine(), tp.getColumna())); 
                                                                                    parDiv += " text-align: " + tp.getLexema() + "; ";    RESULT = "  " + n.toString(); } 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("par_div",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // par_div ::= CORIN COLOR IGUAL COMILLA par_color COMILLA COROUT par_div 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 parDiv += " color: " + tp.toString() + "; ";    RESULT = "  " + n.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("par_div",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // par_div ::= CORIN FONTFY IGUAL COMILLA ID COMILLA COROUT par_div 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if(tp.getLexema().equalsIgnoreCase("courier") || tp.getLexema().equalsIgnoreCase("Arial") || tp.getLexema().equalsIgnoreCase("Geneva") || tp.getLexema().equals("sans-serif"))
                                                                                    { parDiv += " font-family: " + tp.getLexema() + "; ";    RESULT = "  " + n.toString(); }
                                                                                    else { errorSintactico.add(String.format("Error Sintactico lexema: %s  linea: %d  columna: %d. no se esperaba ese token, se esperaba un atributo de type, text, number, etc", tp.getLexema(), tp.getLine(), tp.getColumna())); 
                                                                                    parDiv += " font-family: " + tp.getLexema() + "; ";    RESULT = "  " + n.toString(); } 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("par_div",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // par_div ::= CORIN FONTSZ IGUAL COMILLA par_fontsize COMILLA COROUT par_div 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 parDiv += " font-size: " + tp.toString() + "; ";    RESULT = "  " + n.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("par_div",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // par_div ::= CORIN BACKGROUND IGUAL COMILLA par_color COMILLA COROUT par_div 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 parDiv += " background: " + tp.toString() + "; ";    RESULT = "  " + n.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("par_div",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // par_div ::= CORIN CLASE IGUAL COMILLA ID COMILLA COROUT par_div 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if(tp.getLexema().equals("row") || tp.getLexema().equals("column") )
                                                                                    { parDiv += " class: " + tp.getLexema() + "; ";    RESULT = "  " + n.toString(); }
                                                                                    else { errorSintactico.add(String.format("Error Sintactico lexema: %s  linea: %d  columna: %d. no se esperaba ese token, se esperaba un atributo de type, text, number, etc", tp.getLexema(), tp.getLine(), tp.getColumna())); 
                                                                                    parDiv += " class: " + tp.getLexema() + "; ";    RESULT = "  " + n.toString(); } 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("par_div",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // par_div ::= MAQ 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("par_div",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // par_button ::= CORIN IDCM IGUAL COMILLA ID COMILLA COROUT par_button 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = "  id=\"" + tp.getLexema() + "\"  " + n.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("par_button",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // par_button ::= CORIN ALINGN IGUAL COMILLA ID COMILLA COROUT par_button 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if(tp.getLexema().equalsIgnoreCase("center") || tp.getLexema().equalsIgnoreCase("left") || tp.getLexema().equalsIgnoreCase("rigth") || tp.getLexema().equals("justificar"))
                                                                                        { parInput += " text-align: " + tp.getLexema() + "; ";    RESULT = "  " + n.toString(); }
                                                                                        else { errorSintactico.add(String.format("Error Sintactico lexema: %s  linea: %d  columna: %d. no se esperaba ese token, se esperaba un atributo de type, text, number, etc", tp.getLexema(), tp.getLine(), tp.getColumna())); 
                                                                                        parInput += " text-align: " + tp.getLexema() + "; ";    RESULT = "  " + n.toString(); } 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("par_button",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // par_button ::= CORIN COLOR IGUAL COMILLA par_color COMILLA COROUT par_button 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 parInput += " color: " + tp.toString() + "; ";    RESULT = "  " + n.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("par_button",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // par_button ::= CORIN FONTFY IGUAL COMILLA ID COMILLA COROUT par_button 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if(tp.getLexema().equalsIgnoreCase("courier") || tp.getLexema().equalsIgnoreCase("Arial") || tp.getLexema().equalsIgnoreCase("Geneva") || tp.getLexema().equals("sans-serif"))
                                                                                        { parInput += " font-family: " + tp.getLexema() + "; ";    RESULT = "  " + n.toString(); }
                                                                                         else { errorSintactico.add(String.format("Error Sintactico lexema: %s  linea: %d  columna: %d. no se esperaba ese token, se esperaba un atributo de type, text, number, etc", tp.getLexema(), tp.getLine(), tp.getColumna())); 
                                                                                        parInput += " font-family: " + tp.getLexema() + "; ";    RESULT = "  " + n.toString(); } 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("par_button",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // par_button ::= CORIN FONTSZ IGUAL COMILLA par_fontsize COMILLA COROUT par_button 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 parInput += " font-size: " + tp.toString() + "; ";    RESULT = "  " + n.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("par_button",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // par_button ::= CORIN BACKGROUND IGUAL COMILLA par_color COMILLA COROUT par_button 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 parInput += " background: " + tp.toString() + "; ";    RESULT = "  " + n.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("par_button",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // par_button ::= CORIN ONCLICK IGUAL COMILLA PROCESOS PARIN PAROUT COMILLA COROUT par_button 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = "  onclick=\"" + tp.getLexema() + "();\"  " + n.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("par_button",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // par_button ::= MAQ 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("par_button",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // par_areatext ::= CORIN IDCM IGUAL COMILLA ID COMILLA COROUT par_areatext 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = "  id=\"" + tp.getLexema() + "\"  " + n.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("par_areatext",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // par_areatext ::= CORIN COLUMNA IGUAL COMILLA NUMENTERO COMILLA COROUT par_areatext 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = "  cols=\"" + tp.getLexema() + "\"  " + n.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("par_areatext",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // par_areatext ::= CORIN FILA IGUAL COMILLA NUMENTERO COMILLA COROUT par_areatext 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = "  rows=\"" + tp.getLexema() + "\"  " + n.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("par_areatext",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // par_areatext ::= CORIN ALINGN IGUAL COMILLA ID COMILLA COROUT par_areatext 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if(tp.getLexema().equalsIgnoreCase("center") || tp.getLexema().equalsIgnoreCase("left") || tp.getLexema().equalsIgnoreCase("rigth") || tp.getLexema().equals("justificar"))
                                                                                    { parInput += " text-align: " + tp.getLexema() + "; ";    RESULT = "  " + n.toString(); }
                                                                                    else { errorSintactico.add(String.format("Error Sintactico lexema: %s  linea: %d  columna: %d. no se esperaba ese token, se esperaba un atributo de type, text, number, etc", tp.getLexema(), tp.getLine(), tp.getColumna())); 
                                                                                    parInput += " text-align: " + tp.getLexema() + "; ";    RESULT = "  " + n.toString(); } 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("par_areatext",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // par_areatext ::= CORIN FONTFY IGUAL COMILLA ID COMILLA COROUT par_areatext 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if(tp.getLexema().equalsIgnoreCase("courier") || tp.getLexema().equalsIgnoreCase("Arial") || tp.getLexema().equalsIgnoreCase("Geneva") || tp.getLexema().equals("sans-serif"))
                                                                                    { parInput += " font-family: " + tp.getLexema() + "; ";    RESULT = "  " + n.toString(); }
                                                                                    else { errorSintactico.add(String.format("Error Sintactico lexema: %s  linea: %d  columna: %d. no se esperaba ese token, se esperaba un atributo de type, text, number, etc", tp.getLexema(), tp.getLine(), tp.getColumna())); 
                                                                                    parInput += " font-family: " + tp.getLexema() + "; ";    RESULT = "  " + n.toString(); } 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("par_areatext",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // par_areatext ::= CORIN FONTSZ IGUAL COMILLA par_fontsize COMILLA COROUT par_areatext 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 parInput += " font-size: " + tp.toString() + "; ";    RESULT = "  " + n.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("par_areatext",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // par_areatext ::= MAQ 
            {
              Object RESULT =null;
		RESULT = "> </"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("par_areatext",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // parm_shisp ::= CORIN IDCM IGUAL COMILLA ID COMILLA COROUT parm_shisp 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = "  id=\"" + tp.getLexema() + "\"  " + n.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parm_shisp",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // parm_shisp ::= CORIN COLOR IGUAL COMILLA par_color COMILLA COROUT parm_shisp 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		     RESULT = "  " + n.toString(); parShipsp += " color: " + tp.toString() + "; "; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parm_shisp",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // parm_shisp ::= CORIN ALINGN IGUAL COMILLA ID COMILLA COROUT parm_shisp 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if(tp.getLexema().equalsIgnoreCase("center") || tp.getLexema().equalsIgnoreCase("left") || tp.getLexema().equalsIgnoreCase("rigth") || tp.getLexema().equals("justificar"))
                                                                                {     RESULT = "  " + n.toString();  parShipsp += " text-align: " + tp.getLexema() + "; "; }
                                                                                else { errorSintactico.add(String.format("Error Sintactico lexema: %s  linea: %d  columna: %d. no se esperaba ese token, se esperaba un atributo de type, text, number, etc", tp.getLexema(), tp.getLine(), tp.getColumna())); 
                                                                                    RESULT = "  " + n.toString(); }  parShipsp += " text-align: " + tp.getLexema() + "; ";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parm_shisp",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // parm_shisp ::= CORIN FONTFY IGUAL COMILLA ID COMILLA COROUT parm_shisp 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if(tp.getLexema().equalsIgnoreCase("courier") || tp.getLexema().equalsIgnoreCase("Arial") || tp.getLexema().equalsIgnoreCase("Geneva") || tp.getLexema().equals("sans-serif"))
                                                                                {     RESULT = "  " + n.toString(); parShipsp += " font-family: " + tp.getLexema() + "; "; }
                                                                                else { errorSintactico.add(String.format("Error Sintactico lexema: %s  linea: %d  columna: %d. no se esperaba ese token, se esperaba un atributo de type, text, number, etc", tp.getLexema(), tp.getLine(), tp.getColumna())); 
                                                                                    RESULT = "  " + n.toString(); }  parShipsp += " font-family: " + tp.getLexema() + "; "; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parm_shisp",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // parm_shisp ::= CORIN FONTSZ IGUAL COMILLA par_fontsize COMILLA COROUT parm_shisp 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		    RESULT = "  " + n.toString();  parShipsp += " font-size: " + tp.toString() + "; ";  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parm_shisp",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // parm_shisp ::= MAQ 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parm_shisp",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // parm_input ::= CORIN IDCM IGUAL COMILLA ID COMILLA COROUT parm_input 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = "  id=\"" + tp.getLexema() + "\"  " + n.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parm_input",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // parm_input ::= CORIN TYPE IGUAL COMILLA ID COMILLA COROUT parm_input 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if(tp.getLexema().equals("text") || tp.getLexema().equals("number") || tp.getLexema().equals("radio") || tp.getLexema().equals("checkbox"))
                                                                                { RESULT = "  type=\"" + tp.getLexema() + "\"  " + n.toString(); }
                                                                                else { errorSintactico.add(String.format("Error Sintactico lexema: %s  linea: %d  columna: %d. no se esperaba ese token, se esperaba un atributo de type, text, number, etc", tp.getLexema(), tp.getLine(), tp.getColumna())); 
                                                                                RESULT = "  type=\"text\"  " + n.toString(); } 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parm_input",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // parm_input ::= CORIN COLOR IGUAL COMILLA par_color COMILLA COROUT parm_input 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 parInput += " color: " + tp.toString() + "; ";    RESULT = "  " + n.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parm_input",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // parm_input ::= CORIN ALINGN IGUAL COMILLA ID COMILLA COROUT parm_input 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if(tp.getLexema().equalsIgnoreCase("center") || tp.getLexema().equalsIgnoreCase("left") || tp.getLexema().equalsIgnoreCase("rigth") || tp.getLexema().equals("justificar"))
                                                                                { parInput += " text-align: " + tp.getLexema() + "; ";    RESULT = "  " + n.toString(); }
                                                                                else { errorSintactico.add(String.format("Error Sintactico lexema: %s  linea: %d  columna: %d. no se esperaba ese token, se esperaba un atributo de type, text, number, etc", tp.getLexema(), tp.getLine(), tp.getColumna())); 
                                                                                parInput += " text-align: " + tp.getLexema() + "; ";    RESULT = "  " + n.toString(); } 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parm_input",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // parm_input ::= CORIN FONTFY IGUAL COMILLA ID COMILLA COROUT parm_input 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if(tp.getLexema().equalsIgnoreCase("courier") || tp.getLexema().equalsIgnoreCase("Arial") || tp.getLexema().equalsIgnoreCase("Geneva") || tp.getLexema().equals("sans-serif"))
                                                                                { parInput += " font-family: " + tp.getLexema() + "; ";    RESULT = "  " + n.toString(); }
                                                                                else { errorSintactico.add(String.format("Error Sintactico lexema: %s  linea: %d  columna: %d. no se esperaba ese token, se esperaba un atributo de type, text, number, etc", tp.getLexema(), tp.getLine(), tp.getColumna())); 
                                                                                parInput += " font-family: " + tp.getLexema() + "; ";    RESULT = "  " + n.toString(); } 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parm_input",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // parm_input ::= CORIN FONTSZ IGUAL COMILLA par_fontsize COMILLA COROUT parm_input 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 parInput += " font-size: " + tp.toString() + "; ";    RESULT = "  " + n.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parm_input",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // parm_input ::= MAQ 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parm_input",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // parm_image ::= CORIN IDCM IGUAL COMILLA ID COMILLA COROUT parm_image 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = "  id=\"" + tp.getLexema() + "\"  " + n.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parm_image",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // parm_image ::= CORIN SRC IGUAL COMILLA exp_links COROUT parm_image 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = "  src=\"" + tp.toString() + " " + n.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parm_image",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // parm_image ::= CORIN ALT IGUAL COMILLA text_string COROUT parm_image 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = "  alt=\"" + tp.toString() + " " + n.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parm_image",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // parm_image ::= CORIN WIDTH IGUAL COMILLA par_heigtwith COMILLA COROUT parm_image 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = "  width=\"" + tp.toString() + "\"  " + n.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parm_image",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // parm_image ::= CORIN HEIGHT IGUAL COMILLA par_heigtwith COMILLA COROUT parm_image 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = "  height=\"" + tp.toString() + "\"  " + n.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parm_image",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // parm_image ::= MAQ 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parm_image",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // exp_cadenatext ::= CADENA exp_cadenatext 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema()+" " + n.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_cadenatext",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // exp_cadenatext ::= ID exp_cadenatext 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema()+" " + n.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_cadenatext",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // exp_cadenatext ::= NUMENTERO exp_cadenatext 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema()+" " + n.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_cadenatext",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // exp_cadenatext ::= NUMDECIMAL exp_cadenatext 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema()+" " + n.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_cadenatext",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // exp_cadenatext ::= HEXADECIMAL exp_cadenatext 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema()+" " + n.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_cadenatext",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // exp_cadenatext ::= SUMA exp_cadenatext 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema()+" " + n.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_cadenatext",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // exp_cadenatext ::= RESTA exp_cadenatext 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema()+" " + n.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_cadenatext",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // exp_cadenatext ::= PRODUCTO exp_cadenatext 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema()+" " + n.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_cadenatext",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // exp_cadenatext ::= AND exp_cadenatext 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema()+" " + n.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_cadenatext",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // exp_cadenatext ::= OR exp_cadenatext 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema()+" " + n.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_cadenatext",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // exp_cadenatext ::= NOT exp_cadenatext 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema()+" " + n.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_cadenatext",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // exp_cadenatext ::= DIVISION exp_cadenatext 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema()+" " + n.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_cadenatext",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // exp_cadenatext ::= DOSP exp_cadenatext 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema()+" " + n.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_cadenatext",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // exp_cadenatext ::= COMA exp_cadenatext 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema()+" " + n.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_cadenatext",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // exp_cadenatext ::= IGUAL exp_cadenatext 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema()+" " + n.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_cadenatext",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // exp_cadenatext ::= PARIN exp_cadenatext 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema()+" " + n.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_cadenatext",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // exp_cadenatext ::= PAROUT exp_cadenatext 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema()+" " + n.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_cadenatext",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // exp_cadenatext ::= MEQ DIVISION 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema() + n.getLexema(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_cadenatext",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // exp_opciones ::= MEQ OPTION MAQ exp_cadenatext OPTION MAQ exp_opciones 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = " <option> "+ tp.toString()+ "option>  " + n.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_opciones",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // exp_opciones ::= MEQ DIVISION 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema() + n.getLexema(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_opciones",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // par_color ::= ID 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT =  tp.getLexema(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("par_color",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // par_color ::= HEXADECIMAL 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT =  tp.getLexema(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("par_color",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // par_fontsize ::= NUMENTERO ID 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if(n.getLexema().equals("px")){ RESULT =  tp.getLexema() + n.getLexema(); }
                                            else { errorSintactico.add(String.format("Error Sintactico lexema: %s  linea: %d  columna: %d. no se esperaba ese token.", n.getLexema(), n.getLine(), n.getColumna())); 
                                            RESULT =  tp.getLexema() + n.getLexema(); } 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("par_fontsize",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // par_fontsize ::= NUMDECIMAL ID 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if(n.getLexema().equals("px")){ RESULT =  tp.getLexema() + n.getLexema(); }
                                            else { errorSintactico.add(String.format("Error Sintactico lexema: %s  linea: %d  columna: %d. no se esperaba ese token.", n.getLexema(), n.getLine(), n.getColumna()));  
                                            RESULT =  tp.getLexema() + n.getLexema(); } 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("par_fontsize",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // par_heigtwith ::= NUMENTERO ID 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if(n.getLexema().equals("px")){ RESULT =  tp.getLexema() + n.getLexema(); }
                                            else { errorSintactico.add(String.format("Error Sintactico lexema: %s  linea: %d  columna: %d. no se esperaba ese token.", n.getLexema(), n.getLine(), n.getColumna()));  
                                            RESULT =  tp.getLexema() + n.getLexema(); } 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("par_heigtwith",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // par_heigtwith ::= NUMDECIMAL ID 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if(n.getLexema().equals("px")){ RESULT =  tp.getLexema() + n.getLexema(); }
                                            else { errorSintactico.add(String.format("Error Sintactico lexema: %s  linea: %d  columna: %d. no se esperaba ese token.", n.getLexema(), n.getLine(), n.getColumna())); 
                                            RESULT =  tp.getLexema() + n.getLexema(); } 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("par_heigtwith",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // par_heigtwith ::= NUMENTERO CADENA 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if(n.getLexema().equals("%")){ RESULT =  tp.getLexema() + n.getLexema(); }
                                            else { errorSintactico.add(String.format("Error Sintactico lexema: %s  linea: %d  columna: %d. no se esperaba ese token.", n.getLexema(), n.getLine(), n.getColumna()));  
                                            RESULT =  tp.getLexema() + n.getLexema(); } 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("par_heigtwith",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // par_heigtwith ::= NUMDECIMAL CADENA 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if(n.getLexema().equals("%")){ RESULT =  tp.getLexema() + n.getLexema(); }
                                            else { errorSintactico.add(String.format("Error Sintactico lexema: %s  linea: %d  columna: %d. no se esperaba ese token.", n.getLexema(), n.getLine(), n.getColumna()));  
                                            RESULT =  tp.getLexema() + n.getLexema(); } 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("par_heigtwith",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // exp_script ::= MEQ SCRIPT MAQ exp_funciones 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = "\n  <script>  " + tp.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_script",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // exp_funciones ::= LOAD PARIN PAROUT CORIN instrucciones exp_funciones 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = " \n { \n"+ tp.toString()+" " + n.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_funciones",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // exp_funciones ::= PROCESOS PARIN PAROUT CORIN instrucciones exp_funciones 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = " \n function  " + tp.getLexema() + n.getLexema() + e.getLexema() + " { " + e1.toString() + e2.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_funciones",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // exp_funciones ::= MEQ DIVISION SCRIPT MAQ 
            {
              Object RESULT =null;
		RESULT = " \n </script>"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_funciones",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // instrucciones ::= exp_variables instrucciones 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.toString()+ " \n " + n.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // instrucciones ::= ALERTF PARIN texto PAROUT PUNTOCOMA instrucciones 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token e1 = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = "\n alert" + tp.getLexema() + n.toString() + e.getLexema() + e1.getLexema() +"\n " +  e2.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // instrucciones ::= EXIT PARIN PAROUT PUNTOCOMA instrucciones 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = " \n return; " +  tp.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // instrucciones ::= IF PARIN condiciones THEN INIT LLAVEIN DOSP instrucciones_intro instrucciones_if instrucciones 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                                                                RESULT = "\n  if" + tp.getLexema() + n.toString() + e.getLexema() + "  "+e1.toString() +"  "+ e2.toString()+"  "+e3.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // instrucciones ::= REPEAT PARIN condiciones_repeat PAROUT HUNTIL PARIN limit_repeat PAROUT INIT LLAVEIN DOSP instrucciones_intro instrucciones 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Token e1 = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                                                                RESULT = "\n  for" + tp.getLexema()+n.toString()+"; " + varIdFor + "<" +e.toString()+"; "+ varIdFor +"++) "+e1.getLexema() +"  "+ e2.toString()+"  "+e3.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // instrucciones ::= WHILE PARIN condiciones THENWHILE INIT LLAVEIN DOSP instrucciones_intro instrucciones 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                                                                RESULT = " \n while" + tp.getLexema()+n.toString()+e.getLexema()+"  "+e1.toString() +"  "+ e2.toString()+"  "; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // instrucciones ::= INSERT PARIN par_insert PUNTOCOMA instrucciones 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = "\n var contenedor = document.createElement('div');\n document.body.appendChild(contenedor);"+
                                                                                    "\n contenedor.innerHTML = " + tp.toString() + " " + n.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // instrucciones ::= REDIRECT PARIN PAROUT PUNTOCOMA instrucciones 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = "  REDIRECT(); \n" +  tp.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // instrucciones ::= COROUT 
            {
              Object RESULT =null;
		RESULT = " \n }"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // instrucciones ::= error instrucciones 
            {
              Object RESULT =null;
		System.out.println("error sintactico"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // instrucciones_intro ::= exp_variables instrucciones_intro 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.toString()+ " \n " + n.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones_intro",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // instrucciones_intro ::= ALERTF PARIN texto PAROUT PUNTOCOMA instrucciones_intro 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token e1 = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = " \n alert" + tp.getLexema() + n.toString() + e.getLexema() + e1.getLexema() +" \n" +  e2.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones_intro",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // instrucciones_intro ::= EXIT PARIN PAROUT PUNTOCOMA instrucciones_intro 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = " \n return; " +  tp.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones_intro",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // instrucciones_intro ::= IF PARIN condiciones THEN INIT LLAVEIN DOSP instrucciones_intro instrucciones_if instrucciones_intro 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                                                                RESULT = "  if" + tp.getLexema() + n.toString() + e.getLexema() + " \n "+e1.toString() +" \n "+ e2.toString()+"  "+e3.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones_intro",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // instrucciones_intro ::= REPEAT PARIN condiciones_repeat PAROUT HUNTIL PARIN limit_repeat PAROUT INIT LLAVEIN DOSP instrucciones_intro instrucciones_intro 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Token e1 = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                                                                RESULT = "  for" + tp.getLexema()+n.toString()+"; " + varIdFor + "<" +e.toString()+"; "+ varIdFor +"++) "+e1.getLexema() +" \n "+ e2.toString()+"  "+e3.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones_intro",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // instrucciones_intro ::= WHILE PARIN condiciones THENWHILE INIT LLAVEIN DOSP instrucciones_intro instrucciones_intro 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                                                                RESULT = "  while" + tp.getLexema()+n.toString()+e.getLexema()+"  "+e1.toString() +" \n "+ e2.toString()+"  "; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones_intro",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // instrucciones_intro ::= INSERT PARIN par_insert PUNTOCOMA instrucciones_intro 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = "\n var contenedor = document.createElement('div');\n document.body.appendChild(contenedor);"+
                                                                                    "\n contenedor.innerHTML = " + tp.toString() + " " + n.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones_intro",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // instrucciones_intro ::= REDIRECT PARIN PAROUT PUNTOCOMA instrucciones_intro 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = "  REDIRECT(); \n" +  tp.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones_intro",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // instrucciones_intro ::= DOSP LLAVEOUT END 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = "\n " + tp.getLexema(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones_intro",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // condiciones ::= NOT condiciones 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema()+ n.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condiciones",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // condiciones ::= exp_condicion exp_conds 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.toString()+" " + n.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condiciones",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // exp_conds ::= signo_condicion exp_condicion oper_cond 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.toString() +" "+ n.toString() + " " + e.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_conds",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // exp_conds ::= oper_cond 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_conds",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // exp_condicion ::= numeros SUMA exp_condicion 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.toString() + n.getLexema() + e.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_condicion",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // exp_condicion ::= numeros RESTA exp_condicion 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.toString() + n.getLexema() + e.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_condicion",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // exp_condicion ::= numeros PRODUCTO exp_condicion 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.toString() + n.getLexema() + e.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_condicion",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // exp_condicion ::= numeros DIVISION exp_condicion 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.toString() + n.getLexema() + e.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_condicion",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // exp_condicion ::= PARIN exp_condicion exp_conds 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema() + n.toString() + e.toString(); /*+ e1.toString() + e2.toString();*/ 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_condicion",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // exp_condicion ::= numeros 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_condicion",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // exp_condicion ::= COMILLA exp_links 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema() + n.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_condicion",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // exp_condicion ::= BOOLEANOS 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = tp.getLexema(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_condicion",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // oper_cond ::= AND AND condiciones 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema() + n.getLexema() + " " + e.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("oper_cond",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // oper_cond ::= OR OR condiciones 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema() + n.getLexema() + " " + e.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("oper_cond",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // oper_cond ::= PAROUT 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("oper_cond",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // signo_condicion ::= IGUAL IGUAL 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema() + n.getLexema(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("signo_condicion",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // signo_condicion ::= NOT IGUAL 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema() + n.getLexema(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("signo_condicion",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // signo_condicion ::= MEQ 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("signo_condicion",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // signo_condicion ::= MEQ IGUAL 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema() + n.getLexema(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("signo_condicion",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // signo_condicion ::= MAQ 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("signo_condicion",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // signo_condicion ::= MAQ IGUAL 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema() + n.getLexema(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("signo_condicion",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // instrucciones_if ::= ELSE IF PARIN condiciones THEN INIT LLAVEIN DOSP instrucciones_intro instrucciones_if 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                                            RESULT = "else if" + tp.getLexema() + n.toString() + e.getLexema() + "\n"+ e1.toString() + e2.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones_if",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // instrucciones_if ::= ELSE INIT LLAVEIN DOSP instrucciones_intro 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = " \n else " + tp.getLexema() + " \n" + n.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones_if",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // instrucciones_if ::= 
            {
              Object RESULT =null;
		RESULT = "\n"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones_if",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // limit_repeat ::= numeros SUMA limit_repeat 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.toString() + n.getLexema() + e.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("limit_repeat",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // limit_repeat ::= numeros RESTA limit_repeat 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.toString() + n.getLexema() + e.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("limit_repeat",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // limit_repeat ::= numeros PRODUCTO limit_repeat 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.toString() + n.getLexema() + e.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("limit_repeat",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // limit_repeat ::= numeros DIVISION limit_repeat 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.toString() + n.getLexema() + e.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("limit_repeat",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // limit_repeat ::= PARIN limit_repeat PAROUT expr_numerica 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema() + n.toString() + e.getLexema() + e1.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("limit_repeat",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // limit_repeat ::= numeros 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("limit_repeat",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // expr_numerica ::= SUMA limit_repeat 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema()+" " + n.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_numerica",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // expr_numerica ::= RESTA limit_repeat 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema()+" " + n.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_numerica",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // expr_numerica ::= PRODUCTO limit_repeat 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema()+" " + n.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_numerica",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // expr_numerica ::= DIVISION limit_repeat 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema()+" " + n.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_numerica",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // expr_numerica ::= 
            {
              Object RESULT =null;
		RESULT = ""; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_numerica",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // condiciones_repeat ::= ID IGUAL numeros 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 varIdFor = tp.getLexema();  RESULT = tp.getLexema() +" " + n.getLexema() +" " + e.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condiciones_repeat",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // condiciones_repeat ::= ENTERO ID IGUAL numeros 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 varIdFor = tp.getLexema();  RESULT = " let " + tp.getLexema() +" " + n.getLexema() +" " + e.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condiciones_repeat",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // numeros ::= NUMENTERO 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numeros",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // numeros ::= NUMDECIMAL 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numeros",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // numeros ::= ID 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numeros",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // exp_variables ::= ENTERO ID exp_entero 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = "\n var " + tp.getLexema() + n.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_variables",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // exp_variables ::= DECIMAL ID exp_decimal 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = "\n var " + tp.getLexema() + n.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_variables",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // exp_variables ::= CHAR ID exp_char 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = "\n var " + tp.getLexema() + n.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_variables",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // exp_variables ::= STRING ID exp_string 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = "\n var " + tp.getLexema() + n.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_variables",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // exp_variables ::= BOOLEANO ID exp_boolean 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = "\n var " + tp.getLexema() + n.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_variables",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // exp_variables ::= ENTERO GLOBAL ID exp_entero 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 varscriptGlobal += "\n var " + tp.getLexema()+ n.toString();  RESULT = ""; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_variables",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // exp_variables ::= DECIMAL GLOBAL ID exp_decimal 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 varscriptGlobal += "\n var " + tp.getLexema()+ n.toString();  RESULT = ""; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_variables",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // exp_variables ::= CHAR GLOBAL ID exp_char 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 varscriptGlobal += "\n var " + tp.getLexema()+ n.toString();  RESULT = ""; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_variables",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // exp_variables ::= STRING GLOBAL ID exp_string 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 varscriptGlobal += "\n var " + tp.getLexema()+ n.toString();  RESULT = ""; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_variables",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // exp_variables ::= BOOLEANO GLOBAL ID exp_boolean 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 varscriptGlobal += "\n var " + tp.getLexema()+ n.toString();  RESULT = ""; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_variables",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // exp_variables ::= ID exp_dir 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = "\n" + tp.getLexema() + n.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_variables",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // exp_dir ::= IGUAL dato_string exp_oper_id 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema() + n.toString() + e.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_dir",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // exp_dir ::= IGUAL BOOLEANOS exp_oper_id 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema() + n.getLexema() + e.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_dir",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // exp_oper_id ::= SUMA dato_string exp_oper_id 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema() + n.toString() + e.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_oper_id",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // exp_oper_id ::= RESTA dato_string exp_oper_id 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema() + n.toString() + e.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_oper_id",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // exp_oper_id ::= DIVISION dato_string exp_oper_id 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema() + n.toString() + e.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_oper_id",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // exp_oper_id ::= PRODUCTO dato_string exp_oper_id 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema() + n.toString() + e.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_oper_id",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // exp_oper_id ::= PUNTOCOMA 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_oper_id",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // exp_boolean ::= IGUAL exp_condicion exp_oper_bool 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema() + n.toString() + e.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_boolean",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // exp_boolean ::= COMA ID exp_boolean 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema() + n.getLexema() + e.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_boolean",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // exp_boolean ::= PUNTOCOMA 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_boolean",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // exp_oper_bool ::= OR dat_boolean exp_oper_bool 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema() + n.toString() + " " + e.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_oper_bool",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // exp_oper_bool ::= OR OR dat_boolean exp_oper_bool 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema() + n.getLexema() + " " + e.toString() + e1.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_oper_bool",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // exp_oper_bool ::= AND dat_boolean exp_oper_bool 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema() + n.toString() + " " + e.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_oper_bool",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // exp_oper_bool ::= AND AND dat_boolean exp_oper_bool 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema() + n.getLexema() + " " + e.toString() + e1.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_oper_bool",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // exp_oper_bool ::= COMA ID exp_boolean 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema() + n.getLexema() + " " + e.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_oper_bool",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // exp_oper_bool ::= PUNTOCOMA 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_oper_bool",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // exp_string ::= IGUAL dato_string exp_oper_string 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema() + n.toString() + e.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_string",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // exp_string ::= COMA ID exp_string 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema() + n.getLexema() + e.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_string",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // exp_string ::= IGUAL GETID PARIN APOSTROFO ID APOSTROFO PAROUT exp_oper_string 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Token e1 = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Token e2 = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token e3 = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token e4 = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e5 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema()+ " document.getElementById" +e.getLexema()+e1.getLexema() + e2.getLexema()+e3.getLexema() + e4.getLexema()+ ".value"+ e5.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_string",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // exp_string ::= IGUAL exp_funciones_especial exp_oper_string 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema() + n.toString() + e.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_string",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // exp_string ::= PUNTOCOMA 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_string",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // exp_funciones_especial ::= ASCF PARIN par_function_esp PAROUT 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token e1 = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema() + n.getLexema() + e.toString() + e1.getLexema(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_funciones_especial",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // exp_funciones_especial ::= DESCF PARIN par_function_esp PAROUT 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token e1 = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema() + n.getLexema() + e.toString() + e1.getLexema(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_funciones_especial",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // exp_funciones_especial ::= LETPF PARIN par_function_esp PAROUT 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token e1 = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema() + n.getLexema() + e.toString() + e1.getLexema(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_funciones_especial",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // exp_funciones_especial ::= LETIMF PARIN par_function_esp PAROUT 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token e1 = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema() + n.getLexema() + e.toString() + e1.getLexema(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_funciones_especial",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // exp_funciones_especial ::= REVERSEF PARIN par_function_esp PAROUT 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token e1 = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema() + n.getLexema() + e.toString() + e1.getLexema(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_funciones_especial",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // par_function_esp ::= ID 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = tp.getLexema(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("par_function_esp",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // par_function_esp ::= COMILLA text_string 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema()+" " + n.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("par_function_esp",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // exp_oper_string ::= SUMA dato_string exp_oper_string 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema() + "  \"  \"  + " + n.toString() + e.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_oper_string",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // exp_oper_string ::= COMA ID exp_string 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema() + "  " + n.getLexema() + e.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_oper_string",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // exp_oper_string ::= PUNTOCOMA 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_oper_string",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // dato_string ::= NUMENTERO 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dato_string",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // dato_string ::= CARACTER 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dato_string",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // dato_string ::= NUMDECIMAL 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dato_string",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // dato_string ::= COMILLA text_string 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 String aux = n.toString();  aux = aux.replaceFirst(".$",""); aux = aux.replaceFirst(".$","");   RESULT = tp.getLexema() + aux + "\""; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dato_string",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // dato_string ::= ID 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT =  tp.getLexema(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dato_string",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // exp_char ::= IGUAL CARACTER dat_char 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema() + n.getLexema() + e.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_char",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // exp_char ::= COMA ID exp_char 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema() + n.getLexema() + e.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_char",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // exp_char ::= IGUAL CARALEF PARIN PAROUT dat_char 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token e1 = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema() + n.getLexema() + e.getLexema() + e1.getLexema() + e2.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_char",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // exp_char ::= PUNTOCOMA 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_char",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // dat_char ::= COMA ID exp_char 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema() + n.getLexema() + e.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dat_char",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // dat_char ::= PUNTOCOMA 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dat_char",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // exp_entero ::= IGUAL dato_entero exp_opeinteger 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema() + n.toString() + e.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_entero",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // exp_entero ::= COMA ID exp_entero 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema() + n.getLexema() + e.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_entero",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // exp_entero ::= IGUAL NUMALEF PARIN PAROUT exp_opeinteger 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token e1 = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema() + n.getLexema() + e.getLexema() + e1.getLexema() + e2.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_entero",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // exp_entero ::= PUNTOCOMA 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_entero",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // exp_opeinteger ::= SUMA dato_entero exp_opeinteger 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema() + n.toString() + e.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_opeinteger",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // exp_opeinteger ::= RESTA dato_entero exp_opeinteger 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema() + n.toString() + e.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_opeinteger",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // exp_opeinteger ::= DIVISION dato_entero exp_opeinteger 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema() + n.toString() + e.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_opeinteger",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // exp_opeinteger ::= PRODUCTO dato_entero exp_opeinteger 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema() + n.toString() + e.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_opeinteger",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // exp_opeinteger ::= COMA ID exp_entero 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema() + n.toString() + e.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_opeinteger",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // exp_opeinteger ::= PUNTOCOMA 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_opeinteger",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // dato_entero ::= NUMENTERO 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dato_entero",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // dato_entero ::= BOOLEANOS 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  if(tp.getLexema().equals("true")) { RESULT = "1";
                                       } else if(tp.getLexema().equals("false")) { RESULT = "0"; } else {
                                         errorSemantico.add(String.format("Error semantico con id: %s  linea: %d  columna: %d. no existe este id.", tp.getLexema(), tp.getLine(), tp.getColumna()));
                                         RESULT = tp.getLexema();
                                        }  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dato_entero",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // dato_entero ::= CARACTER 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 char as = tp.getLexema().charAt(1); int asciiValue = as;  RESULT = asciiValue; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dato_entero",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // dato_entero ::= PARIN limit_repeat PAROUT 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema() + n.toString() + e.getLexema();  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dato_entero",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // dato_entero ::= ID 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		   RESULT = tp.getLexema(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dato_entero",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // exp_decimal ::= IGUAL dato_decimal exp_oper_decimal 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema() + n.toString() + e.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_decimal",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // exp_decimal ::= COMA ID exp_decimal 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema() + n.getLexema() + e.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_decimal",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // exp_decimal ::= PUNTOCOMA 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_decimal",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // exp_oper_decimal ::= SUMA dato_decimal exp_oper_decimal 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema() + n.toString() + e.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_oper_decimal",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // exp_oper_decimal ::= RESTA dato_decimal exp_oper_decimal 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema() + n.toString() + e.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_oper_decimal",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // exp_oper_decimal ::= DIVISION dato_decimal exp_oper_decimal 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema() + n.toString() + e.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_oper_decimal",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // exp_oper_decimal ::= PRODUCTO dato_decimal exp_oper_decimal 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema() + n.toString() + e.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_oper_decimal",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // exp_oper_decimal ::= COMA ID exp_decimal 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema() + n.getLexema() + e.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_oper_decimal",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // exp_oper_decimal ::= PUNTOCOMA 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_oper_decimal",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // dato_decimal ::= NUMENTERO 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dato_decimal",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // dato_decimal ::= NUMDECIMAL 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dato_decimal",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // dato_decimal ::= BOOLEANOS 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  if(tp.getLexema().equals("true")) { RESULT = "1";
                                       } else if(tp.getLexema().equals("false")) { RESULT = "0"; } else {
                                         errorSemantico.add(String.format("Error sintactico no se esperaba el lexema: %s  linea: %d  columna: %d. se esperaba un true o false.", tp.getLexema(), tp.getLine(), tp.getColumna()));
                                         RESULT = tp.getLexema();
                                        }  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dato_decimal",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // dato_decimal ::= CARACTER 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 char as = tp.getLexema().charAt(1);  int asciiValue = as;  RESULT = asciiValue; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dato_decimal",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // dato_decimal ::= PARIN limit_repeat PAROUT 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema() + n.toString() + e.getLexema();  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dato_decimal",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // dato_decimal ::= ID 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = tp.getLexema(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dato_decimal",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // par_insert ::= ID par_insert1 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		   RESULT =  tp.getLexema() + n.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("par_insert",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // par_insert ::= APOSTROFO texto_insert par_insert1 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = "  " +  tp.getLexema()+" " + e.toString() + n.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("par_insert",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // par_insert ::= CARACTER par_insert1 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		   RESULT =  tp.getLexema() + n.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("par_insert",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // par_insert1 ::= COMA ID par_insert1 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = " + " + tp.getLexema() + n.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("par_insert1",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // par_insert1 ::= COMA APOSTROFO texto_insert par_insert1 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = " + " +  tp.getLexema()+" " + e.toString() + n.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("par_insert1",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // par_insert1 ::= COMA CARACTER par_insert1 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = " + " + tp.getLexema() + n.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("par_insert1",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // par_insert1 ::= PAROUT 
            {
              Object RESULT =null;
		RESULT = ";"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("par_insert1",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // texto_insert ::= mensaje_texto 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT =  n.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("texto_insert",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // texto_insert ::= texto_etiqueta APOSTROFO 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.toString() + n.getLexema(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("texto_insert",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // texto_etiqueta ::= MEQ SPAM parm_shisp 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  String styl = parInput + "\"  "; parInput = "style=\"";   RESULT = "<spam "+ styl + tp.toString()+" "; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("texto_etiqueta",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // texto_etiqueta ::= MEQ SELECTED parm_shisp 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  String styl = parInput + "\"  "; parInput = "style=\"";   RESULT = "<select "+ styl + tp.toString()+" "; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("texto_etiqueta",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // texto_etiqueta ::= MEQ H1 parm_shisp 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  String styl = parInput + "\"  "; parInput = "style=\"";   RESULT = "<h1 "+ styl + tp.toString()+" "; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("texto_etiqueta",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // texto_etiqueta ::= MEQ P parm_shisp 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  String styl = parInput + "\"  "; parInput = "style=\"";   RESULT = "<p "+ styl + tp.toString()+" "; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("texto_etiqueta",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // texto_etiqueta ::= MEQ BR MAQ 
            {
              Object RESULT =null;
		 RESULT = " <br> "; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("texto_etiqueta",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // texto_etiqueta ::= MEQ INPUT parm_input 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  String styl = parInput + "\"  "; parInput = "style=\"";   RESULT = "<input "+ styl + tp.toString()+" "; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("texto_etiqueta",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // texto_etiqueta ::= MEQ IMG parm_image 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  String styl = parInput + "\"  "; parInput = "style=\"";   RESULT = "<img "+ styl + tp.toString()+" "; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("texto_etiqueta",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // texto_etiqueta ::= MEQ TEXTAREA par_areatext 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  String styl = parInput + "\"  "; parInput = "style=\"";   RESULT = "<textarea "+ styl + tp.toString()+" "; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("texto_etiqueta",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // texto_etiqueta ::= MEQ DIV par_div 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  String styl = parInput + "\"  "; parInput = "style=\"";   RESULT = "<div "+ styl + tp.toString()+" "; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("texto_etiqueta",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // texto_etiqueta ::= MEQ BUTTON par_button 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  String styl = parInput + "\"  "; parInput = "style=\"";   RESULT = "<button "+ styl + tp.toString()+" "; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("texto_etiqueta",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */
  /** Method 1 with the actual generated action code for actions 300 to 600. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000001(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // texto_etiqueta ::= MEQ DIVISION exp_etiquetas_fin MAQ 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = "</" + tp.toString() + ">"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("texto_etiqueta",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // exp_etiquetas_fin ::= SPAM 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = tp.getLexema(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_etiquetas_fin",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // exp_etiquetas_fin ::= SELECTED 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = tp.getLexema(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_etiquetas_fin",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // exp_etiquetas_fin ::= H1 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = tp.getLexema(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_etiquetas_fin",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 304: // exp_etiquetas_fin ::= P 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = tp.getLexema(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_etiquetas_fin",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 305: // exp_etiquetas_fin ::= INPUT 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = tp.getLexema(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_etiquetas_fin",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 306: // exp_etiquetas_fin ::= IMG 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = tp.getLexema(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_etiquetas_fin",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 307: // exp_etiquetas_fin ::= TEXTAREA 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = tp.getLexema(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_etiquetas_fin",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 308: // exp_etiquetas_fin ::= DIV 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = tp.getLexema(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_etiquetas_fin",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 309: // exp_etiquetas_fin ::= BUTTON 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = tp.getLexema(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_etiquetas_fin",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 310: // texto ::= ID 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = tp.getLexema(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("texto",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 311: // texto ::= COMILLA text_string 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema()+" " + n.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("texto",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 312: // mensaje_texto ::= CADENA mensaje_texto 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema()+" " + n.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mensaje_texto",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 313: // mensaje_texto ::= ID mensaje_texto 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema()+" " + n.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mensaje_texto",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 314: // mensaje_texto ::= NUMENTERO mensaje_texto 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema()+" " + n.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mensaje_texto",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 315: // mensaje_texto ::= NUMDECIMAL mensaje_texto 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema()+" " + n.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mensaje_texto",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 316: // mensaje_texto ::= SUMA mensaje_texto 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema()+" " + n.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mensaje_texto",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 317: // mensaje_texto ::= RESTA mensaje_texto 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema()+" " + n.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mensaje_texto",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 318: // mensaje_texto ::= PRODUCTO mensaje_texto 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema()+" " + n.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mensaje_texto",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 319: // mensaje_texto ::= DIVISION mensaje_texto 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema()+" " + n.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mensaje_texto",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 320: // mensaje_texto ::= DOSP mensaje_texto 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema()+" " + n.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mensaje_texto",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 321: // mensaje_texto ::= COMA mensaje_texto 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema()+" " + n.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mensaje_texto",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 322: // mensaje_texto ::= IGUAL mensaje_texto 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema()+" " + n.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mensaje_texto",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 323: // mensaje_texto ::= PARIN mensaje_texto 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema()+" " + n.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mensaje_texto",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 324: // mensaje_texto ::= PAROUT mensaje_texto 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema()+" " + n.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mensaje_texto",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 325: // mensaje_texto ::= APOSTROFO 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mensaje_texto",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 326: // text_string ::= CADENA text_string 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema()+" " + n.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("text_string",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 327: // text_string ::= ID text_string 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema()+" " + n.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("text_string",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 328: // text_string ::= NUMENTERO text_string 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema()+" " + n.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("text_string",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 329: // text_string ::= NUMDECIMAL text_string 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema()+" " + n.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("text_string",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 330: // text_string ::= SUMA text_string 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema()+" " + n.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("text_string",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 331: // text_string ::= RESTA text_string 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema()+" " + n.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("text_string",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 332: // text_string ::= PRODUCTO text_string 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema()+" " + n.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("text_string",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 333: // text_string ::= DIVISION text_string 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema()+" " + n.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("text_string",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 334: // text_string ::= DOSP text_string 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema()+" " + n.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("text_string",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 335: // text_string ::= COMA text_string 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema()+" " + n.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("text_string",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 336: // text_string ::= IGUAL text_string 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema()+" " + n.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("text_string",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 337: // text_string ::= PARIN text_string 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema()+" " + n.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("text_string",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 338: // text_string ::= PAROUT text_string 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tp.getLexema()+" " + n.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("text_string",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 339: // text_string ::= COMILLA 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token tp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = "" + tp.getLexema(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("text_string",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* select the action handler based on the action number */
      switch (CUP$Parser$act_num/300)
        {
          /*. . . . . . . . 0 < #action < 300. . . . . . . . . . . .*/
          case 0: 
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
          /*. . . . . . . . 300 < #action < 600. . . . . . . . . . . .*/
          case 1: 
              return CUP$Parser$do_action_part00000001(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
          /* . . . no valid action number: . . .*/
          default:
            throw new Exception("Invalid action number found in internal parse table");

        }      /* end of switch */
    }
}

}
