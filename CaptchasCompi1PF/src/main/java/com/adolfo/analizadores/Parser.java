
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.adolfo.analizadores;

import java_cup.runtime.*;
import java.util.List;
import java.util.ArrayList;
import com.adolfo.analizadores.Token;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u0126\000\002\002\004\000\002\002\006\000\002\002" +
    "\004\000\002\003\012\000\002\003\011\000\002\003\003" +
    "\000\002\005\004\000\002\005\004\000\002\005\004\000" +
    "\002\005\004\000\002\005\003\000\002\004\012\000\002" +
    "\004\004\000\002\004\006\000\002\006\011\000\002\006" +
    "\012\000\002\006\006\000\002\006\004\000\002\024\011" +
    "\000\002\024\003\000\002\011\011\000\002\011\003\000" +
    "\002\012\004\000\002\012\004\000\002\012\004\000\002" +
    "\012\004\000\002\012\004\000\002\012\004\000\002\012" +
    "\004\000\002\012\004\000\002\012\004\000\002\012\004" +
    "\000\002\012\004\000\002\012\004\000\002\012\003\000" +
    "\002\007\011\000\002\007\011\000\002\007\011\000\002" +
    "\007\011\000\002\007\006\000\002\007\011\000\002\007" +
    "\012\000\002\007\010\000\002\007\011\000\002\007\011" +
    "\000\002\007\012\000\002\007\006\000\002\007\004\000" +
    "\002\026\011\000\002\026\011\000\002\026\011\000\002" +
    "\026\011\000\002\026\006\000\002\026\011\000\002\026" +
    "\012\000\002\026\010\000\002\026\011\000\002\026\006" +
    "\000\002\027\012\000\002\027\012\000\002\027\012\000" +
    "\002\027\012\000\002\027\012\000\002\027\011\000\002" +
    "\027\011\000\002\027\003\000\002\023\012\000\002\023" +
    "\012\000\002\023\012\000\002\023\012\000\002\023\012" +
    "\000\002\023\011\000\002\023\011\000\002\023\003\000" +
    "\002\017\012\000\002\017\012\000\002\017\012\000\002" +
    "\017\012\000\002\017\012\000\002\017\012\000\002\017" +
    "\004\000\002\013\012\000\002\013\012\000\002\013\012" +
    "\000\002\013\012\000\002\013\012\000\002\013\003\000" +
    "\002\015\012\000\002\015\012\000\002\015\012\000\002" +
    "\015\012\000\002\015\012\000\002\015\012\000\002\015" +
    "\003\000\002\016\012\000\002\016\011\000\002\016\012" +
    "\000\002\016\012\000\002\016\012\000\002\016\003\000" +
    "\002\025\006\000\002\025\006\000\002\010\004\000\002" +
    "\010\004\000\002\010\004\000\002\010\004\000\002\010" +
    "\004\000\002\010\004\000\002\010\004\000\002\010\004" +
    "\000\002\010\004\000\002\010\004\000\002\010\004\000" +
    "\002\010\004\000\002\010\004\000\002\010\004\000\002" +
    "\014\011\000\002\014\004\000\002\020\003\000\002\020" +
    "\003\000\002\021\004\000\002\021\004\000\002\022\004" +
    "\000\002\022\004\000\002\022\004\000\002\022\004\000" +
    "\002\030\006\000\002\031\010\000\002\031\010\000\002" +
    "\031\006\000\002\032\004\000\002\032\010\000\002\032" +
    "\007\000\002\032\014\000\002\032\017\000\002\032\013" +
    "\000\002\032\007\000\002\032\003\000\002\032\004\000" +
    "\002\042\004\000\002\042\010\000\002\042\007\000\002" +
    "\042\014\000\002\042\017\000\002\042\013\000\002\042" +
    "\007\000\002\042\005\000\002\042\004\000\002\037\004" +
    "\000\002\037\004\000\002\074\005\000\002\074\003\000" +
    "\002\072\003\000\002\072\003\000\002\072\005\000\002" +
    "\072\005\000\002\073\005\000\002\073\005\000\002\073" +
    "\003\000\002\071\004\000\002\071\004\000\002\071\003" +
    "\000\002\071\004\000\002\071\003\000\002\071\004\000" +
    "\002\036\014\000\002\036\007\000\002\036\002\000\002" +
    "\041\005\000\002\041\005\000\002\041\005\000\002\041" +
    "\005\000\002\041\006\000\002\041\003\000\002\070\004" +
    "\000\002\070\004\000\002\070\004\000\002\070\004\000" +
    "\002\070\002\000\002\040\005\000\002\040\006\000\002" +
    "\067\003\000\002\067\003\000\002\067\003\000\002\033" +
    "\005\000\002\033\005\000\002\033\005\000\002\033\005" +
    "\000\002\033\005\000\002\033\006\000\002\033\006\000" +
    "\002\033\006\000\002\033\006\000\002\033\006\000\002" +
    "\052\005\000\002\052\005\000\002\052\003\000\002\065" +
    "\003\000\002\065\003\000\002\066\005\000\002\066\006" +
    "\000\002\066\005\000\002\066\006\000\002\066\005\000" +
    "\002\066\003\000\002\051\005\000\002\051\005\000\002" +
    "\051\012\000\002\051\005\000\002\051\003\000\002\063" +
    "\006\000\002\063\006\000\002\063\006\000\002\063\006" +
    "\000\002\063\006\000\002\064\003\000\002\064\004\000" +
    "\002\062\005\000\002\062\005\000\002\062\003\000\002" +
    "\061\003\000\002\061\003\000\002\061\003\000\002\061" +
    "\004\000\002\061\003\000\002\050\005\000\002\050\005" +
    "\000\002\050\007\000\002\050\003\000\002\060\005\000" +
    "\002\060\003\000\002\046\005\000\002\046\005\000\002" +
    "\046\007\000\002\046\003\000\002\054\005\000\002\054" +
    "\005\000\002\054\005\000\002\054\005\000\002\054\005" +
    "\000\002\054\003\000\002\053\003\000\002\053\003\000" +
    "\002\053\003\000\002\053\003\000\002\047\005\000\002" +
    "\047\005\000\002\047\007\000\002\047\003\000\002\056" +
    "\005\000\002\056\005\000\002\056\005\000\002\056\005" +
    "\000\002\056\005\000\002\056\003\000\002\055\003\000" +
    "\002\055\003\000\002\055\003\000\002\055\003\000\002" +
    "\055\003\000\002\043\004\000\002\043\005\000\002\044" +
    "\005\000\002\044\006\000\002\044\003\000\002\057\003" +
    "\000\002\057\004\000\002\045\010\000\002\045\010\000" +
    "\002\045\010\000\002\045\010\000\002\045\006\000\002" +
    "\045\010\000\002\045\011\000\002\045\007\000\002\045" +
    "\010\000\002\045\010\000\002\045\004\000\002\034\003" +
    "\000\002\034\004\000\002\035\004\000\002\035\004\000" +
    "\002\035\004\000\002\035\004\000\002\035\004\000\002" +
    "\035\004\000\002\035\004\000\002\035\004\000\002\035" +
    "\004\000\002\035\004\000\002\035\004\000\002\035\004" +
    "\000\002\035\004\000\002\035\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0405\000\006\003\005\055\004\001\002\000\004\004" +
    "\u03ed\001\002\000\004\055\010\001\002\000\004\002\007" +
    "\001\002\000\004\002\001\001\002\000\010\005\016\010" +
    "\015\024\014\001\002\000\004\002\uffff\001\002\000\004" +
    "\055\010\001\002\000\004\002\ufff5\001\002\000\004\056" +
    "\u020b\001\002\000\006\056\144\066\143\001\002\000\004" +
    "\056\017\001\002\000\004\055\021\001\002\000\004\055" +
    "\141\001\002\000\012\006\026\007\024\024\014\065\025" +
    "\001\002\000\004\055\021\001\002\000\004\055\ufff0\001" +
    "\002\000\006\056\074\066\072\001\002\000\004\005\070" +
    "\001\002\000\004\056\027\001\002\000\036\054\041\055" +
    "\035\062\036\063\045\064\031\065\042\070\034\071\037" +
    "\072\033\076\032\130\040\131\043\132\046\135\030\001" +
    "\002\000\036\054\041\055\035\062\036\063\045\064\031" +
    "\065\042\070\034\071\037\072\033\076\032\130\040\131" +
    "\043\132\046\135\030\001\002\000\036\054\041\055\035" +
    "\062\036\063\045\064\031\065\042\070\034\071\037\072" +
    "\033\076\032\130\040\131\043\132\046\135\030\001\002" +
    "\000\036\054\041\055\035\062\036\063\045\064\031\065" +
    "\042\070\034\071\037\072\033\076\032\130\040\131\043" +
    "\132\046\135\030\001\002\000\036\054\041\055\035\062" +
    "\036\063\045\064\031\065\042\070\034\071\037\072\033" +
    "\076\032\130\040\131\043\132\046\135\030\001\002\000" +
    "\036\054\041\055\035\062\036\063\045\064\031\065\042" +
    "\070\034\071\037\072\033\076\032\130\040\131\043\132" +
    "\046\135\030\001\002\000\004\065\062\001\002\000\036" +
    "\054\041\055\035\062\036\063\045\064\031\065\042\070" +
    "\034\071\037\072\033\076\032\130\040\131\043\132\046" +
    "\135\030\001\002\000\036\054\041\055\035\062\036\063" +
    "\045\064\031\065\042\070\034\071\037\072\033\076\032" +
    "\130\040\131\043\132\046\135\030\001\002\000\036\054" +
    "\041\055\035\062\036\063\045\064\031\065\042\070\034" +
    "\071\037\072\033\076\032\130\040\131\043\132\046\135" +
    "\030\001\002\000\036\054\041\055\035\062\036\063\045" +
    "\064\031\065\042\070\034\071\037\072\033\076\032\130" +
    "\040\131\043\132\046\135\030\001\002\000\036\054\041" +
    "\055\035\062\036\063\045\064\031\065\042\070\034\071" +
    "\037\072\033\076\032\130\040\131\043\132\046\135\030" +
    "\001\002\000\036\054\041\055\035\062\036\063\045\064" +
    "\031\065\042\070\034\071\037\072\033\076\032\130\040" +
    "\131\043\132\046\135\030\001\002\000\004\006\051\001" +
    "\002\000\036\054\041\055\035\062\036\063\045\064\031" +
    "\065\042\070\034\071\037\072\033\076\032\130\040\131" +
    "\043\132\046\135\030\001\002\000\036\054\041\055\035" +
    "\062\036\063\045\064\031\065\042\070\034\071\037\072" +
    "\033\076\032\130\040\131\043\132\046\135\030\001\002" +
    "\000\020\006\uff98\011\uff98\012\uff98\015\uff98\021\uff98\022" +
    "\uff98\023\uff98\001\002\000\020\006\uff96\011\uff96\012\uff96" +
    "\015\uff96\021\uff96\022\uff96\023\uff96\001\002\000\004\056" +
    "\052\001\002\000\004\055\021\001\002\000\004\055\ufff3" +
    "\001\002\000\020\006\uff99\011\uff99\012\uff99\015\uff99\021" +
    "\uff99\022\uff99\023\uff99\001\002\000\020\006\uff94\011\uff94" +
    "\012\uff94\015\uff94\021\uff94\022\uff94\023\uff94\001\002\000" +
    "\020\006\uff91\011\uff91\012\uff91\015\uff91\021\uff91\022\uff91" +
    "\023\uff91\001\002\000\020\006\uff9a\011\uff9a\012\uff9a\015" +
    "\uff9a\021\uff9a\022\uff9a\023\uff9a\001\002\000\020\006\uff8f" +
    "\011\uff8f\012\uff8f\015\uff8f\021\uff8f\022\uff8f\023\uff8f\001" +
    "\002\000\020\006\uff97\011\uff97\012\uff97\015\uff97\021\uff97" +
    "\022\uff97\023\uff97\001\002\000\020\006\uff8e\011\uff8e\012" +
    "\uff8e\015\uff8e\021\uff8e\022\uff8e\023\uff8e\001\002\000\020" +
    "\006\uff90\011\uff90\012\uff90\015\uff90\021\uff90\022\uff90\023" +
    "\uff90\001\002\000\020\006\uff92\011\uff92\012\uff92\015\uff92" +
    "\021\uff92\022\uff92\023\uff92\001\002\000\020\006\uff93\011" +
    "\uff93\012\uff93\015\uff93\021\uff93\022\uff93\023\uff93\001\002" +
    "\000\020\006\uff95\011\uff95\012\uff95\015\uff95\021\uff95\022" +
    "\uff95\023\uff95\001\002\000\020\006\uff9b\011\uff9b\012\uff9b" +
    "\015\uff9b\021\uff9b\022\uff9b\023\uff9b\001\002\000\004\056" +
    "\071\001\002\000\004\055\ufff1\001\002\000\004\025\102" +
    "\001\002\000\004\055\075\001\002\000\006\003\uffec\055" +
    "\uffec\001\002\000\004\065\076\001\002\000\004\007\077" +
    "\001\002\000\004\056\100\001\002\000\004\055\021\001" +
    "\002\000\004\055\ufff2\001\002\000\004\054\103\001\002" +
    "\000\004\124\104\001\002\000\034\054\113\060\107\062" +
    "\111\063\120\064\106\065\114\076\110\124\122\130\112" +
    "\131\116\132\117\134\121\135\105\001\002\000\034\054" +
    "\113\060\107\062\111\063\120\064\106\065\114\076\110" +
    "\124\122\130\112\131\116\132\117\134\121\135\105\001" +
    "\002\000\034\054\113\060\107\062\111\063\120\064\106" +
    "\065\114\076\110\124\122\130\112\131\116\132\117\134" +
    "\121\135\105\001\002\000\034\054\113\060\107\062\111" +
    "\063\120\064\106\065\114\076\110\124\122\130\112\131" +
    "\116\132\117\134\121\135\105\001\002\000\034\054\113" +
    "\060\107\062\111\063\120\064\106\065\114\076\110\124" +
    "\122\130\112\131\116\132\117\134\121\135\105\001\002" +
    "\000\034\054\113\060\107\062\111\063\120\064\106\065" +
    "\114\076\110\124\122\130\112\131\116\132\117\134\121" +
    "\135\105\001\002\000\034\054\113\060\107\062\111\063" +
    "\120\064\106\065\114\076\110\124\122\130\112\131\116" +
    "\132\117\134\121\135\105\001\002\000\034\054\113\060" +
    "\107\062\111\063\120\064\106\065\114\076\110\124\122" +
    "\130\112\131\116\132\117\134\121\135\105\001\002\000" +
    "\034\054\113\060\107\062\111\063\120\064\106\065\114" +
    "\076\110\124\122\130\112\131\116\132\117\134\121\135" +
    "\105\001\002\000\004\067\127\001\002\000\034\054\113" +
    "\060\107\062\111\063\120\064\106\065\114\076\110\124" +
    "\122\130\112\131\116\132\117\134\121\135\105\001\002" +
    "\000\034\054\113\060\107\062\111\063\120\064\106\065" +
    "\114\076\110\124\122\130\112\131\116\132\117\134\121" +
    "\135\105\001\002\000\034\054\113\060\107\062\111\063" +
    "\120\064\106\065\114\076\110\124\122\130\112\131\116" +
    "\132\117\134\121\135\105\001\002\000\034\054\113\060" +
    "\107\062\111\063\120\064\106\065\114\076\110\124\122" +
    "\130\112\131\116\132\117\134\121\135\105\001\002\000" +
    "\014\062\uffdf\067\uffdf\071\uffdf\072\uffdf\073\uffdf\001\002" +
    "\000\014\062\uffe0\067\uffe0\071\uffe0\072\uffe0\073\uffe0\001" +
    "\002\000\014\062\uffe1\067\uffe1\071\uffe1\072\uffe1\073\uffe1" +
    "\001\002\000\014\062\uffe4\067\uffe4\071\uffe4\072\uffe4\073" +
    "\uffe4\001\002\000\014\062\uffe6\067\uffe6\071\uffe6\072\uffe6" +
    "\073\uffe6\001\002\000\006\056\074\066\072\001\002\000" +
    "\006\003\uffed\055\uffed\001\002\000\014\062\uffe9\067\uffe9" +
    "\071\uffe9\072\uffe9\073\uffe9\001\002\000\014\062\uffe7\067" +
    "\uffe7\071\uffe7\072\uffe7\073\uffe7\001\002\000\014\062\uffeb" +
    "\067\uffeb\071\uffeb\072\uffeb\073\uffeb\001\002\000\014\062" +
    "\uffe3\067\uffe3\071\uffe3\072\uffe3\073\uffe3\001\002\000\014" +
    "\062\uffea\067\uffea\071\uffea\072\uffea\073\uffea\001\002\000" +
    "\014\062\uffe5\067\uffe5\071\uffe5\072\uffe5\073\uffe5\001\002" +
    "\000\014\062\uffe2\067\uffe2\071\uffe2\072\uffe2\073\uffe2\001" +
    "\002\000\014\062\uffe8\067\uffe8\071\uffe8\072\uffe8\073\uffe8" +
    "\001\002\000\004\010\142\001\002\000\006\056\144\066" +
    "\143\001\002\000\004\026\u0203\001\002\000\006\003\uffee" +
    "\055\uffee\001\002\000\006\003\147\055\146\001\002\000" +
    "\030\011\161\012\154\013\163\014\156\016\157\017\164" +
    "\020\153\021\152\022\162\023\155\065\160\001\002\000" +
    "\006\003\147\055\146\001\002\000\004\002\ufff6\001\002" +
    "\000\006\002\uffd2\125\uffd2\001\002\000\006\056\u01b1\066" +
    "\u01b0\001\002\000\004\056\u01fc\001\002\000\006\056\u017e" +
    "\066\u017d\001\002\000\006\056\333\066\332\001\002\000" +
    "\006\056\333\066\332\001\002\000\006\056\u0115\066\u0114" +
    "\001\002\000\006\004\u010c\010\u010b\001\002\000\006\056" +
    "\333\066\332\001\002\000\006\056\333\066\332\001\002" +
    "\000\006\056\246\066\245\001\002\000\006\056\166\066" +
    "\165\001\002\000\014\034\176\041\200\042\177\043\201" +
    "\044\175\001\002\000\004\055\uff9e\001\002\000\004\055" +
    "\170\001\002\000\004\065\171\001\002\000\004\017\172" +
    "\001\002\000\004\056\173\001\002\000\006\003\147\055" +
    "\146\001\002\000\006\002\uffd8\125\uffd8\001\002\000\004" +
    "\054\237\001\002\000\004\054\231\001\002\000\004\054" +
    "\223\001\002\000\004\054\216\001\002\000\004\054\202" +
    "\001\002\000\004\124\203\001\002\000\006\131\204\132" +
    "\206\001\002\000\006\130\214\135\215\001\002\000\004" +
    "\124\211\001\002\000\006\130\207\135\210\001\002\000" +
    "\004\124\uff86\001\002\000\004\124\uff84\001\002\000\004" +
    "\067\212\001\002\000\006\056\166\066\165\001\002\000" +
    "\004\055\uff9f\001\002\000\004\124\uff87\001\002\000\004" +
    "\124\uff85\001\002\000\004\124\217\001\002\000\034\054" +
    "\113\060\107\062\111\063\120\064\106\065\114\076\110" +
    "\124\122\130\112\131\116\132\117\134\121\135\105\001" +
    "\002\000\004\067\221\001\002\000\006\056\166\066\165" +
    "\001\002\000\004\055\uffa2\001\002\000\004\124\224\001" +
    "\002\000\006\131\204\132\206\001\002\000\004\124\226" +
    "\001\002\000\004\067\227\001\002\000\006\056\166\066" +
    "\165\001\002\000\004\055\uffa0\001\002\000\004\124\232" +
    "\001\002\000\004\130\233\001\002\000\004\124\234\001" +
    "\002\000\004\067\235\001\002\000\006\056\166\066\165" +
    "\001\002\000\004\055\uffa3\001\002\000\004\124\240\001" +
    "\002\000\004\130\241\001\002\000\004\124\242\001\002" +
    "\000\004\067\243\001\002\000\006\056\166\066\165\001" +
    "\002\000\004\055\uffa1\001\002\000\016\030\261\031\257" +
    "\032\254\034\256\036\260\037\255\001\002\000\004\065" +
    "\253\001\002\000\004\013\250\001\002\000\004\056\251" +
    "\001\002\000\006\003\147\055\146\001\002\000\006\002" +
    "\uffd7\125\uffd7\001\002\000\004\013\uffb1\001\002\000\004" +
    "\054\324\001\002\000\004\054\316\001\002\000\004\054" +
    "\310\001\002\000\004\054\302\001\002\000\004\054\274" +
    "\001\002\000\004\054\262\001\002\000\004\124\263\001" +
    "\002\000\006\131\264\132\265\001\002\000\004\130\273" +
    "\001\002\000\004\130\272\001\002\000\004\124\267\001" +
    "\002\000\004\067\270\001\002\000\006\056\246\066\245" +
    "\001\002\000\004\013\uffb2\001\002\000\004\124\uff88\001" +
    "\002\000\004\124\uff89\001\002\000\004\124\275\001\002" +
    "\000\004\131\276\001\002\000\004\124\277\001\002\000" +
    "\004\067\300\001\002\000\006\056\246\066\245\001\002" +
    "\000\004\013\uffb6\001\002\000\004\124\303\001\002\000" +
    "\004\130\304\001\002\000\004\124\305\001\002\000\004" +
    "\067\306\001\002\000\006\056\246\066\245\001\002\000" +
    "\004\013\uffb3\001\002\000\004\124\311\001\002\000\004" +
    "\130\312\001\002\000\004\124\313\001\002\000\004\067" +
    "\314\001\002\000\006\056\246\066\245\001\002\000\004" +
    "\013\uffb7\001\002\000\004\124\317\001\002\000\004\131" +
    "\320\001\002\000\004\124\321\001\002\000\004\067\322" +
    "\001\002\000\006\056\246\066\245\001\002\000\004\013" +
    "\uffb5\001\002\000\004\124\325\001\002\000\004\130\326" +
    "\001\002\000\004\124\327\001\002\000\004\067\330\001" +
    "\002\000\006\056\246\066\245\001\002\000\004\013\uffb4" +
    "\001\002\000\014\027\342\030\345\031\344\032\341\034" +
    "\343\001\002\000\036\054\uffab\055\uffab\062\uffab\063\uffab" +
    "\064\uffab\065\uffab\070\uffab\071\uffab\072\uffab\076\uffab\130" +
    "\uffab\131\uffab\132\uffab\135\uffab\001\002\000\036\054\041" +
    "\055\035\062\036\063\045\064\031\065\042\070\034\071" +
    "\037\072\033\076\032\130\040\131\043\132\046\135\030" +
    "\001\002\000\004\022\336\001\002\000\004\056\337\001" +
    "\002\000\006\003\147\055\146\001\002\000\006\002\uffdc" +
    "\125\uffdc\001\002\000\004\054\u0100\001\002\000\004\054" +
    "\370\001\002\000\004\054\362\001\002\000\004\054\354" +
    "\001\002\000\004\054\346\001\002\000\004\124\347\001" +
    "\002\000\006\131\264\132\265\001\002\000\004\124\351" +
    "\001\002\000\004\067\352\001\002\000\006\056\333\066" +
    "\332\001\002\000\036\054\uffac\055\uffac\062\uffac\063\uffac" +
    "\064\uffac\065\uffac\070\uffac\071\uffac\072\uffac\076\uffac\130" +
    "\uffac\131\uffac\132\uffac\135\uffac\001\002\000\004\124\355" +
    "\001\002\000\004\130\356\001\002\000\004\124\357\001" +
    "\002\000\004\067\360\001\002\000\006\056\333\066\332" +
    "\001\002\000\036\054\uffad\055\uffad\062\uffad\063\uffad\064" +
    "\uffad\065\uffad\070\uffad\071\uffad\072\uffad\076\uffad\130\uffad" +
    "\131\uffad\132\uffad\135\uffad\001\002\000\004\124\363\001" +
    "\002\000\004\130\364\001\002\000\004\124\365\001\002" +
    "\000\004\067\366\001\002\000\006\056\333\066\332\001" +
    "\002\000\036\054\uffb0\055\uffb0\062\uffb0\063\uffb0\064\uffb0" +
    "\065\uffb0\070\uffb0\071\uffb0\072\uffb0\076\uffb0\130\uffb0\131" +
    "\uffb0\132\uffb0\135\uffb0\001\002\000\004\124\371\001\002" +
    "\000\006\130\373\134\372\001\002\000\004\124\uff8a\001" +
    "\002\000\004\124\uff8b\001\002\000\004\124\375\001\002" +
    "\000\004\067\376\001\002\000\006\056\333\066\332\001" +
    "\002\000\036\054\uffaf\055\uffaf\062\uffaf\063\uffaf\064\uffaf" +
    "\065\uffaf\070\uffaf\071\uffaf\072\uffaf\076\uffaf\130\uffaf\131" +
    "\uffaf\132\uffaf\135\uffaf\001\002\000\004\124\u0101\001\002" +
    "\000\004\130\u0102\001\002\000\004\124\u0103\001\002\000" +
    "\004\067\u0104\001\002\000\006\056\333\066\332\001\002" +
    "\000\036\054\uffae\055\uffae\062\uffae\063\uffae\064\uffae\065" +
    "\uffae\070\uffae\071\uffae\072\uffae\076\uffae\130\uffae\131\uffae" +
    "\132\uffae\135\uffae\001\002\000\036\054\041\055\035\062" +
    "\036\063\045\064\031\065\042\070\034\071\037\072\033" +
    "\076\032\130\040\131\043\132\046\135\030\001\002\000" +
    "\004\011\u0108\001\002\000\004\056\u0109\001\002\000\006" +
    "\003\147\055\146\001\002\000\006\002\uffde\125\uffde\001" +
    "\002\000\004\056\u010e\001\002\000\004\056\u010d\001\002" +
    "\000\006\002\uffd3\125\uffd3\001\002\000\004\055\u010f\001" +
    "\002\000\004\065\u0110\001\002\000\004\004\u0111\001\002" +
    "\000\004\056\u0112\001\002\000\006\002\uffd4\125\uffd4\001" +
    "\002\000\004\055\u0145\001\002\000\020\026\u011a\027\u0117" +
    "\030\u011b\031\u0119\032\u0116\034\u0118\040\u011c\001\002\000" +
    "\004\055\uffc0\001\002\000\004\054\u013f\001\002\000\004" +
    "\054\u0139\001\002\000\004\054\u0133\001\002\000\004\054" +
    "\u012d\001\002\000\004\054\u0128\001\002\000\004\054\u0122" +
    "\001\002\000\004\054\u011d\001\002\000\004\124\u011e\001" +
    "\002\000\004\130\u011f\001\002\000\004\067\u0120\001\002" +
    "\000\006\056\u0115\066\u0114\001\002\000\004\055\uffc1\001" +
    "\002\000\004\124\u0123\001\002\000\006\131\264\132\265" +
    "\001\002\000\004\124\u0125\001\002\000\004\067\u0126\001" +
    "\002\000\006\056\u0115\066\u0114\001\002\000\004\055\uffc3" +
    "\001\002\000\004\124\u0129\001\002\000\034\054\113\060" +
    "\107\062\111\063\120\064\106\065\114\076\110\124\122" +
    "\130\112\131\116\132\117\134\121\135\105\001\002\000" +
    "\004\067\u012b\001\002\000\006\056\u0115\066\u0114\001\002" +
    "\000\004\055\uffc2\001\002\000\004\124\u012e\001\002\000" +
    "\004\130\u012f\001\002\000\004\124\u0130\001\002\000\004" +
    "\067\u0131\001\002\000\006\056\u0115\066\u0114\001\002\000" +
    "\004\055\uffc4\001\002\000\004\124\u0134\001\002\000\004" +
    "\130\u0135\001\002\000\004\124\u0136\001\002\000\004\067" +
    "\u0137\001\002\000\006\056\u0115\066\u0114\001\002\000\004" +
    "\055\uffc7\001\002\000\004\124\u013a\001\002\000\006\130" +
    "\373\134\372\001\002\000\004\124\u013c\001\002\000\004" +
    "\067\u013d\001\002\000\006\056\u0115\066\u0114\001\002\000" +
    "\004\055\uffc5\001\002\000\004\124\u0140\001\002\000\004" +
    "\130\u0141\001\002\000\004\124\u0142\001\002\000\004\067" +
    "\u0143\001\002\000\006\056\u0115\066\u0114\001\002\000\004" +
    "\055\uffc6\001\002\000\026\011\u0150\012\u014c\013\u0152\014" +
    "\u014d\017\u0153\020\u014b\021\u014a\022\u0151\023\u014e\065\u014f" +
    "\001\002\000\004\016\u0147\001\002\000\004\056\u0148\001" +
    "\002\000\006\003\147\055\146\001\002\000\006\002\uffd6" +
    "\125\uffd6\001\002\000\006\056\u01b1\066\u01b0\001\002\000" +
    "\004\056\u01ad\001\002\000\006\056\u017e\066\u017d\001\002" +
    "\000\006\056\333\066\332\001\002\000\006\056\333\066" +
    "\332\001\002\000\004\016\u0168\001\002\000\006\056\333" +
    "\066\332\001\002\000\006\056\333\066\332\001\002\000" +
    "\006\056\246\066\245\001\002\000\006\056\166\066\165" +
    "\001\002\000\004\055\u0155\001\002\000\004\065\u0156\001" +
    "\002\000\004\017\u0157\001\002\000\004\056\u0158\001\002" +
    "\000\004\055\u0145\001\002\000\004\016\uffcb\001\002\000" +
    "\004\013\u015b\001\002\000\004\056\u015c\001\002\000\004" +
    "\055\u0145\001\002\000\004\016\uffca\001\002\000\036\054" +
    "\041\055\035\062\036\063\045\064\031\065\042\070\034" +
    "\071\037\072\033\076\032\130\040\131\043\132\046\135" +
    "\030\001\002\000\004\022\u0160\001\002\000\004\056\u0161" +
    "\001\002\000\004\055\u0145\001\002\000\004\016\uffcf\001" +
    "\002\000\036\054\041\055\035\062\036\063\045\064\031" +
    "\065\042\070\034\071\037\072\033\076\032\130\040\131" +
    "\043\132\046\135\030\001\002\000\004\011\u0165\001\002" +
    "\000\004\056\u0166\001\002\000\004\055\u0145\001\002\000" +
    "\004\016\uffd1\001\002\000\004\056\u0169\001\002\000\004" +
    "\016\uffc8\001\002\000\036\054\041\055\035\062\036\063" +
    "\045\064\031\065\042\070\034\071\037\072\033\076\032" +
    "\130\040\131\043\132\046\135\030\001\002\000\004\023" +
    "\u016c\001\002\000\004\056\u016d\001\002\000\004\055\u0145" +
    "\001\002\000\004\016\uffce\001\002\000\004\055\u0170\001" +
    "\002\000\006\015\u0175\065\u0176\001\002\000\004\014\u0172" +
    "\001\002\000\004\056\u0173\001\002\000\004\055\u0145\001" +
    "\002\000\004\016\uffd0\001\002\000\004\056\u0177\001\002" +
    "\000\004\014\uff8c\001\002\000\036\054\041\055\035\062" +
    "\036\063\045\064\031\065\042\070\034\071\037\072\033" +
    "\076\032\130\040\131\043\132\046\135\030\001\002\000" +
    "\004\015\u0179\001\002\000\004\056\u017a\001\002\000\004" +
    "\055\u0170\001\002\000\004\014\uff8d\001\002\000\036\054" +
    "\041\055\035\062\036\063\045\064\031\065\042\070\034" +
    "\071\037\072\033\076\032\130\040\131\043\132\046\135" +
    "\030\001\002\000\016\027\u0180\030\u0183\031\u0181\032\u017f" +
    "\033\u0184\034\u0182\001\002\000\036\054\uffa4\055\uffa4\062" +
    "\uffa4\063\uffa4\064\uffa4\065\uffa4\070\uffa4\071\uffa4\072\uffa4" +
    "\076\uffa4\130\uffa4\131\uffa4\132\uffa4\135\uffa4\001\002\000" +
    "\004\054\u01a3\001\002\000\004\054\u019d\001\002\000\004" +
    "\054\u0197\001\002\000\004\054\u0191\001\002\000\004\054" +
    "\u018b\001\002\000\004\054\u0185\001\002\000\004\124\u0186" +
    "\001\002\000\004\130\u0187\001\002\000\004\124\u0188\001" +
    "\002\000\004\067\u0189\001\002\000\006\056\u017e\066\u017d" +
    "\001\002\000\036\054\uffa9\055\uffa9\062\uffa9\063\uffa9\064" +
    "\uffa9\065\uffa9\070\uffa9\071\uffa9\072\uffa9\076\uffa9\130\uffa9" +
    "\131\uffa9\132\uffa9\135\uffa9\001\002\000\004\124\u018c\001" +
    "\002\000\006\131\264\132\265\001\002\000\004\124\u018e" +
    "\001\002\000\004\067\u018f\001\002\000\006\056\u017e\066" +
    "\u017d\001\002\000\036\054\uffa5\055\uffa5\062\uffa5\063\uffa5" +
    "\064\uffa5\065\uffa5\070\uffa5\071\uffa5\072\uffa5\076\uffa5\130" +
    "\uffa5\131\uffa5\132\uffa5\135\uffa5\001\002\000\004\124\u0192" +
    "\001\002\000\004\130\u0193\001\002\000\004\124\u0194\001" +
    "\002\000\004\067\u0195\001\002\000\006\056\u017e\066\u017d" +
    "\001\002\000\036\054\uffaa\055\uffaa\062\uffaa\063\uffaa\064" +
    "\uffaa\065\uffaa\070\uffaa\071\uffaa\072\uffaa\076\uffaa\130\uffaa" +
    "\131\uffaa\132\uffaa\135\uffaa\001\002\000\004\124\u0198\001" +
    "\002\000\004\130\u0199\001\002\000\004\124\u019a\001\002" +
    "\000\004\067\u019b\001\002\000\006\056\u017e\066\u017d\001" +
    "\002\000\036\054\uffa6\055\uffa6\062\uffa6\063\uffa6\064\uffa6" +
    "\065\uffa6\070\uffa6\071\uffa6\072\uffa6\076\uffa6\130\uffa6\131" +
    "\uffa6\132\uffa6\135\uffa6\001\002\000\004\124\u019e\001\002" +
    "\000\006\130\373\134\372\001\002\000\004\124\u01a0\001" +
    "\002\000\004\067\u01a1\001\002\000\006\056\u017e\066\u017d" +
    "\001\002\000\036\054\uffa8\055\uffa8\062\uffa8\063\uffa8\064" +
    "\uffa8\065\uffa8\070\uffa8\071\uffa8\072\uffa8\076\uffa8\130\uffa8" +
    "\131\uffa8\132\uffa8\135\uffa8\001\002\000\004\124\u01a4\001" +
    "\002\000\004\130\u01a5\001\002\000\004\124\u01a6\001\002" +
    "\000\004\067\u01a7\001\002\000\006\056\u017e\066\u017d\001" +
    "\002\000\036\054\uffa7\055\uffa7\062\uffa7\063\uffa7\064\uffa7" +
    "\065\uffa7\070\uffa7\071\uffa7\072\uffa7\076\uffa7\130\uffa7\131" +
    "\uffa7\132\uffa7\135\uffa7\001\002\000\004\012\u01aa\001\002" +
    "\000\004\056\u01ab\001\002\000\004\055\u0145\001\002\000" +
    "\004\016\uffcc\001\002\000\004\055\u0145\001\002\000\004" +
    "\016\uffcd\001\002\000\036\054\041\055\035\062\036\063" +
    "\045\064\031\065\042\070\034\071\037\072\033\076\032" +
    "\130\040\131\043\132\046\135\030\001\002\000\020\026" +
    "\u01b6\027\u01b3\030\u01b7\031\u01b5\032\u01b2\034\u01b4\045\u01b8" +
    "\001\002\000\036\054\uffb8\055\uffb8\062\uffb8\063\uffb8\064" +
    "\uffb8\065\uffb8\070\uffb8\071\uffb8\072\uffb8\076\uffb8\130\uffb8" +
    "\131\uffb8\132\uffb8\135\uffb8\001\002\000\004\054\u01e3\001" +
    "\002\000\004\054\u01dd\001\002\000\004\054\u01d7\001\002" +
    "\000\004\054\u01d1\001\002\000\004\054\u01cc\001\002\000" +
    "\004\054\u01c6\001\002\000\004\054\u01b9\001\002\000\004" +
    "\124\u01ba\001\002\000\006\077\u01bb\126\u01bc\001\002\000" +
    "\004\070\u01c3\001\002\000\004\070\u01c0\001\002\000\004" +
    "\067\u01be\001\002\000\006\056\u01b1\066\u01b0\001\002\000" +
    "\036\054\uffb9\055\uffb9\062\uffb9\063\uffb9\064\uffb9\065\uffb9" +
    "\070\uffb9\071\uffb9\072\uffb9\076\uffb9\130\uffb9\131\uffb9\132" +
    "\uffb9\135\uffb9\001\002\000\004\071\u01c1\001\002\000\004" +
    "\124\u01c2\001\002\000\004\067\uff9d\001\002\000\004\071" +
    "\u01c4\001\002\000\004\124\u01c5\001\002\000\004\067\uff9c" +
    "\001\002\000\004\124\u01c7\001\002\000\006\131\264\132" +
    "\265\001\002\000\004\124\u01c9\001\002\000\004\067\u01ca" +
    "\001\002\000\006\056\u01b1\066\u01b0\001\002\000\036\054" +
    "\uffbb\055\uffbb\062\uffbb\063\uffbb\064\uffbb\065\uffbb\070\uffbb" +
    "\071\uffbb\072\uffbb\076\uffbb\130\uffbb\131\uffbb\132\uffbb\135" +
    "\uffbb\001\002\000\004\124\u01cd\001\002\000\034\054\113" +
    "\060\107\062\111\063\120\064\106\065\114\076\110\124" +
    "\122\130\112\131\116\132\117\134\121\135\105\001\002" +
    "\000\004\067\u01cf\001\002\000\006\056\u01b1\066\u01b0\001" +
    "\002\000\036\054\uffba\055\uffba\062\uffba\063\uffba\064\uffba" +
    "\065\uffba\070\uffba\071\uffba\072\uffba\076\uffba\130\uffba\131" +
    "\uffba\132\uffba\135\uffba\001\002\000\004\124\u01d2\001\002" +
    "\000\004\130\u01d3\001\002\000\004\124\u01d4\001\002\000" +
    "\004\067\u01d5\001\002\000\006\056\u01b1\066\u01b0\001\002" +
    "\000\036\054\uffbc\055\uffbc\062\uffbc\063\uffbc\064\uffbc\065" +
    "\uffbc\070\uffbc\071\uffbc\072\uffbc\076\uffbc\130\uffbc\131\uffbc" +
    "\132\uffbc\135\uffbc\001\002\000\004\124\u01d8\001\002\000" +
    "\004\130\u01d9\001\002\000\004\124\u01da\001\002\000\004" +
    "\067\u01db\001\002\000\006\056\u01b1\066\u01b0\001\002\000" +
    "\036\054\uffbf\055\uffbf\062\uffbf\063\uffbf\064\uffbf\065\uffbf" +
    "\070\uffbf\071\uffbf\072\uffbf\076\uffbf\130\uffbf\131\uffbf\132" +
    "\uffbf\135\uffbf\001\002\000\004\124\u01de\001\002\000\006" +
    "\130\373\134\372\001\002\000\004\124\u01e0\001\002\000" +
    "\004\067\u01e1\001\002\000\006\056\u01b1\066\u01b0\001\002" +
    "\000\036\054\uffbd\055\uffbd\062\uffbd\063\uffbd\064\uffbd\065" +
    "\uffbd\070\uffbd\071\uffbd\072\uffbd\076\uffbd\130\uffbd\131\uffbd" +
    "\132\uffbd\135\uffbd\001\002\000\004\124\u01e4\001\002\000" +
    "\004\130\u01e5\001\002\000\004\124\u01e6\001\002\000\004" +
    "\067\u01e7\001\002\000\006\056\u01b1\066\u01b0\001\002\000" +
    "\036\054\uffbe\055\uffbe\062\uffbe\063\uffbe\064\uffbe\065\uffbe" +
    "\070\uffbe\071\uffbe\072\uffbe\076\uffbe\130\uffbe\131\uffbe\132" +
    "\uffbe\135\uffbe\001\002\000\004\021\u01ea\001\002\000\004" +
    "\056\u01eb\001\002\000\004\055\u0145\001\002\000\004\016" +
    "\uffc9\001\002\000\004\055\u0170\001\002\000\004\014\u01ef" +
    "\001\002\000\004\056\u01f0\001\002\000\006\003\147\055" +
    "\146\001\002\000\006\002\uffdd\125\uffdd\001\002\000\036" +
    "\054\041\055\035\062\036\063\045\064\031\065\042\070" +
    "\034\071\037\072\033\076\032\130\040\131\043\132\046" +
    "\135\030\001\002\000\004\023\u01f4\001\002\000\004\056" +
    "\u01f5\001\002\000\006\003\147\055\146\001\002\000\006" +
    "\002\uffdb\125\uffdb\001\002\000\036\054\041\055\035\062" +
    "\036\063\045\064\031\065\042\070\034\071\037\072\033" +
    "\076\032\130\040\131\043\132\046\135\030\001\002\000" +
    "\004\012\u01f9\001\002\000\004\056\u01fa\001\002\000\006" +
    "\003\147\055\146\001\002\000\006\002\uffd9\125\uffd9\001" +
    "\002\000\006\003\147\055\146\001\002\000\006\002\uffda" +
    "\125\uffda\001\002\000\036\054\041\055\035\062\036\063" +
    "\045\064\031\065\042\070\034\071\037\072\033\076\032" +
    "\130\040\131\043\132\046\135\030\001\002\000\004\021" +
    "\u0200\001\002\000\004\056\u0201\001\002\000\006\003\147" +
    "\055\146\001\002\000\006\002\uffd5\125\uffd5\001\002\000" +
    "\004\054\u0204\001\002\000\004\124\u0205\001\002\000\034" +
    "\054\113\060\107\062\111\063\120\064\106\065\114\076" +
    "\110\124\122\130\112\131\116\132\117\134\121\135\105" +
    "\001\002\000\004\067\u0207\001\002\000\006\056\074\066" +
    "\072\001\002\000\006\003\uffef\055\uffef\001\002\000\006" +
    "\003\147\055\146\001\002\000\004\002\ufff4\001\002\000" +
    "\010\055\u020d\077\u020c\126\u020f\001\002\000\004\070\u03e8" +
    "\001\002\000\004\065\u03e5\001\002\000\004\055\uff83\001" +
    "\002\000\004\070\u0210\001\002\000\004\071\u0211\001\002" +
    "\000\004\066\u0212\001\002\000\034\003\u021e\046\u0219\047" +
    "\u0213\050\u0218\051\u0221\052\u021b\067\u0216\107\u021f\110\u0214" +
    "\112\u0220\115\u021c\117\u0217\122\u0215\001\002\000\006\053" +
    "\u03c1\130\u03c0\001\002\000\004\070\u03bc\001\002\000\004" +
    "\070\u03b4\001\002\000\010\055\uff78\077\uff78\126\uff78\001" +
    "\002\000\004\070\u03a8\001\002\000\006\053\u038b\130\u038a" +
    "\001\002\000\006\053\u0367\130\u0366\001\002\000\010\055" +
    "\u020d\077\u020c\126\u020f\001\002\000\006\053\u032d\130\u032c" +
    "\001\002\000\004\070\u02a1\001\002\000\034\003\u021e\046" +
    "\u0219\047\u0213\050\u0218\051\u0221\052\u021b\067\u0216\107\u021f" +
    "\110\u0214\112\u0220\115\u021c\117\u0217\122\u0215\001\002\000" +
    "\034\003\u021e\046\u0219\047\u0213\050\u0218\051\u0221\052\u021b" +
    "\067\u0216\107\u021f\110\u0214\112\u0220\115\u021c\117\u0217\122" +
    "\u0215\001\002\000\004\070\u0297\001\002\000\004\070\u0236" +
    "\001\002\000\006\053\u0223\130\u0222\001\002\000\010\054" +
    "\u0226\072\u0225\073\u0228\001\002\000\004\130\u0224\001\002" +
    "\000\010\054\u0226\072\u0225\073\u0228\001\002\000\004\130" +
    "\u0233\001\002\000\006\105\u022a\133\u0229\001\002\000\036" +
    "\003\uff42\046\uff42\047\uff42\050\uff42\051\uff42\052\uff42\067" +
    "\uff42\076\uff42\107\uff42\110\uff42\112\uff42\115\uff42\117\uff42" +
    "\122\uff42\001\002\000\036\003\uff1d\046\uff1d\047\uff1d\050" +
    "\uff1d\051\uff1d\052\uff1d\067\uff1d\076\uff1d\107\uff1d\110\uff1d" +
    "\112\uff1d\115\uff1d\117\uff1d\122\uff1d\001\002\000\006\072" +
    "\u022d\073\u022f\001\002\000\004\070\u022b\001\002\000\004" +
    "\071\u022c\001\002\000\006\072\u022d\073\u022f\001\002\000" +
    "\004\130\u0230\001\002\000\036\003\uff1e\046\uff1e\047\uff1e" +
    "\050\uff1e\051\uff1e\052\uff1e\067\uff1e\076\uff1e\107\uff1e\110" +
    "\uff1e\112\uff1e\115\uff1e\117\uff1e\122\uff1e\001\002\000\036" +
    "\003\uff1b\046\uff1b\047\uff1b\050\uff1b\051\uff1b\052\uff1b\067" +
    "\uff1b\076\uff1b\107\uff1b\110\uff1b\112\uff1b\115\uff1b\117\uff1b" +
    "\122\uff1b\001\002\000\010\054\u0226\072\u0225\073\u0228\001" +
    "\002\000\036\003\uff1c\046\uff1c\047\uff1c\050\uff1c\051\uff1c" +
    "\052\uff1c\067\uff1c\076\uff1c\107\uff1c\110\uff1c\112\uff1c\115" +
    "\uff1c\117\uff1c\122\uff1c\001\002\000\036\003\uff20\046\uff20" +
    "\047\uff20\050\uff20\051\uff20\052\uff20\067\uff20\076\uff20\107" +
    "\uff20\110\uff20\112\uff20\115\uff20\117\uff20\122\uff20\001\002" +
    "\000\010\054\u0226\072\u0225\073\u0228\001\002\000\036\003" +
    "\uff1f\046\uff1f\047\uff1f\050\uff1f\051\uff1f\052\uff1f\067\uff1f" +
    "\076\uff1f\107\uff1f\110\uff1f\112\uff1f\115\uff1f\117\uff1f\122" +
    "\uff1f\001\002\000\036\003\uff47\046\uff47\047\uff47\050\uff47" +
    "\051\uff47\052\uff47\067\uff47\076\uff47\107\uff47\110\uff47\112" +
    "\uff47\115\uff47\117\uff47\122\uff47\001\002\000\006\125\u0238" +
    "\130\u0237\001\002\000\006\071\u0255\072\u0256\001\002\000" +
    "\042\003\u024a\054\u023f\055\u0244\062\u0241\063\u024e\064\u024c" +
    "\065\u0240\070\u0249\071\u024b\072\u0247\076\u0245\125\u023c\130" +
    "\u0246\131\u0243\132\u024d\135\u023e\001\002\000\004\073\u023a" +
    "\001\002\000\034\003\u021e\046\u0219\047\u0213\050\u0218\051" +
    "\u0221\052\u021b\067\u0216\107\u021f\110\u0214\112\u0220\115\u021c" +
    "\117\u0217\122\u0215\001\002\000\010\055\uff79\077\uff79\126" +
    "\uff79\001\002\000\006\071\ufedc\072\ufedc\001\002\000\006" +
    "\071\ufef8\072\ufef8\001\002\000\036\054\u023f\062\u0241\063" +
    "\u024e\064\u024c\065\u0240\070\u0249\071\u024b\072\u0247\076\u0245" +
    "\125\u023c\130\u0246\131\u0243\132\u024d\135\u023e\001\002\000" +
    "\036\054\u023f\062\u0241\063\u024e\064\u024c\065\u0240\070\u0249" +
    "\071\u024b\072\u0247\076\u0245\125\u023c\130\u0246\131\u0243\132" +
    "\u024d\135\u023e\001\002\000\036\054\u023f\062\u0241\063\u024e" +
    "\064\u024c\065\u0240\070\u0249\071\u024b\072\u0247\076\u0245\125" +
    "\u023c\130\u0246\131\u0243\132\u024d\135\u023e\001\002\000\036" +
    "\054\u023f\062\u0241\063\u024e\064\u024c\065\u0240\070\u0249\071" +
    "\u024b\072\u0247\076\u0245\125\u023c\130\u0246\131\u0243\132\u024d" +
    "\135\u023e\001\002\000\004\125\u0291\001\002\000\036\054" +
    "\u023f\062\u0241\063\u024e\064\u024c\065\u0240\070\u0249\071\u024b" +
    "\072\u0247\076\u0245\125\u023c\130\u0246\131\u0243\132\u024d\135" +
    "\u023e\001\002\000\026\011\u0266\012\u0262\013\u0268\014\u0264" +
    "\016\u0265\017\u0269\020\u0261\021\u0260\022\u0267\023\u0263\001" +
    "\002\000\036\054\u023f\062\u0241\063\u024e\064\u024c\065\u0240" +
    "\070\u0249\071\u024b\072\u0247\076\u0245\125\u023c\130\u0246\131" +
    "\u0243\132\u024d\135\u023e\001\002\000\036\054\u023f\062\u0241" +
    "\063\u024e\064\u024c\065\u0240\070\u0249\071\u024b\072\u0247\076" +
    "\u0245\125\u023c\130\u0246\131\u0243\132\u024d\135\u023e\001\002" +
    "\000\036\054\u023f\062\u0241\063\u024e\064\u024c\065\u0240\070" +
    "\u0249\071\u024b\072\u0247\076\u0245\125\u023c\130\u0246\131\u0243" +
    "\132\u024d\135\u023e\001\002\000\006\071\u0255\072\u0256\001" +
    "\002\000\036\054\u023f\062\u0241\063\u024e\064\u024c\065\u0240" +
    "\070\u0249\071\u024b\072\u0247\076\u0245\125\u023c\130\u0246\131" +
    "\u0243\132\u024d\135\u023e\001\002\000\006\003\147\055\146" +
    "\001\002\000\036\054\u023f\062\u0241\063\u024e\064\u024c\065" +
    "\u0240\070\u0249\071\u024b\072\u0247\076\u0245\125\u023c\130\u0246" +
    "\131\u0243\132\u024d\135\u023e\001\002\000\036\054\u023f\062" +
    "\u0241\063\u024e\064\u024c\065\u0240\070\u0249\071\u024b\072\u0247" +
    "\076\u0245\125\u023c\130\u0246\131\u0243\132\u024d\135\u023e\001" +
    "\002\000\036\054\u023f\062\u0241\063\u024e\064\u024c\065\u0240" +
    "\070\u0249\071\u024b\072\u0247\076\u0245\125\u023c\130\u0246\131" +
    "\u0243\132\u024d\135\u023e\001\002\000\036\054\u023f\062\u0241" +
    "\063\u024e\064\u024c\065\u0240\070\u0249\071\u024b\072\u0247\076" +
    "\u0245\125\u023c\130\u0246\131\u0243\132\u024d\135\u023e\001\002" +
    "\000\006\071\ufee4\072\ufee4\001\002\000\006\071\ufee6\072" +
    "\ufee6\001\002\000\006\071\ufee3\072\ufee3\001\002\000\006" +
    "\071\ufedd\072\ufedd\001\002\000\004\125\ufeec\001\002\000" +
    "\006\071\ufede\072\ufede\001\002\000\004\073\ufef9\001\002" +
    "\000\006\125\u0259\130\u0258\001\002\000\004\073\ufefc\001" +
    "\002\000\006\071\u0255\072\u0256\001\002\000\042\003\u024a" +
    "\054\u023f\055\u0244\062\u0241\063\u024e\064\u024c\065\u0240\070" +
    "\u0249\071\u024b\072\u0247\076\u0245\125\u023c\130\u0246\131\u0243" +
    "\132\u024d\135\u023e\001\002\000\006\071\u0255\072\u0256\001" +
    "\002\000\004\073\ufefa\001\002\000\004\073\ufefb\001\002" +
    "\000\006\071\ufee0\072\ufee0\001\002\000\006\071\ufee8\072" +
    "\ufee8\001\002\000\006\071\ufee1\072\ufee1\001\002\000\006" +
    "\056\u01b1\066\u01b0\001\002\000\004\056\u028a\001\002\000" +
    "\006\056\u017e\066\u017d\001\002\000\006\056\333\066\332" +
    "\001\002\000\006\056\333\066\332\001\002\000\006\056" +
    "\u0115\066\u0114\001\002\000\006\056\333\066\332\001\002" +
    "\000\006\056\333\066\332\001\002\000\006\056\246\066" +
    "\245\001\002\000\006\056\166\066\165\001\002\000\004" +
    "\055\u026b\001\002\000\004\065\u026c\001\002\000\004\017" +
    "\u026d\001\002\000\004\056\u026e\001\002\000\004\125\ufef0" +
    "\001\002\000\004\013\u0270\001\002\000\004\056\u0271\001" +
    "\002\000\004\125\ufeef\001\002\000\036\054\041\055\035" +
    "\062\036\063\045\064\031\065\042\070\034\071\037\072" +
    "\033\076\032\130\040\131\043\132\046\135\030\001\002" +
    "\000\004\022\u0274\001\002\000\004\056\u0275\001\002\000" +
    "\004\125\ufef4\001\002\000\036\054\041\055\035\062\036" +
    "\063\045\064\031\065\042\070\034\071\037\072\033\076" +
    "\032\130\040\131\043\132\046\135\030\001\002\000\004" +
    "\011\u0278\001\002\000\004\056\u0279\001\002\000\004\125" +
    "\ufef6\001\002\000\004\055\u0145\001\002\000\004\016\u027c" +
    "\001\002\000\004\056\u027d\001\002\000\004\125\ufeee\001" +
    "\002\000\004\055\u0170\001\002\000\004\014\u0280\001\002" +
    "\000\004\056\u0281\001\002\000\004\125\ufef5\001\002\000" +
    "\036\054\041\055\035\062\036\063\045\064\031\065\042" +
    "\070\034\071\037\072\033\076\032\130\040\131\043\132" +
    "\046\135\030\001\002\000\004\023\u0284\001\002\000\004" +
    "\056\u0285\001\002\000\004\125\ufef3\001\002\000\036\054" +
    "\041\055\035\062\036\063\045\064\031\065\042\070\034" +
    "\071\037\072\033\076\032\130\040\131\043\132\046\135" +
    "\030\001\002\000\004\012\u0288\001\002\000\004\056\u0289" +
    "\001\002\000\004\125\ufef1\001\002\000\006\003\147\055" +
    "\146\001\002\000\004\125\ufef2\001\002\000\036\054\041" +
    "\055\035\062\036\063\045\064\031\065\042\070\034\071" +
    "\037\072\033\076\032\130\040\131\043\132\046\135\030" +
    "\001\002\000\004\021\u028e\001\002\000\004\056\u028f\001" +
    "\002\000\004\125\ufeed\001\002\000\006\071\ufee7\072\ufee7" +
    "\001\002\000\006\071\ufef7\072\ufef7\001\002\000\006\071" +
    "\ufee5\072\ufee5\001\002\000\006\071\ufee2\072\ufee2\001\002" +
    "\000\006\071\ufedf\072\ufedf\001\002\000\006\071\ufee9\072" +
    "\ufee9\001\002\000\004\073\ufefd\001\002\000\006\125\u029a" +
    "\130\u0298\001\002\000\004\071\ufeeb\001\002\000\004\071" +
    "\u029c\001\002\000\036\054\u023f\062\u0241\063\u024e\064\u024c" +
    "\065\u0240\070\u0249\071\u024b\072\u0247\076\u0245\125\u023c\130" +
    "\u0246\131\u0243\132\u024d\135\u023e\001\002\000\004\071\ufeea" +
    "\001\002\000\004\073\u029d\001\002\000\034\003\u021e\046" +
    "\u0219\047\u0213\050\u0218\051\u0221\052\u021b\067\u0216\107\u021f" +
    "\110\u0214\112\u0220\115\u021c\117\u0217\122\u0215\001\002\000" +
    "\010\055\uff7e\077\uff7e\126\uff7e\001\002\000\010\055\uff77" +
    "\077\uff77\126\uff77\001\002\000\010\055\uff7f\077\uff7f\126" +
    "\uff7f\001\002\000\020\061\u02a9\070\u02a3\124\u02ac\127\u02a7" +
    "\130\u02a8\131\u02aa\132\u02ab\001\002\000\030\054\uff54\055" +
    "\uff54\056\uff54\057\uff54\060\uff54\061\uff54\062\u0325\063\u0324" +
    "\064\u0327\065\u0326\071\uff54\001\002\000\012\070\u02a3\130" +
    "\u02a8\131\u02aa\132\u02ab\001\002\000\020\054\uff68\055\uff68" +
    "\056\uff68\057\uff68\060\uff68\061\uff68\071\uff68\001\002\000" +
    "\020\054\u030c\055\u0307\056\u030b\057\u030e\060\u0305\061\u030d" +
    "\071\u030a\001\002\000\004\121\u02b2\001\002\000\020\054" +
    "\uff69\055\uff69\056\uff69\057\uff69\060\uff69\061\uff69\071\uff69" +
    "\001\002\000\030\054\uff4a\055\uff4a\056\uff4a\057\uff4a\060" +
    "\uff4a\061\uff4a\062\uff4a\063\uff4a\064\uff4a\065\uff4a\071\uff4a" +
    "\001\002\000\020\061\u02a9\070\u02a3\124\u02ac\127\u02a7\130" +
    "\u02a8\131\u02aa\132\u02ab\001\002\000\030\054\uff4c\055\uff4c" +
    "\056\uff4c\057\uff4c\060\uff4c\061\uff4c\062\uff4c\063\uff4c\064" +
    "\uff4c\065\uff4c\071\uff4c\001\002\000\030\054\uff4b\055\uff4b" +
    "\056\uff4b\057\uff4b\060\uff4b\061\uff4b\062\uff4b\063\uff4b\064" +
    "\uff4b\065\uff4b\071\uff4b\001\002\000\006\130\u02ad\135\u02ae" +
    "\001\002\000\004\124\u02b0\001\002\000\004\124\u02af\001" +
    "\002\000\020\054\uff66\055\uff66\056\uff66\057\uff66\060\uff66" +
    "\061\uff66\071\uff66\001\002\000\020\054\uff67\055\uff67\056" +
    "\uff67\057\uff67\060\uff67\061\uff67\071\uff67\001\002\000\006" +
    "\121\uff6d\123\uff6d\001\002\000\004\113\u02b3\001\002\000" +
    "\004\074\u02b4\001\002\000\004\076\u02b5\001\002\000\034" +
    "\003\u02bc\046\u0219\047\u0213\050\u0218\051\u0221\052\u021b\076" +
    "\u02b9\107\u02bd\110\u02b6\112\u02bf\115\u02ba\117\u02b7\122\u02b8" +
    "\001\002\000\004\070\u0301\001\002\000\004\070\u02ee\001" +
    "\002\000\004\070\u02e6\001\002\000\004\075\u02e4\001\002" +
    "\000\004\070\u02db\001\002\000\034\003\u02bc\046\u0219\047" +
    "\u0213\050\u0218\051\u0221\052\u021b\076\u02b9\107\u02bd\110\u02b6" +
    "\112\u02bf\115\u02ba\117\u02b7\122\u02b8\001\002\000\034\003" +
    "\u02bc\046\u0219\047\u0213\050\u0218\051\u0221\052\u021b\076\u02b9" +
    "\107\u02bd\110\u02b6\112\u02bf\115\u02ba\117\u02b7\122\u02b8\001" +
    "\002\000\004\070\u02d4\001\002\000\036\003\uff5a\046\uff5a" +
    "\047\uff5a\050\uff5a\051\uff5a\052\uff5a\067\uff5a\107\uff5a\110" +
    "\uff5a\112\uff5a\115\uff5a\116\u02c5\117\uff5a\122\uff5a\001\002" +
    "\000\004\070\u02c0\001\002\000\006\125\u0238\130\u0237\001" +
    "\002\000\004\073\u02c2\001\002\000\034\003\u02bc\046\u0219" +
    "\047\u0213\050\u0218\051\u0221\052\u021b\076\u02b9\107\u02bd\110" +
    "\u02b6\112\u02bf\115\u02ba\117\u02b7\122\u02b8\001\002\000\040" +
    "\003\uff70\046\uff70\047\uff70\050\uff70\051\uff70\052\uff70\067" +
    "\uff70\076\uff70\107\uff70\110\uff70\112\uff70\115\uff70\116\uff70" +
    "\117\uff70\122\uff70\001\002\000\034\003\u021e\046\u0219\047" +
    "\u0213\050\u0218\051\u0221\052\u021b\067\u0216\107\u021f\110\u0214" +
    "\112\u0220\115\u021c\117\u0217\122\u0215\001\002\000\006\113" +
    "\u02c6\115\u02c7\001\002\000\004\074\u02d0\001\002\000\004" +
    "\070\u02c8\001\002\000\020\061\u02a9\070\u02a3\124\u02ac\127" +
    "\u02a7\130\u02a8\131\u02aa\132\u02ab\001\002\000\004\121\u02ca" +
    "\001\002\000\004\113\u02cb\001\002\000\004\074\u02cc\001" +
    "\002\000\004\076\u02cd\001\002\000\034\003\u02bc\046\u0219" +
    "\047\u0213\050\u0218\051\u0221\052\u021b\076\u02b9\107\u02bd\110" +
    "\u02b6\112\u02bf\115\u02ba\117\u02b7\122\u02b8\001\002\000\040" +
    "\003\uff5a\046\uff5a\047\uff5a\050\uff5a\051\uff5a\052\uff5a\067" +
    "\uff5a\076\uff5a\107\uff5a\110\uff5a\112\uff5a\115\uff5a\116\u02c5" +
    "\117\uff5a\122\uff5a\001\002\000\036\003\uff5c\046\uff5c\047" +
    "\uff5c\050\uff5c\051\uff5c\052\uff5c\067\uff5c\076\uff5c\107\uff5c" +
    "\110\uff5c\112\uff5c\115\uff5c\117\uff5c\122\uff5c\001\002\000" +
    "\004\076\u02d1\001\002\000\034\003\u02bc\046\u0219\047\u0213" +
    "\050\u0218\051\u0221\052\u021b\076\u02b9\107\u02bd\110\u02b6\112" +
    "\u02bf\115\u02ba\117\u02b7\122\u02b8\001\002\000\036\003\uff5b" +
    "\046\uff5b\047\uff5b\050\uff5b\051\uff5b\052\uff5b\067\uff5b\076" +
    "\uff5b\107\uff5b\110\uff5b\112\uff5b\115\uff5b\117\uff5b\122\uff5b" +
    "\001\002\000\010\055\uff7c\077\uff7c\126\uff7c\001\002\000" +
    "\006\125\u029a\130\u0298\001\002\000\004\071\u02d6\001\002" +
    "\000\004\073\u02d7\001\002\000\034\003\u02bc\046\u0219\047" +
    "\u0213\050\u0218\051\u0221\052\u021b\076\u02b9\107\u02bd\110\u02b6" +
    "\112\u02bf\115\u02ba\117\u02b7\122\u02b8\001\002\000\040\003" +
    "\uff75\046\uff75\047\uff75\050\uff75\051\uff75\052\uff75\067\uff75" +
    "\076\uff75\107\uff75\110\uff75\112\uff75\115\uff75\116\uff75\117" +
    "\uff75\122\uff75\001\002\000\040\003\uff6e\046\uff6e\047\uff6e" +
    "\050\uff6e\051\uff6e\052\uff6e\067\uff6e\076\uff6e\107\uff6e\110" +
    "\uff6e\112\uff6e\115\uff6e\116\uff6e\117\uff6e\122\uff6e\001\002" +
    "\000\040\003\uff76\046\uff76\047\uff76\050\uff76\051\uff76\052" +
    "\uff76\067\uff76\076\uff76\107\uff76\110\uff76\112\uff76\115\uff76" +
    "\116\uff76\117\uff76\122\uff76\001\002\000\020\061\u02a9\070" +
    "\u02a3\124\u02ac\127\u02a7\130\u02a8\131\u02aa\132\u02ab\001\002" +
    "\000\004\121\u02dd\001\002\000\004\113\u02de\001\002\000" +
    "\004\074\u02df\001\002\000\004\076\u02e0\001\002\000\034" +
    "\003\u02bc\046\u0219\047\u0213\050\u0218\051\u0221\052\u021b\076" +
    "\u02b9\107\u02bd\110\u02b6\112\u02bf\115\u02ba\117\u02b7\122\u02b8" +
    "\001\002\000\036\003\uff5a\046\uff5a\047\uff5a\050\uff5a\051" +
    "\uff5a\052\uff5a\076\uff5a\107\uff5a\110\uff5a\112\uff5a\115\uff5a" +
    "\116\u02c5\117\uff5a\122\uff5a\001\002\000\034\003\u02bc\046" +
    "\u0219\047\u0213\050\u0218\051\u0221\052\u021b\076\u02b9\107\u02bd" +
    "\110\u02b6\112\u02bf\115\u02ba\117\u02b7\122\u02b8\001\002\000" +
    "\040\003\uff73\046\uff73\047\uff73\050\uff73\051\uff73\052\uff73" +
    "\067\uff73\076\uff73\107\uff73\110\uff73\112\uff73\115\uff73\116" +
    "\uff73\117\uff73\122\uff73\001\002\000\004\114\u02e5\001\002" +
    "\000\040\003\uff6f\046\uff6f\047\uff6f\050\uff6f\051\uff6f\052" +
    "\uff6f\067\uff6f\076\uff6f\107\uff6f\110\uff6f\112\uff6f\115\uff6f" +
    "\116\uff6f\117\uff6f\122\uff6f\001\002\000\020\061\u02a9\070" +
    "\u02a3\124\u02ac\127\u02a7\130\u02a8\131\u02aa\132\u02ab\001\002" +
    "\000\004\123\u02e8\001\002\000\004\113\u02e9\001\002\000" +
    "\004\074\u02ea\001\002\000\004\076\u02eb\001\002\000\034" +
    "\003\u02bc\046\u0219\047\u0213\050\u0218\051\u0221\052\u021b\076" +
    "\u02b9\107\u02bd\110\u02b6\112\u02bf\115\u02ba\117\u02b7\122\u02b8" +
    "\001\002\000\034\003\u02bc\046\u0219\047\u0213\050\u0218\051" +
    "\u0221\052\u021b\076\u02b9\107\u02bd\110\u02b6\112\u02bf\115\u02ba" +
    "\117\u02b7\122\u02b8\001\002\000\040\003\uff71\046\uff71\047" +
    "\uff71\050\uff71\051\uff71\052\uff71\067\uff71\076\uff71\107\uff71" +
    "\110\uff71\112\uff71\115\uff71\116\uff71\117\uff71\122\uff71\001" +
    "\002\000\006\046\u02f1\130\u02ef\001\002\000\004\054\u02ff" +
    "\001\002\000\004\071\u02f5\001\002\000\004\130\u02f2\001" +
    "\002\000\004\054\u02f3\001\002\000\010\130\u02a8\131\u02aa" +
    "\132\u02ab\001\002\000\004\071\uff4d\001\002\000\004\120" +
    "\u02f6\001\002\000\004\070\u02f7\001\002\000\012\070\u02a3" +
    "\130\u02a8\131\u02aa\132\u02ab\001\002\000\004\071\u02f9\001" +
    "\002\000\004\113\u02fa\001\002\000\004\074\u02fb\001\002" +
    "\000\004\076\u02fc\001\002\000\034\003\u02bc\046\u0219\047" +
    "\u0213\050\u0218\051\u0221\052\u021b\076\u02b9\107\u02bd\110\u02b6" +
    "\112\u02bf\115\u02ba\117\u02b7\122\u02b8\001\002\000\034\003" +
    "\u02bc\046\u0219\047\u0213\050\u0218\051\u0221\052\u021b\076\u02b9" +
    "\107\u02bd\110\u02b6\112\u02bf\115\u02ba\117\u02b7\122\u02b8\001" +
    "\002\000\040\003\uff72\046\uff72\047\uff72\050\uff72\051\uff72" +
    "\052\uff72\067\uff72\076\uff72\107\uff72\110\uff72\112\uff72\115" +
    "\uff72\116\uff72\117\uff72\122\uff72\001\002\000\010\130\u02a8" +
    "\131\u02aa\132\u02ab\001\002\000\004\071\uff4e\001\002\000" +
    "\004\071\u0302\001\002\000\004\073\u0303\001\002\000\034" +
    "\003\u02bc\046\u0219\047\u0213\050\u0218\051\u0221\052\u021b\076" +
    "\u02b9\107\u02bd\110\u02b6\112\u02bf\115\u02ba\117\u02b7\122\u02b8" +
    "\001\002\000\040\003\uff74\046\uff74\047\uff74\050\uff74\051" +
    "\uff74\052\uff74\067\uff74\076\uff74\107\uff74\110\uff74\112\uff74" +
    "\115\uff74\116\uff74\117\uff74\122\uff74\001\002\000\004\060" +
    "\u0317\001\002\000\006\121\uff6a\123\uff6a\001\002\000\020" +
    "\054\u0316\070\uff60\124\uff60\127\uff60\130\uff60\131\uff60\132" +
    "\uff60\001\002\000\016\070\u02a3\124\u02ac\127\u02a7\130\u02a8" +
    "\131\u02aa\132\u02ab\001\002\000\006\121\uff6c\123\uff6c\001" +
    "\002\000\006\121\uff63\123\uff63\001\002\000\020\054\u0313" +
    "\070\uff5e\124\uff5e\127\uff5e\130\uff5e\131\uff5e\132\uff5e\001" +
    "\002\000\004\054\u0312\001\002\000\004\054\u0311\001\002" +
    "\000\004\057\u030f\001\002\000\020\061\u02a9\070\u02a3\124" +
    "\u02ac\127\u02a7\130\u02a8\131\u02aa\132\u02ab\001\002\000\006" +
    "\121\uff64\123\uff64\001\002\000\016\070\uff61\124\uff61\127" +
    "\uff61\130\uff61\131\uff61\132\uff61\001\002\000\016\070\uff62" +
    "\124\uff62\127\uff62\130\uff62\131\uff62\132\uff62\001\002\000" +
    "\016\070\uff5d\124\uff5d\127\uff5d\130\uff5d\131\uff5d\132\uff5d" +
    "\001\002\000\010\057\u030e\060\u0305\071\u030a\001\002\000" +
    "\006\121\uff6b\123\uff6b\001\002\000\016\070\uff5f\124\uff5f" +
    "\127\uff5f\130\uff5f\131\uff5f\132\uff5f\001\002\000\020\061" +
    "\u02a9\070\u02a3\124\u02ac\127\u02a7\130\u02a8\131\u02aa\132\u02ab" +
    "\001\002\000\006\121\uff65\123\uff65\001\002\000\004\071" +
    "\u031a\001\002\000\030\054\uff4f\055\uff4f\056\uff4f\057\uff4f" +
    "\060\uff4f\061\uff4f\062\u031c\063\u031b\064\u031f\065\u031d\071" +
    "\uff4f\001\002\000\012\070\u02a3\130\u02a8\131\u02aa\132\u02ab" +
    "\001\002\000\012\070\u02a3\130\u02a8\131\u02aa\132\u02ab\001" +
    "\002\000\012\070\u02a3\130\u02a8\131\u02aa\132\u02ab\001\002" +
    "\000\020\054\uff55\055\uff55\056\uff55\057\uff55\060\uff55\061" +
    "\uff55\071\uff55\001\002\000\012\070\u02a3\130\u02a8\131\u02aa" +
    "\132\u02ab\001\002\000\020\054\uff51\055\uff51\056\uff51\057" +
    "\uff51\060\uff51\061\uff51\071\uff51\001\002\000\020\054\uff50" +
    "\055\uff50\056\uff50\057\uff50\060\uff50\061\uff50\071\uff50\001" +
    "\002\000\020\054\uff53\055\uff53\056\uff53\057\uff53\060\uff53" +
    "\061\uff53\071\uff53\001\002\000\020\054\uff52\055\uff52\056" +
    "\uff52\057\uff52\060\uff52\061\uff52\071\uff52\001\002\000\012" +
    "\070\u02a3\130\u02a8\131\u02aa\132\u02ab\001\002\000\012\070" +
    "\u02a3\130\u02a8\131\u02aa\132\u02ab\001\002\000\012\070\u02a3" +
    "\130\u02a8\131\u02aa\132\u02ab\001\002\000\012\070\u02a3\130" +
    "\u02a8\131\u02aa\132\u02ab\001\002\000\020\054\uff57\055\uff57" +
    "\056\uff57\057\uff57\060\uff57\061\uff57\071\uff57\001\002\000" +
    "\020\054\uff56\055\uff56\056\uff56\057\uff56\060\uff56\061\uff56" +
    "\071\uff56\001\002\000\020\054\uff59\055\uff59\056\uff59\057" +
    "\uff59\060\uff59\061\uff59\071\uff59\001\002\000\020\054\uff58" +
    "\055\uff58\056\uff58\057\uff58\060\uff58\061\uff58\071\uff58\001" +
    "\002\000\010\054\u0330\072\u032f\073\u0331\001\002\000\004" +
    "\130\u032e\001\002\000\010\054\u0330\072\u032f\073\u0331\001" +
    "\002\000\004\130\u0362\001\002\000\030\100\u0335\101\u0338" +
    "\102\u0339\103\u0333\104\u0337\111\u0336\124\u033f\130\u0334\131" +
    "\u033a\132\u033b\133\u033d\001\002\000\036\003\uff30\046\uff30" +
    "\047\uff30\050\uff30\051\uff30\052\uff30\067\uff30\076\uff30\107" +
    "\uff30\110\uff30\112\uff30\115\uff30\117\uff30\122\uff30\001\002" +
    "\000\036\003\uff41\046\uff41\047\uff41\050\uff41\051\uff41\052" +
    "\uff41\067\uff41\076\uff41\107\uff41\110\uff41\112\uff41\115\uff41" +
    "\117\uff41\122\uff41\001\002\000\004\070\u035f\001\002\000" +
    "\010\062\uff21\072\uff21\073\uff21\001\002\000\004\070\u035c" +
    "\001\002\000\004\070\u0356\001\002\000\004\070\u0353\001" +
    "\002\000\004\070\u0350\001\002\000\004\070\u034a\001\002" +
    "\000\010\062\uff25\072\uff25\073\uff25\001\002\000\010\062" +
    "\uff23\072\uff23\073\uff23\001\002\000\010\062\u0343\072\u0341" +
    "\073\u0344\001\002\000\010\062\uff24\072\uff24\073\uff24\001" +
    "\002\000\010\062\u0343\072\u0341\073\u0344\001\002\000\034" +
    "\054\113\060\107\062\111\063\120\064\106\065\114\076" +
    "\110\124\122\130\112\131\116\132\117\134\121\135\105" +
    "\001\002\000\010\062\uff22\072\uff22\073\uff22\001\002\000" +
    "\004\130\u0347\001\002\000\036\003\uff31\046\uff31\047\uff31" +
    "\050\uff31\051\uff31\052\uff31\067\uff31\076\uff31\107\uff31\110" +
    "\uff31\112\uff31\115\uff31\117\uff31\122\uff31\001\002\000\014" +
    "\124\u033f\130\u0334\131\u033a\132\u033b\133\u033d\001\002\000" +
    "\036\003\uff26\046\uff26\047\uff26\050\uff26\051\uff26\052\uff26" +
    "\067\uff26\076\uff26\107\uff26\110\uff26\112\uff26\115\uff26\117" +
    "\uff26\122\uff26\001\002\000\010\062\u0343\072\u0341\073\u0344" +
    "\001\002\000\036\003\uff28\046\uff28\047\uff28\050\uff28\051" +
    "\uff28\052\uff28\067\uff28\076\uff28\107\uff28\110\uff28\112\uff28" +
    "\115\uff28\117\uff28\122\uff28\001\002\000\010\054\u0330\072" +
    "\u032f\073\u0331\001\002\000\036\003\uff27\046\uff27\047\uff27" +
    "\050\uff27\051\uff27\052\uff27\067\uff27\076\uff27\107\uff27\110" +
    "\uff27\112\uff27\115\uff27\117\uff27\122\uff27\001\002\000\036" +
    "\003\uff34\046\uff34\047\uff34\050\uff34\051\uff34\052\uff34\067" +
    "\uff34\076\uff34\107\uff34\110\uff34\112\uff34\115\uff34\117\uff34" +
    "\122\uff34\001\002\000\006\124\u034d\130\u034b\001\002\000" +
    "\004\071\uff2a\001\002\000\004\071\u034f\001\002\000\034" +
    "\054\113\060\107\062\111\063\120\064\106\065\114\076" +
    "\110\124\122\130\112\131\116\132\117\134\121\135\105" +
    "\001\002\000\004\071\uff29\001\002\000\010\062\uff2d\072" +
    "\uff2d\073\uff2d\001\002\000\006\124\u034d\130\u034b\001\002" +
    "\000\004\071\u0352\001\002\000\010\062\uff2e\072\uff2e\073" +
    "\uff2e\001\002\000\006\124\u034d\130\u034b\001\002\000\004" +
    "\071\u0355\001\002\000\010\062\uff2b\072\uff2b\073\uff2b\001" +
    "\002\000\004\125\u0357\001\002\000\004\130\u0358\001\002" +
    "\000\004\125\u0359\001\002\000\004\071\u035a\001\002\000" +
    "\010\062\u0343\072\u0341\073\u0344\001\002\000\036\003\uff32" +
    "\046\uff32\047\uff32\050\uff32\051\uff32\052\uff32\067\uff32\076" +
    "\uff32\107\uff32\110\uff32\112\uff32\115\uff32\117\uff32\122\uff32" +
    "\001\002\000\006\124\u034d\130\u034b\001\002\000\004\071" +
    "\u035e\001\002\000\010\062\uff2f\072\uff2f\073\uff2f\001\002" +
    "\000\006\124\u034d\130\u034b\001\002\000\004\071\u0361\001" +
    "\002\000\010\062\uff2c\072\uff2c\073\uff2c\001\002\000\010" +
    "\054\u0330\072\u032f\073\u0331\001\002\000\036\003\uff33\046" +
    "\uff33\047\uff33\050\uff33\051\uff33\052\uff33\067\uff33\076\uff33" +
    "\107\uff33\110\uff33\112\uff33\115\uff33\117\uff33\122\uff33\001" +
    "\002\000\036\003\uff46\046\uff46\047\uff46\050\uff46\051\uff46" +
    "\052\uff46\067\uff46\076\uff46\107\uff46\110\uff46\112\uff46\115" +
    "\uff46\117\uff46\122\uff46\001\002\000\004\055\uff81\001\002" +
    "\000\010\054\u036a\072\u0369\073\u036c\001\002\000\004\130" +
    "\u0368\001\002\000\010\054\u036a\072\u0369\073\u036c\001\002" +
    "\000\004\130\u0387\001\002\000\014\106\u0371\127\u036d\130" +
    "\u036f\131\u0370\133\u0372\001\002\000\036\003\uff44\046\uff44" +
    "\047\uff44\050\uff44\051\uff44\052\uff44\067\uff44\076\uff44\107" +
    "\uff44\110\uff44\112\uff44\115\uff44\117\uff44\122\uff44\001\002" +
    "\000\036\003\uff17\046\uff17\047\uff17\050\uff17\051\uff17\052" +
    "\uff17\067\uff17\076\uff17\107\uff17\110\uff17\112\uff17\115\uff17" +
    "\117\uff17\122\uff17\001\002\000\016\062\uff0f\063\uff0f\064" +
    "\uff0f\065\uff0f\072\uff0f\073\uff0f\001\002\000\016\062\u0377" +
    "\063\u0375\064\u0379\065\u0378\072\u0376\073\u037a\001\002\000" +
    "\016\062\uff0d\063\uff0d\064\uff0d\065\uff0d\072\uff0d\073\uff0d" +
    "\001\002\000\016\062\uff10\063\uff10\064\uff10\065\uff10\072" +
    "\uff10\073\uff10\001\002\000\004\070\u0373\001\002\000\016" +
    "\062\uff0e\063\uff0e\064\uff0e\065\uff0e\072\uff0e\073\uff0e\001" +
    "\002\000\004\071\u0374\001\002\000\016\062\u0377\063\u0375" +
    "\064\u0379\065\u0378\072\u0376\073\u037a\001\002\000\012\127" +
    "\u036d\130\u036f\131\u0370\133\u0372\001\002\000\004\130\u0382" +
    "\001\002\000\012\127\u036d\130\u036f\131\u0370\133\u0372\001" +
    "\002\000\012\127\u036d\130\u036f\131\u0370\133\u0372\001\002" +
    "\000\012\127\u036d\130\u036f\131\u0370\133\u0372\001\002\000" +
    "\036\003\uff11\046\uff11\047\uff11\050\uff11\051\uff11\052\uff11" +
    "\067\uff11\076\uff11\107\uff11\110\uff11\112\uff11\115\uff11\117" +
    "\uff11\122\uff11\001\002\000\036\003\uff18\046\uff18\047\uff18" +
    "\050\uff18\051\uff18\052\uff18\067\uff18\076\uff18\107\uff18\110" +
    "\uff18\112\uff18\115\uff18\117\uff18\122\uff18\001\002\000\016" +
    "\062\u0377\063\u0375\064\u0379\065\u0378\072\u0376\073\u037a\001" +
    "\002\000\036\003\uff13\046\uff13\047\uff13\050\uff13\051\uff13" +
    "\052\uff13\067\uff13\076\uff13\107\uff13\110\uff13\112\uff13\115" +
    "\uff13\117\uff13\122\uff13\001\002\000\016\062\u0377\063\u0375" +
    "\064\u0379\065\u0378\072\u0376\073\u037a\001\002\000\036\003" +
    "\uff14\046\uff14\047\uff14\050\uff14\051\uff14\052\uff14\067\uff14" +
    "\076\uff14\107\uff14\110\uff14\112\uff14\115\uff14\117\uff14\122" +
    "\uff14\001\002\000\016\062\u0377\063\u0375\064\u0379\065\u0378" +
    "\072\u0376\073\u037a\001\002\000\036\003\uff16\046\uff16\047" +
    "\uff16\050\uff16\051\uff16\052\uff16\067\uff16\076\uff16\107\uff16" +
    "\110\uff16\112\uff16\115\uff16\117\uff16\122\uff16\001\002\000" +
    "\010\054\u036a\072\u0369\073\u036c\001\002\000\036\003\uff12" +
    "\046\uff12\047\uff12\050\uff12\051\uff12\052\uff12\067\uff12\076" +
    "\uff12\107\uff12\110\uff12\112\uff12\115\uff12\117\uff12\122\uff12" +
    "\001\002\000\016\062\u0377\063\u0375\064\u0379\065\u0378\072" +
    "\u0376\073\u037a\001\002\000\036\003\uff15\046\uff15\047\uff15" +
    "\050\uff15\051\uff15\052\uff15\067\uff15\076\uff15\107\uff15\110" +
    "\uff15\112\uff15\115\uff15\117\uff15\122\uff15\001\002\000\036" +
    "\003\uff1a\046\uff1a\047\uff1a\050\uff1a\051\uff1a\052\uff1a\067" +
    "\uff1a\076\uff1a\107\uff1a\110\uff1a\112\uff1a\115\uff1a\117\uff1a" +
    "\122\uff1a\001\002\000\010\054\u036a\072\u0369\073\u036c\001" +
    "\002\000\036\003\uff19\046\uff19\047\uff19\050\uff19\051\uff19" +
    "\052\uff19\067\uff19\076\uff19\107\uff19\110\uff19\112\uff19\115" +
    "\uff19\117\uff19\122\uff19\001\002\000\036\003\uff49\046\uff49" +
    "\047\uff49\050\uff49\051\uff49\052\uff49\067\uff49\076\uff49\107" +
    "\uff49\110\uff49\112\uff49\115\uff49\117\uff49\122\uff49\001\002" +
    "\000\010\054\u038e\072\u038d\073\u0390\001\002\000\004\130" +
    "\u038c\001\002\000\010\054\u038e\072\u038d\073\u0390\001\002" +
    "\000\004\130\u03a5\001\002\000\006\127\u0392\130\u0391\001" +
    "\002\000\036\003\uff40\046\uff40\047\uff40\050\uff40\051\uff40" +
    "\052\uff40\067\uff40\076\uff40\107\uff40\110\uff40\112\uff40\115" +
    "\uff40\117\uff40\122\uff40\001\002\000\036\003\uff3d\046\uff3d" +
    "\047\uff3d\050\uff3d\051\uff3d\052\uff3d\067\uff3d\076\uff3d\107" +
    "\uff3d\110\uff3d\112\uff3d\115\uff3d\117\uff3d\122\uff3d\001\002" +
    "\000\012\057\uff3b\060\uff3b\072\uff3b\073\uff3b\001\002\000" +
    "\012\057\uff3c\060\uff3c\072\uff3c\073\uff3c\001\002\000\012" +
    "\057\u0398\060\u0395\072\u0394\073\u0397\001\002\000\004\130" +
    "\u03a3\001\002\000\010\060\u039f\127\u0392\130\u0391\001\002" +
    "\000\036\003\uff3f\046\uff3f\047\uff3f\050\uff3f\051\uff3f\052" +
    "\uff3f\067\uff3f\076\uff3f\107\uff3f\110\uff3f\112\uff3f\115\uff3f" +
    "\117\uff3f\122\uff3f\001\002\000\036\003\uff35\046\uff35\047" +
    "\uff35\050\uff35\051\uff35\052\uff35\067\uff35\076\uff35\107\uff35" +
    "\110\uff35\112\uff35\115\uff35\117\uff35\122\uff35\001\002\000" +
    "\010\057\u039a\127\u0392\130\u0391\001\002\000\012\057\u0398" +
    "\060\u0395\072\u0394\073\u0397\001\002\000\006\127\u0392\130" +
    "\u0391\001\002\000\012\057\u0398\060\u0395\072\u0394\073\u0397" +
    "\001\002\000\036\003\uff39\046\uff39\047\uff39\050\uff39\051" +
    "\uff39\052\uff39\067\uff39\076\uff39\107\uff39\110\uff39\112\uff39" +
    "\115\uff39\117\uff39\122\uff39\001\002\000\036\003\uff3a\046" +
    "\uff3a\047\uff3a\050\uff3a\051\uff3a\052\uff3a\067\uff3a\076\uff3a" +
    "\107\uff3a\110\uff3a\112\uff3a\115\uff3a\117\uff3a\122\uff3a\001" +
    "\002\000\012\057\u0398\060\u0395\072\u0394\073\u0397\001\002" +
    "\000\006\127\u0392\130\u0391\001\002\000\012\057\u0398\060" +
    "\u0395\072\u0394\073\u0397\001\002\000\036\003\uff37\046\uff37" +
    "\047\uff37\050\uff37\051\uff37\052\uff37\067\uff37\076\uff37\107" +
    "\uff37\110\uff37\112\uff37\115\uff37\117\uff37\122\uff37\001\002" +
    "\000\036\003\uff38\046\uff38\047\uff38\050\uff38\051\uff38\052" +
    "\uff38\067\uff38\076\uff38\107\uff38\110\uff38\112\uff38\115\uff38" +
    "\117\uff38\122\uff38\001\002\000\010\054\u038e\072\u038d\073" +
    "\u0390\001\002\000\036\003\uff36\046\uff36\047\uff36\050\uff36" +
    "\051\uff36\052\uff36\067\uff36\076\uff36\107\uff36\110\uff36\112" +
    "\uff36\115\uff36\117\uff36\122\uff36\001\002\000\010\054\u038e" +
    "\072\u038d\073\u0390\001\002\000\036\003\uff3e\046\uff3e\047" +
    "\uff3e\050\uff3e\051\uff3e\052\uff3e\067\uff3e\076\uff3e\107\uff3e" +
    "\110\uff3e\112\uff3e\115\uff3e\117\uff3e\122\uff3e\001\002\000" +
    "\036\003\uff45\046\uff45\047\uff45\050\uff45\051\uff45\052\uff45" +
    "\067\uff45\076\uff45\107\uff45\110\uff45\112\uff45\115\uff45\117" +
    "\uff45\122\uff45\001\002\000\006\046\u02f1\130\u02ef\001\002" +
    "\000\004\071\u03aa\001\002\000\004\120\u03ab\001\002\000" +
    "\004\070\u03ac\001\002\000\012\070\u02a3\130\u02a8\131\u02aa" +
    "\132\u02ab\001\002\000\004\071\u03ae\001\002\000\004\113" +
    "\u03af\001\002\000\004\074\u03b0\001\002\000\004\076\u03b1" +
    "\001\002\000\034\003\u02bc\046\u0219\047\u0213\050\u0218\051" +
    "\u0221\052\u021b\076\u02b9\107\u02bd\110\u02b6\112\u02bf\115\u02ba" +
    "\117\u02b7\122\u02b8\001\002\000\034\003\u021e\046\u0219\047" +
    "\u0213\050\u0218\051\u0221\052\u021b\067\u0216\107\u021f\110\u0214" +
    "\112\u0220\115\u021c\117\u0217\122\u0215\001\002\000\010\055" +
    "\uff7b\077\uff7b\126\uff7b\001\002\000\020\061\u02a9\070\u02a3" +
    "\124\u02ac\127\u02a7\130\u02a8\131\u02aa\132\u02ab\001\002\000" +
    "\004\123\u03b6\001\002\000\004\113\u03b7\001\002\000\004" +
    "\074\u03b8\001\002\000\004\076\u03b9\001\002\000\034\003" +
    "\u02bc\046\u0219\047\u0213\050\u0218\051\u0221\052\u021b\076\u02b9" +
    "\107\u02bd\110\u02b6\112\u02bf\115\u02ba\117\u02b7\122\u02b8\001" +
    "\002\000\034\003\u021e\046\u0219\047\u0213\050\u0218\051\u0221" +
    "\052\u021b\067\u0216\107\u021f\110\u0214\112\u0220\115\u021c\117" +
    "\u0217\122\u0215\001\002\000\010\055\uff7a\077\uff7a\126\uff7a" +
    "\001\002\000\004\071\u03bd\001\002\000\004\073\u03be\001" +
    "\002\000\034\003\u021e\046\u0219\047\u0213\050\u0218\051\u0221" +
    "\052\u021b\067\u0216\107\u021f\110\u0214\112\u0220\115\u021c\117" +
    "\u0217\122\u0215\001\002\000\010\055\uff7d\077\uff7d\126\uff7d" +
    "\001\002\000\010\054\u03c4\072\u03c3\073\u03c6\001\002\000" +
    "\004\130\u03c2\001\002\000\010\054\u03c4\072\u03c3\073\u03c6" +
    "\001\002\000\004\130\u03e2\001\002\000\016\106\u03ca\127" +
    "\u03c8\130\u03c7\131\u03c9\132\u03cc\133\u03cd\001\002\000\036" +
    "\003\uff43\046\uff43\047\uff43\050\uff43\051\uff43\052\uff43\067" +
    "\uff43\076\uff43\107\uff43\110\uff43\112\uff43\115\uff43\117\uff43" +
    "\122\uff43\001\002\000\036\003\uff09\046\uff09\047\uff09\050" +
    "\uff09\051\uff09\052\uff09\067\uff09\076\uff09\107\uff09\110\uff09" +
    "\112\uff09\115\uff09\117\uff09\122\uff09\001\002\000\016\062" +
    "\ufefe\063\ufefe\064\ufefe\065\ufefe\072\ufefe\073\ufefe\001\002" +
    "\000\016\062\uff00\063\uff00\064\uff00\065\uff00\072\uff00\073" +
    "\uff00\001\002\000\016\062\uff02\063\uff02\064\uff02\065\uff02" +
    "\072\uff02\073\uff02\001\002\000\004\070\u03df\001\002\000" +
    "\016\062\u03d1\063\u03cf\064\u03d3\065\u03d2\072\u03ce\073\u03d4" +
    "\001\002\000\016\062\uff01\063\uff01\064\uff01\065\uff01\072" +
    "\uff01\073\uff01\001\002\000\016\062\ufeff\063\ufeff\064\ufeff" +
    "\065\ufeff\072\ufeff\073\ufeff\001\002\000\004\130\u03dd\001" +
    "\002\000\014\127\u03c8\130\u03c7\131\u03c9\132\u03cc\133\u03cd" +
    "\001\002\000\036\003\uff0c\046\uff0c\047\uff0c\050\uff0c\051" +
    "\uff0c\052\uff0c\067\uff0c\076\uff0c\107\uff0c\110\uff0c\112\uff0c" +
    "\115\uff0c\117\uff0c\122\uff0c\001\002\000\014\127\u03c8\130" +
    "\u03c7\131\u03c9\132\u03cc\133\u03cd\001\002\000\014\127\u03c8" +
    "\130\u03c7\131\u03c9\132\u03cc\133\u03cd\001\002\000\014\127" +
    "\u03c8\130\u03c7\131\u03c9\132\u03cc\133\u03cd\001\002\000\036" +
    "\003\uff03\046\uff03\047\uff03\050\uff03\051\uff03\052\uff03\067" +
    "\uff03\076\uff03\107\uff03\110\uff03\112\uff03\115\uff03\117\uff03" +
    "\122\uff03\001\002\000\016\062\u03d1\063\u03cf\064\u03d3\065" +
    "\u03d2\072\u03ce\073\u03d4\001\002\000\036\003\uff05\046\uff05" +
    "\047\uff05\050\uff05\051\uff05\052\uff05\067\uff05\076\uff05\107" +
    "\uff05\110\uff05\112\uff05\115\uff05\117\uff05\122\uff05\001\002" +
    "\000\016\062\u03d1\063\u03cf\064\u03d3\065\u03d2\072\u03ce\073" +
    "\u03d4\001\002\000\036\003\uff06\046\uff06\047\uff06\050\uff06" +
    "\051\uff06\052\uff06\067\uff06\076\uff06\107\uff06\110\uff06\112" +
    "\uff06\115\uff06\117\uff06\122\uff06\001\002\000\016\062\u03d1" +
    "\063\u03cf\064\u03d3\065\u03d2\072\u03ce\073\u03d4\001\002\000" +
    "\036\003\uff08\046\uff08\047\uff08\050\uff08\051\uff08\052\uff08" +
    "\067\uff08\076\uff08\107\uff08\110\uff08\112\uff08\115\uff08\117" +
    "\uff08\122\uff08\001\002\000\016\062\u03d1\063\u03cf\064\u03d3" +
    "\065\u03d2\072\u03ce\073\u03d4\001\002\000\036\003\uff07\046" +
    "\uff07\047\uff07\050\uff07\051\uff07\052\uff07\067\uff07\076\uff07" +
    "\107\uff07\110\uff07\112\uff07\115\uff07\117\uff07\122\uff07\001" +
    "\002\000\010\054\u03c4\072\u03c3\073\u03c6\001\002\000\036" +
    "\003\uff04\046\uff04\047\uff04\050\uff04\051\uff04\052\uff04\067" +
    "\uff04\076\uff04\107\uff04\110\uff04\112\uff04\115\uff04\117\uff04" +
    "\122\uff04\001\002\000\004\071\u03e0\001\002\000\016\062" +
    "\u03d1\063\u03cf\064\u03d3\065\u03d2\072\u03ce\073\u03d4\001\002" +
    "\000\036\003\uff0a\046\uff0a\047\uff0a\050\uff0a\051\uff0a\052" +
    "\uff0a\067\uff0a\076\uff0a\107\uff0a\110\uff0a\112\uff0a\115\uff0a" +
    "\117\uff0a\122\uff0a\001\002\000\010\054\u03c4\072\u03c3\073" +
    "\u03c6\001\002\000\036\003\uff0b\046\uff0b\047\uff0b\050\uff0b" +
    "\051\uff0b\052\uff0b\067\uff0b\076\uff0b\107\uff0b\110\uff0b\112" +
    "\uff0b\115\uff0b\117\uff0b\122\uff0b\001\002\000\036\003\uff48" +
    "\046\uff48\047\uff48\050\uff48\051\uff48\052\uff48\067\uff48\076" +
    "\uff48\107\uff48\110\uff48\112\uff48\115\uff48\117\uff48\122\uff48" +
    "\001\002\000\004\024\u03e6\001\002\000\004\056\u03e7\001" +
    "\002\000\004\055\uff80\001\002\000\004\071\u03e9\001\002" +
    "\000\004\066\u03ea\001\002\000\034\003\u021e\046\u0219\047" +
    "\u0213\050\u0218\051\u0221\052\u021b\067\u0216\107\u021f\110\u0214" +
    "\112\u0220\115\u021c\117\u0217\122\u0215\001\002\000\010\055" +
    "\u020d\077\u020c\126\u020f\001\002\000\004\055\uff82\001\002" +
    "\000\006\056\u03f0\066\u03ef\001\002\000\004\055\010\001" +
    "\002\000\006\034\u03f1\035\u03f2\001\002\000\004\055\ufffc" +
    "\001\002\000\004\054\u0401\001\002\000\004\054\u03f3\001" +
    "\002\000\004\124\u03f4\001\002\000\014\124\u03f7\130\u03f5" +
    "\131\u03f6\132\u03f8\135\u03fa\001\002\000\014\124\u03f7\130" +
    "\u03f5\131\u03f6\132\u03f8\135\u03fa\001\002\000\014\124\u03f7" +
    "\130\u03f5\131\u03f6\132\u03f8\135\u03fa\001\002\000\004\067" +
    "\ufff7\001\002\000\014\124\u03f7\130\u03f5\131\u03f6\132\u03f8" +
    "\135\u03fa\001\002\000\004\067\u03fc\001\002\000\014\124" +
    "\u03f7\130\u03f5\131\u03f6\132\u03f8\135\u03fa\001\002\000\004" +
    "\067\ufffb\001\002\000\006\056\u03f0\066\u03ef\001\002\000" +
    "\004\055\ufffd\001\002\000\004\067\ufff8\001\002\000\004" +
    "\067\ufff9\001\002\000\004\067\ufffa\001\002\000\004\124" +
    "\u0402\001\002\000\004\130\u0403\001\002\000\004\124\u0404" +
    "\001\002\000\004\067\u0405\001\002\000\006\056\u03f0\066" +
    "\u03ef\001\002\000\004\055\ufffe\001\002\000\004\002\000" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0405\000\004\002\005\001\001\000\002\001\001\000" +
    "\006\004\010\030\011\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\004" +
    "\012\030\011\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\024\u0208\001\001\000\002\001\001\000\006\006" +
    "\017\030\021\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\006\022\030\021\001\001\000\002\001\001\000" +
    "\004\011\072\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\043\001\001\000\004\010\066\001\001\000" +
    "\004\010\065\001\001\000\004\010\064\001\001\000\004" +
    "\010\063\001\001\000\004\010\062\001\001\000\002\001" +
    "\001\000\004\010\060\001\001\000\004\010\057\001\001" +
    "\000\004\010\056\001\001\000\004\010\055\001\001\000" +
    "\004\010\054\001\001\000\004\010\053\001\001\000\002" +
    "\001\001\000\004\010\047\001\001\000\004\010\046\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\006\052\030\021\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\006\100\030\021\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\012\114\001" +
    "\001\000\004\012\137\001\001\000\004\012\136\001\001" +
    "\000\004\012\135\001\001\000\004\012\134\001\001\000" +
    "\004\012\133\001\001\000\004\012\132\001\001\000\004" +
    "\012\131\001\001\000\004\012\130\001\001\000\002\001" +
    "\001\000\004\012\125\001\001\000\004\012\124\001\001" +
    "\000\004\012\123\001\001\000\004\012\122\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\011\127\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\024\144\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\007\147\001\001\000\002\001\001\000\004" +
    "\007\150\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\023\u01fd\001\001\000\002\001\001\000\004\015\u01f6" +
    "\001\001\000\004\013\u01f1\001\001\000\004\013\u01ec\001" +
    "\001\000\004\027\u0112\001\001\000\002\001\001\000\004" +
    "\013\u0105\001\001\000\004\013\333\001\001\000\004\017" +
    "\246\001\001\000\004\016\166\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\173\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\022\204\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\016\212\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\217\001\001\000\002\001\001\000" +
    "\004\016\221\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\022\224\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\016\227\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\016\235\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\016\243\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\007\251\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\021\265\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\017\270\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\017\300\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\017\306\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\017\314\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\017\322\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\017\330\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\334\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\007\337\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\021\347" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\013" +
    "\352\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\013" +
    "\360\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\013" +
    "\366\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\020\373\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\376\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\u0104\001\001" +
    "\000\002\001\001\000\004\010\u0106\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\007\u0109\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\026\u0145\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\027" +
    "\u0120\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\021\u0123\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\027\u0126\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\012\u0129\001\001\000\002\001\001\000\004\027" +
    "\u012b\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\027" +
    "\u0131\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\027" +
    "\u0137\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\020\u013a\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\027\u013d\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\027\u0143\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\007\u0148\001" +
    "\001\000\002\001\001\000\004\023\u01ae\001\001\000\002" +
    "\001\001\000\004\015\u017b\001\001\000\004\013\u016e\001" +
    "\001\000\004\013\u0169\001\001\000\002\001\001\000\004" +
    "\013\u0162\001\001\000\004\013\u015d\001\001\000\004\017" +
    "\u0159\001\001\000\004\016\u0153\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\026\u0158\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\026\u015c\001\001\000\002\001" +
    "\001\000\004\010\u015e\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\026\u0161\001\001\000\002\001\001\000" +
    "\004\010\u0163\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\026\u0166\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\u016a\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\026\u016d\001\001\000" +
    "\002\001\001\000\004\014\u0170\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\026\u0173\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\u0177\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\014\u017a\001\001\000\002\001\001\000\004" +
    "\010\u01a8\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\015\u0189\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\021\u018c\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\015\u018f\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\015\u0195\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\015\u019b\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\020\u019e\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\015\u01a1\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\015\u01a7\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\026\u01ab" +
    "\001\001\000\002\001\001\000\004\026\u01ad\001\001\000" +
    "\002\001\001\000\004\010\u01e8\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\025" +
    "\u01bc\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\023\u01be\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\021\u01c7\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\023\u01ca\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\u01cd\001\001\000\002\001\001" +
    "\000\004\023\u01cf\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\023\u01d5\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\023\u01db\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\020\u01de\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\023\u01e1\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\023\u01e7\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\026\u01eb\001\001" +
    "\000\002\001\001\000\004\014\u01ed\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\007\u01f0\001\001\000\002" +
    "\001\001\000\004\010\u01f2\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\007\u01f5\001\001\000\002\001\001" +
    "\000\004\010\u01f7\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\007\u01fa\001\001\000\002\001\001\000\004" +
    "\007\u01fc\001\001\000\002\001\001\000\004\010\u01fe\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\007\u0201" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\u0205\001\001\000\002\001\001\000\004" +
    "\011\u0207\001\001\000\002\001\001\000\004\007\u0209\001" +
    "\001\000\002\001\001\000\004\031\u020d\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\032\u0219" +
    "\033\u021c\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\031\u0364\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\032\u029f\033\u021c" +
    "\001\001\000\006\032\u029e\033\u021c\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\050\u0234" +
    "\001\001\000\002\001\001\000\004\050\u0226\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\060\u0231\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\060\u022d\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\050\u0230\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\050\u0233" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\043" +
    "\u0238\001\001\000\004\044\u0295\001\001\000\010\035\u023c" +
    "\045\u0241\057\u0247\001\001\000\002\001\001\000\006\032" +
    "\u023a\033\u021c\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\035\u0294\001\001\000\004\035" +
    "\u0293\001\001\000\004\035\u0292\001\001\000\004\035\u0291" +
    "\001\001\000\002\001\001\000\004\035\u028f\001\001\000" +
    "\002\001\001\000\004\035\u025e\001\001\000\004\035\u025d" +
    "\001\001\000\004\035\u025c\001\001\000\004\044\u0256\001" +
    "\001\000\004\035\u0253\001\001\000\004\007\u0252\001\001" +
    "\000\004\035\u0251\001\001\000\004\035\u0250\001\001\000" +
    "\004\035\u024f\001\001\000\004\035\u024e\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\044\u025b\001" +
    "\001\000\010\035\u023c\045\u0241\057\u0259\001\001\000\004" +
    "\044\u025a\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\023\u028b\001\001\000\002\001\001\000\004\015\u0285\001" +
    "\001\000\004\013\u0281\001\001\000\004\013\u027d\001\001" +
    "\000\004\027\u0279\001\001\000\004\013\u0275\001\001\000" +
    "\004\013\u0271\001\001\000\004\017\u026e\001\001\000\004" +
    "\016\u0269\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\010" +
    "\u0272\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\010\u0276\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\026\u027a\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\014\u027e\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\010\u0282\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\010\u0286" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\007\u028a\001\001\000\002\001\001\000\004" +
    "\010\u028c\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\034\u0298\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\035\u029a\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\032\u029d\033\u021c" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\037\u02a5\041\u02a3\067\u02a1\072\u02a4\001\001" +
    "\000\002\001\001\000\006\041\u0318\067\u02a1\001\001\000" +
    "\002\001\001\000\010\071\u0307\073\u0305\074\u0308\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\037\u02b0\041\u02a3\067\u02a1\072\u02a4\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\033\u02ba\042\u02bd\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\033\u02ba\042\u02d9\001\001" +
    "\000\006\033\u02ba\042\u02d8\001\001\000\002\001\001\000" +
    "\004\036\u02c3\001\001\000\002\001\001\000\004\043\u02c0" +
    "\001\001\000\002\001\001\000\006\033\u02ba\042\u02c2\001" +
    "\001\000\002\001\001\000\006\032\u02d2\033\u021c\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\037\u02c8\041\u02a3\067\u02a1\072\u02a4\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\033\u02ba\042\u02cd\001\001\000\004\036\u02ce" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\033" +
    "\u02ba\042\u02d1\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\034\u02d4\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\033\u02ba\042\u02d7\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\037\u02db\041" +
    "\u02a3\067\u02a1\072\u02a4\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\033" +
    "\u02ba\042\u02e0\001\001\000\004\036\u02e1\001\001\000\006" +
    "\033\u02ba\042\u02e2\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\037\u02e6\041\u02a3\067\u02a1" +
    "\072\u02a4\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\033\u02ba\042\u02eb" +
    "\001\001\000\006\033\u02ba\042\u02ec\001\001\000\002\001" +
    "\001\000\004\040\u02ef\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\067" +
    "\u02f3\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\041\u02f7\067\u02a1\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\033\u02ba\042\u02fc\001\001\000\006\033\u02ba\042" +
    "\u02fd\001\001\000\002\001\001\000\004\067\u02ff\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\033\u02ba\042\u0303\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\041" +
    "\u02a3\067\u02a1\072\u0313\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\037\u030f\041\u02a3\067\u02a1" +
    "\072\u02a4\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\073\u0314\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\037\u0317\041" +
    "\u02a3\067\u02a1\072\u02a4\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\070\u031d\001\001\000\006\041\u0322\067" +
    "\u02a1\001\001\000\006\041\u0321\067\u02a1\001\001\000\006" +
    "\041\u0320\067\u02a1\001\001\000\002\001\001\000\006\041" +
    "\u031f\067\u02a1\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\041\u032a\067" +
    "\u02a1\001\001\000\006\041\u0329\067\u02a1\001\001\000\006" +
    "\041\u0328\067\u02a1\001\001\000\006\041\u0327\067\u02a1\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\051\u0363\001\001\000\002\001" +
    "\001\000\004\051\u0331\001\001\000\002\001\001\000\006" +
    "\061\u033b\063\u033d\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\062\u0348\001\001\000\002\001\001\000\004\062\u0341\001" +
    "\001\000\004\012\u033f\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\061\u0344\001\001\000" +
    "\002\001\001\000\004\062\u0345\001\001\000\002\001\001" +
    "\000\004\051\u0347\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\064\u034b\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\u034d\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\064\u0350\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\064\u0353\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\062\u035a\001" +
    "\001\000\002\001\001\000\004\064\u035c\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\064\u035f\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\051\u0362\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\046\u0388\001\001\000\002\001\001\000\004\046\u036a" +
    "\001\001\000\002\001\001\000\004\053\u036d\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\054\u0385\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\054\u037a\001\001\000\004\053\u0383\001\001\000\002\001" +
    "\001\000\004\053\u037f\001\001\000\004\053\u037d\001\001" +
    "\000\004\053\u037b\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\054\u037c\001\001\000\002\001\001\000\004" +
    "\054\u037e\001\001\000\002\001\001\000\004\054\u0380\001" +
    "\001\000\002\001\001\000\004\046\u0382\001\001\000\002" +
    "\001\001\000\004\054\u0384\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\046\u0387\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\052\u03a6\001\001\000\002\001" +
    "\001\000\004\052\u038e\001\001\000\002\001\001\000\004" +
    "\065\u0392\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\066\u0395\001\001" +
    "\000\002\001\001\000\004\065\u039d\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\065\u0398\001\001\000\004" +
    "\066\u039c\001\001\000\004\065\u039a\001\001\000\004\066" +
    "\u039b\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\066\u03a1\001\001\000\004\065\u039f\001\001\000\004\066" +
    "\u03a0\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\052\u03a3\001\001\000\002\001\001\000\004\052\u03a5\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\040\u03a8" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\041\u03ac\067\u02a1\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\033\u02ba\042\u03b1\001\001\000\006\032\u03b2\033\u021c" +
    "\001\001\000\002\001\001\000\012\037\u03b4\041\u02a3\067" +
    "\u02a1\072\u02a4\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\033\u02ba\042" +
    "\u03b9\001\001\000\006\032\u03ba\033\u021c\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\032" +
    "\u03be\033\u021c\001\001\000\002\001\001\000\004\047\u03e3" +
    "\001\001\000\002\001\001\000\004\047\u03c4\001\001\000" +
    "\002\001\001\000\004\055\u03ca\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\056\u03cf\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\055\u03da\001\001\000\002\001\001\000\004\055\u03d8" +
    "\001\001\000\004\055\u03d6\001\001\000\004\055\u03d4\001" +
    "\001\000\002\001\001\000\004\056\u03d5\001\001\000\002" +
    "\001\001\000\004\056\u03d7\001\001\000\002\001\001\000" +
    "\004\056\u03d9\001\001\000\002\001\001\000\004\056\u03db" +
    "\001\001\000\002\001\001\000\004\047\u03dd\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\056\u03e0\001\001" +
    "\000\002\001\001\000\004\047\u03e2\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\032\u03ea\033\u021c\001\001\000\004\031\u03eb\001\001" +
    "\000\002\001\001\000\004\003\u03ed\001\001\000\006\004" +
    "\u0406\030\011\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\005\u03f8\001\001\000\004\005\u03ff\001\001\000\004" +
    "\005\u03fe\001\001\000\002\001\001\000\004\005\u03fd\001" +
    "\001\000\002\001\001\000\004\005\u03fa\001\001\000\002" +
    "\001\001\000\004\003\u03fc\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\003\u0405\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    //declaracion de variables


    public Parser(Lexico lex) {
        super(lex);
    }


//recuperacion de errroes
    public void report_error(String message, Object info) {
		System.out.println("reporterror");
	}
	public void report_fatal_error(String message, Object info) {
		System.out.println("reportfatal");
	}
	public void report_fatal_error(Symbol cur) {
		System.out.println("unrecovered_syntax_error");
	}
    
    @Override
    public void syntax_error(Symbol st) {
       Token token = (Token) st.value;
        //report_error("Error Sintactico con el  Token:"+ token.getLexema()+" este no pertenece a la estructura - linea: "+token.getLine()+" - columna: "+token.getColumna() + "\n",null);

      System.out.println("err: " + token.getLexema() + " este no pertenece a la estructura - linea: " + token.getLine() + ", columna: " + token.getColumna());
       // errorSintactico.add(String.format("Error Sintactico lexema: %s  linea: %d  columna: %d. no se esperaba ese token.", token.getLexema(), token.getLine(), token.getColumna()));
    }

    protected int error_sync_size() {
		return 1;
	}


 

/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= exp_ini EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // exp_ini ::= MEQ HTML par_html exp_head 
            {
              Object RESULT =null;
		System.out.println("sintactico html");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_ini",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // exp_ini ::= error exp_head 
            {
              Object RESULT =null;
		System.out.println("error html");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_ini",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // par_html ::= CORIN IDCM IGUAL COMILLA ID COMILLA COROUT par_html 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("par_html",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // par_html ::= CORIN NAME IGUAL COMILLA exp_name COROUT par_html 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("par_html",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // par_html ::= MAQ 
            {
              Object RESULT =null;
		System.out.println("sintactico parametros html");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("par_html",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // exp_name ::= CADENA exp_name 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_name",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // exp_name ::= ID exp_name 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_name",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // exp_name ::= NUMENTERO exp_name 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_name",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // exp_name ::= NUMDECIMAL exp_name 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_name",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // exp_name ::= COMILLA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_name",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // exp_head ::= MEQ HEAD MAQ par_head MEQ BODY par_body exp_contenido 
            {
              Object RESULT =null;
		System.out.println("sintactico head");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_head",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // exp_head ::= exp_script exp_head 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_head",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // exp_head ::= MEQ BODY par_body exp_contenido 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_head",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // par_head ::= MEQ TITLE MAQ exp_cadenatext TITLE MAQ par_head 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("par_head",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // par_head ::= MEQ LINK par_link MEQ DIVISION LINK MAQ par_head 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("par_head",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // par_head ::= MEQ DIVISION HEAD MAQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("par_head",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // par_head ::= exp_script par_head 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("par_head",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // par_body ::= CORIN BACKGROUND IGUAL COMILLA exp_links COROUT par_link 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("par_body",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // par_body ::= MAQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("par_body",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // par_link ::= CORIN REFERENCIA IGUAL COMILLA exp_links COROUT par_link 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("par_link",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // par_link ::= MAQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("par_link",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // exp_links ::= ID exp_links 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_links",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // exp_links ::= DOSP exp_links 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_links",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // exp_links ::= DIVISION exp_links 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_links",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // exp_links ::= CADENA exp_links 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_links",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // exp_links ::= IGUAL exp_links 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_links",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // exp_links ::= NUMENTERO exp_links 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_links",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // exp_links ::= AND exp_links 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_links",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // exp_links ::= NUMDECIMAL exp_links 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_links",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // exp_links ::= SUMA exp_links 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_links",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // exp_links ::= PRODUCTO exp_links 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_links",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // exp_links ::= RESTA exp_links 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_links",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // exp_links ::= HEXADECIMAL exp_links 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_links",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // exp_links ::= COMILLA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_links",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // exp_contenido ::= MEQ SPAM parm_shisp exp_cadenatext SPAM MAQ exp_contenido 
            {
              Object RESULT =null;
		System.out.println("contenido html");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_contenido",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // exp_contenido ::= MEQ SELECTED parm_shisp exp_opciones SELECTED MAQ exp_contenido 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_contenido",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // exp_contenido ::= MEQ H1 parm_shisp exp_cadenatext H1 MAQ exp_contenido 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_contenido",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // exp_contenido ::= MEQ P parm_shisp exp_cadenatext P MAQ exp_contenido 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_contenido",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // exp_contenido ::= MEQ BR MAQ exp_contenido 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_contenido",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // exp_contenido ::= MEQ INPUT parm_input exp_cadenatext INPUT MAQ exp_contenido 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_contenido",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // exp_contenido ::= MEQ IMG parm_image MEQ DIVISION IMG MAQ exp_contenido 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_contenido",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // exp_contenido ::= MEQ TEXTAREA par_areatext TEXTAREA MAQ exp_contenido 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_contenido",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // exp_contenido ::= MEQ DIV par_div contenido_div DIV MAQ exp_contenido 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_contenido",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // exp_contenido ::= MEQ BUTTON par_button exp_cadenatext BUTTON MAQ exp_contenido 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_contenido",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // exp_contenido ::= MEQ DIVISION BODY MAQ MEQ DIVISION HTML MAQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_contenido",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // exp_contenido ::= MEQ DIVISION HTML MAQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_contenido",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // exp_contenido ::= error exp_contenido 
            {
              Object RESULT =null;
		System.out.println("error html");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_contenido",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // contenido_div ::= MEQ SPAM parm_shisp exp_cadenatext SPAM MAQ contenido_div 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_div",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // contenido_div ::= MEQ SELECTED parm_shisp exp_opciones SELECTED MAQ contenido_div 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_div",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // contenido_div ::= MEQ H1 parm_shisp exp_cadenatext H1 MAQ contenido_div 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_div",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // contenido_div ::= MEQ P parm_shisp exp_cadenatext P MAQ contenido_div 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_div",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // contenido_div ::= MEQ BR MAQ contenido_div 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_div",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // contenido_div ::= MEQ INPUT parm_input exp_cadenatext INPUT MAQ contenido_div 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_div",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // contenido_div ::= MEQ IMG parm_image MEQ DIVISION IMG MAQ contenido_div 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_div",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // contenido_div ::= MEQ TEXTAREA par_areatext TEXTAREA MAQ contenido_div 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_div",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // contenido_div ::= MEQ BUTTON par_button exp_cadenatext BUTTON MAQ contenido_div 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_div",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // contenido_div ::= MEQ DIVISION DIV MAQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_div",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // par_div ::= CORIN IDCM IGUAL COMILLA ID COMILLA COROUT par_div 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("par_div",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // par_div ::= CORIN ALINGN IGUAL COMILLA ID COMILLA COROUT par_div 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("par_div",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // par_div ::= CORIN COLOR IGUAL COMILLA par_color COMILLA COROUT par_div 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("par_div",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // par_div ::= CORIN FONTFY IGUAL COMILLA ID COMILLA COROUT par_div 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("par_div",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // par_div ::= CORIN FONTSZ IGUAL COMILLA par_fontsize COMILLA COROUT par_div 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("par_div",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // par_div ::= CORIN BACKGROUND IGUAL COMILLA exp_links COROUT par_div 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("par_div",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // par_div ::= CORIN CLASE IGUAL COMILLA ID COROUT par_div 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("par_div",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // par_div ::= MAQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("par_div",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // par_button ::= CORIN IDCM IGUAL COMILLA ID COMILLA COROUT par_button 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("par_button",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // par_button ::= CORIN ALINGN IGUAL COMILLA ID COMILLA COROUT par_button 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("par_button",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // par_button ::= CORIN COLOR IGUAL COMILLA par_color COMILLA COROUT par_button 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("par_button",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // par_button ::= CORIN FONTFY IGUAL COMILLA ID COMILLA COROUT par_button 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("par_button",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // par_button ::= CORIN FONTSZ IGUAL COMILLA par_fontsize COMILLA COROUT par_button 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("par_button",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // par_button ::= CORIN BACKGROUND IGUAL COMILLA exp_links COROUT par_button 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("par_button",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // par_button ::= CORIN ONCLICK IGUAL COMILLA exp_proceso COROUT par_button 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("par_button",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // par_button ::= MAQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("par_button",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // par_areatext ::= CORIN IDCM IGUAL COMILLA ID COMILLA COROUT par_areatext 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("par_areatext",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // par_areatext ::= CORIN COLUMNA IGUAL COMILLA NUMENTERO COMILLA COROUT par_areatext 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("par_areatext",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // par_areatext ::= CORIN FILA IGUAL COMILLA NUMENTERO COMILLA COROUT par_areatext 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("par_areatext",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // par_areatext ::= CORIN ALINGN IGUAL COMILLA ID COMILLA COROUT par_areatext 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("par_areatext",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // par_areatext ::= CORIN FONTFY IGUAL COMILLA ID COMILLA COROUT par_areatext 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("par_areatext",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // par_areatext ::= CORIN FONTSZ IGUAL COMILLA par_fontsize COMILLA COROUT par_areatext 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("par_areatext",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // par_areatext ::= MAQ DIVISION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("par_areatext",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // parm_shisp ::= CORIN IDCM IGUAL COMILLA ID COMILLA COROUT parm_shisp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parm_shisp",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // parm_shisp ::= CORIN COLOR IGUAL COMILLA par_color COMILLA COROUT parm_shisp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parm_shisp",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // parm_shisp ::= CORIN ALINGN IGUAL COMILLA ID COMILLA COROUT parm_shisp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parm_shisp",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // parm_shisp ::= CORIN FONTFY IGUAL COMILLA ID COMILLA COROUT parm_shisp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parm_shisp",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // parm_shisp ::= CORIN FONTSZ IGUAL COMILLA par_fontsize COMILLA COROUT parm_shisp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parm_shisp",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // parm_shisp ::= MAQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parm_shisp",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // parm_input ::= CORIN IDCM IGUAL COMILLA ID COMILLA COROUT parm_input 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parm_input",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // parm_input ::= CORIN TYPE IGUAL COMILLA ID COMILLA COROUT parm_input 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parm_input",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // parm_input ::= CORIN COLOR IGUAL COMILLA par_color COMILLA COROUT parm_input 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parm_input",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // parm_input ::= CORIN ALINGN IGUAL COMILLA ID COMILLA COROUT parm_input 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parm_input",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // parm_input ::= CORIN FONTFY IGUAL COMILLA ID COMILLA COROUT parm_input 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parm_input",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // parm_input ::= CORIN FONTSZ IGUAL COMILLA par_fontsize COMILLA COROUT parm_input 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parm_input",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // parm_input ::= MAQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parm_input",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // parm_image ::= CORIN IDCM IGUAL COMILLA ID COMILLA COROUT parm_image 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parm_image",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // parm_image ::= CORIN SRC IGUAL COMILLA exp_links COROUT parm_image 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parm_image",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // parm_image ::= CORIN ALT IGUAL COMILLA ID COMILLA COROUT parm_image 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parm_image",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // parm_image ::= CORIN WIDTH IGUAL COMILLA par_heigtwith COMILLA COROUT parm_image 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parm_image",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // parm_image ::= CORIN HEIGHT IGUAL COMILLA par_heigtwith COMILLA COROUT parm_image 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parm_image",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // parm_image ::= MAQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parm_image",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // exp_proceso ::= PROCESOS PARIN PAROUT COMILLA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_proceso",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // exp_proceso ::= LOAD PARIN PAROUT COMILLA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_proceso",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // exp_cadenatext ::= CADENA exp_cadenatext 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_cadenatext",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // exp_cadenatext ::= ID exp_cadenatext 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_cadenatext",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // exp_cadenatext ::= NUMENTERO exp_cadenatext 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_cadenatext",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // exp_cadenatext ::= NUMDECIMAL exp_cadenatext 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_cadenatext",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // exp_cadenatext ::= SUMA exp_cadenatext 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_cadenatext",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // exp_cadenatext ::= RESTA exp_cadenatext 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_cadenatext",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // exp_cadenatext ::= PRODUCTO exp_cadenatext 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_cadenatext",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // exp_cadenatext ::= DIVISION exp_cadenatext 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_cadenatext",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // exp_cadenatext ::= DOSP exp_cadenatext 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_cadenatext",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // exp_cadenatext ::= COMA exp_cadenatext 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_cadenatext",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // exp_cadenatext ::= IGUAL exp_cadenatext 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_cadenatext",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // exp_cadenatext ::= PARIN exp_cadenatext 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_cadenatext",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // exp_cadenatext ::= PAROUT exp_cadenatext 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_cadenatext",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // exp_cadenatext ::= MEQ DIVISION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_cadenatext",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // exp_opciones ::= MEQ OPTION MAQ exp_cadenatext OPTION MAQ exp_opciones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_opciones",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // exp_opciones ::= MEQ DIVISION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_opciones",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // par_color ::= ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("par_color",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // par_color ::= HEXADECIMAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("par_color",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // par_fontsize ::= NUMENTERO ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("par_fontsize",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // par_fontsize ::= NUMDECIMAL ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("par_fontsize",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // par_heigtwith ::= NUMENTERO ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("par_heigtwith",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // par_heigtwith ::= NUMDECIMAL ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("par_heigtwith",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // par_heigtwith ::= NUMENTERO CADENA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("par_heigtwith",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // par_heigtwith ::= NUMDECIMAL CADENA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("par_heigtwith",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // exp_script ::= MEQ SCRIPT MAQ exp_funciones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_script",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // exp_funciones ::= LOAD PARIN PAROUT CORIN instrucciones exp_funciones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_funciones",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // exp_funciones ::= PROCESOS PARIN PAROUT CORIN instrucciones exp_funciones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_funciones",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // exp_funciones ::= MEQ DIVISION SCRIPT MAQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_funciones",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // instrucciones ::= exp_variables instrucciones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // instrucciones ::= ALERTF PARIN texto PAROUT PUNTOCOMA instrucciones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // instrucciones ::= EXIT PARIN PAROUT PUNTOCOMA instrucciones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // instrucciones ::= IF PARIN condiciones THEN INIT LLAVEIN DOSP instrucciones_intro instrucciones_if instrucciones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // instrucciones ::= REPEAT PARIN condiciones_repeat PAROUT HUNTIL PARIN limit_repeat PAROUT INIT LLAVEIN DOSP instrucciones_intro instrucciones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // instrucciones ::= WHILE PARIN condiciones THENWHILE INIT LLAVEIN DOSP instrucciones_intro instrucciones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // instrucciones ::= INSERT PARIN par_insert PUNTOCOMA instrucciones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // instrucciones ::= COROUT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // instrucciones ::= error instrucciones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // instrucciones_intro ::= exp_variables instrucciones_intro 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones_intro",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // instrucciones_intro ::= ALERTF PARIN texto PAROUT PUNTOCOMA instrucciones_intro 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones_intro",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // instrucciones_intro ::= EXIT PARIN PAROUT PUNTOCOMA instrucciones_intro 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones_intro",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // instrucciones_intro ::= IF PARIN condiciones THEN INIT LLAVEIN DOSP instrucciones_intro instrucciones_if instrucciones_intro 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones_intro",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // instrucciones_intro ::= REPEAT PARIN condiciones_repeat PAROUT HUNTIL PARIN limit_repeat PAROUT INIT LLAVEIN DOSP instrucciones_intro instrucciones_intro 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones_intro",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // instrucciones_intro ::= WHILE PARIN condiciones THENWHILE INIT LLAVEIN DOSP instrucciones_intro instrucciones_intro 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones_intro",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // instrucciones_intro ::= INSERT PARIN par_insert PUNTOCOMA instrucciones_intro 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones_intro",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // instrucciones_intro ::= DOSP LLAVEOUT END 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones_intro",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // instrucciones_intro ::= error instrucciones_intro 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones_intro",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // condiciones ::= NOT condiciones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condiciones",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // condiciones ::= exp_condicion exp_conds 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condiciones",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // exp_conds ::= signo_condicion exp_condicion oper_cond 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_conds",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // exp_conds ::= oper_cond 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_conds",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // exp_condicion ::= BOOLEANOS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_condicion",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // exp_condicion ::= limit_repeat 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_condicion",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // exp_condicion ::= COMILLA ID COMILLA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_condicion",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // exp_condicion ::= COMILLA CADENA COMILLA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_condicion",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // oper_cond ::= AND AND condiciones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("oper_cond",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // oper_cond ::= OR OR condiciones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("oper_cond",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // oper_cond ::= PAROUT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("oper_cond",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // signo_condicion ::= IGUAL IGUAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("signo_condicion",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // signo_condicion ::= NOT IGUAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("signo_condicion",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // signo_condicion ::= MEQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("signo_condicion",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // signo_condicion ::= MEQ IGUAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("signo_condicion",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // signo_condicion ::= MAQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("signo_condicion",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // signo_condicion ::= MAQ IGUAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("signo_condicion",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // instrucciones_if ::= ELSE IF PARIN condiciones THEN INIT LLAVEIN DOSP instrucciones_intro instrucciones_if 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones_if",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // instrucciones_if ::= ELSE INIT LLAVEIN DOSP instrucciones_intro 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones_if",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // instrucciones_if ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones_if",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // limit_repeat ::= numeros SUMA limit_repeat 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("limit_repeat",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // limit_repeat ::= numeros RESTA limit_repeat 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("limit_repeat",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // limit_repeat ::= numeros PRODUCTO limit_repeat 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("limit_repeat",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // limit_repeat ::= numeros DIVISION limit_repeat 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("limit_repeat",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // limit_repeat ::= PARIN limit_repeat PAROUT expr_numerica 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("limit_repeat",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // limit_repeat ::= numeros 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("limit_repeat",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // expr_numerica ::= SUMA limit_repeat 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_numerica",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // expr_numerica ::= RESTA limit_repeat 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_numerica",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // expr_numerica ::= PRODUCTO limit_repeat 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_numerica",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // expr_numerica ::= DIVISION limit_repeat 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_numerica",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // expr_numerica ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_numerica",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // condiciones_repeat ::= ID IGUAL numeros 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condiciones_repeat",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // condiciones_repeat ::= ENTERO ID IGUAL numeros 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condiciones_repeat",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // numeros ::= NUMENTERO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numeros",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // numeros ::= NUMDECIMAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numeros",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // numeros ::= ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numeros",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // exp_variables ::= ENTERO ID exp_entero 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_variables",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // exp_variables ::= DECIMAL ID exp_decimal 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_variables",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // exp_variables ::= CHAR ID exp_char 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_variables",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // exp_variables ::= STRING ID exp_string 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_variables",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // exp_variables ::= BOOLEANO ID exp_boolean 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_variables",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // exp_variables ::= ENTERO GLOBAL ID exp_entero 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_variables",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // exp_variables ::= DECIMAL GLOBAL ID exp_decimal 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_variables",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // exp_variables ::= CHAR GLOBAL ID exp_char 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_variables",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // exp_variables ::= STRING GLOBAL ID exp_string 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_variables",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // exp_variables ::= BOOLEANO GLOBAL ID exp_boolean 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_variables",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // exp_boolean ::= IGUAL dat_boolean exp_oper_bool 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_boolean",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // exp_boolean ::= COMA ID exp_boolean 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_boolean",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // exp_boolean ::= PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_boolean",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // dat_boolean ::= BOOLEANOS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dat_boolean",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // dat_boolean ::= ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dat_boolean",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // exp_oper_bool ::= OR dat_boolean exp_oper_bool 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_oper_bool",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // exp_oper_bool ::= OR OR dat_boolean exp_oper_bool 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_oper_bool",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // exp_oper_bool ::= AND dat_boolean exp_oper_bool 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_oper_bool",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // exp_oper_bool ::= AND AND dat_boolean exp_oper_bool 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_oper_bool",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // exp_oper_bool ::= COMA ID exp_boolean 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_oper_bool",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // exp_oper_bool ::= PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_oper_bool",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // exp_string ::= IGUAL dato_string exp_oper_string 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_string",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // exp_string ::= COMA ID exp_string 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_string",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // exp_string ::= IGUAL GETID PARIN APOSTROFO ID APOSTROFO PAROUT exp_oper_string 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_string",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // exp_string ::= IGUAL exp_funciones_especial exp_oper_string 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_string",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // exp_string ::= PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_string",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // exp_funciones_especial ::= ASCF PARIN par_function_esp PAROUT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_funciones_especial",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // exp_funciones_especial ::= DESCF PARIN par_function_esp PAROUT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_funciones_especial",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // exp_funciones_especial ::= LETPF PARIN par_function_esp PAROUT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_funciones_especial",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // exp_funciones_especial ::= LETIMF PARIN par_function_esp PAROUT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_funciones_especial",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // exp_funciones_especial ::= REVERSEF PARIN par_function_esp PAROUT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_funciones_especial",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // par_function_esp ::= ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("par_function_esp",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // par_function_esp ::= COMILLA exp_links 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("par_function_esp",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // exp_oper_string ::= SUMA dato_string exp_oper_string 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_oper_string",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // exp_oper_string ::= COMA ID exp_string 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_oper_string",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // exp_oper_string ::= PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_oper_string",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // dato_string ::= NUMENTERO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dato_string",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // dato_string ::= CARACTER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dato_string",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // dato_string ::= NUMDECIMAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dato_string",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // dato_string ::= COMILLA exp_links 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dato_string",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // dato_string ::= ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dato_string",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // exp_char ::= IGUAL CARACTER dat_char 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_char",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // exp_char ::= COMA ID exp_char 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_char",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // exp_char ::= IGUAL CARALEF PARIN PAROUT dat_char 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_char",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // exp_char ::= PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_char",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // dat_char ::= COMA ID exp_char 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dat_char",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // dat_char ::= PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dat_char",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // exp_entero ::= IGUAL dato_entero exp_opeinteger 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_entero",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // exp_entero ::= COMA ID exp_entero 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_entero",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // exp_entero ::= IGUAL NUMALEF PARIN PAROUT exp_opeinteger 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_entero",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // exp_entero ::= PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_entero",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // exp_opeinteger ::= SUMA dato_entero exp_opeinteger 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_opeinteger",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // exp_opeinteger ::= RESTA dato_entero exp_opeinteger 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_opeinteger",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // exp_opeinteger ::= DIVISION dato_entero exp_opeinteger 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_opeinteger",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // exp_opeinteger ::= PRODUCTO dato_entero exp_opeinteger 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_opeinteger",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // exp_opeinteger ::= COMA ID exp_entero 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_opeinteger",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // exp_opeinteger ::= PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_opeinteger",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // dato_entero ::= NUMENTERO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dato_entero",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // dato_entero ::= BOOLEANOS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dato_entero",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // dato_entero ::= CARACTER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dato_entero",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // dato_entero ::= ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dato_entero",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // exp_decimal ::= IGUAL dato_decimal exp_oper_decimal 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_decimal",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // exp_decimal ::= COMA ID exp_decimal 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_decimal",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // exp_decimal ::= IGUAL NUMALEF PARIN PAROUT exp_oper_decimal 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_decimal",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // exp_decimal ::= PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_decimal",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // exp_oper_decimal ::= SUMA dato_decimal exp_oper_decimal 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_oper_decimal",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // exp_oper_decimal ::= RESTA dato_decimal exp_oper_decimal 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_oper_decimal",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // exp_oper_decimal ::= DIVISION dato_decimal exp_oper_decimal 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_oper_decimal",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // exp_oper_decimal ::= PRODUCTO dato_decimal exp_oper_decimal 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_oper_decimal",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // exp_oper_decimal ::= COMA ID exp_decimal 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_oper_decimal",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // exp_oper_decimal ::= PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_oper_decimal",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // dato_decimal ::= NUMENTERO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dato_decimal",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // dato_decimal ::= NUMDECIMAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dato_decimal",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // dato_decimal ::= BOOLEANOS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dato_decimal",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // dato_decimal ::= CARACTER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dato_decimal",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // dato_decimal ::= ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dato_decimal",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // par_insert ::= ID par_insert1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("par_insert",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // par_insert ::= APOSTROFO texto_insert par_insert1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("par_insert",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // par_insert1 ::= COMA ID par_insert1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("par_insert1",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // par_insert1 ::= COMA APOSTROFO texto_insert par_insert1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("par_insert1",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // par_insert1 ::= PAROUT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("par_insert1",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // texto_insert ::= mensaje_texto 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("texto_insert",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // texto_insert ::= texto_etiqueta APOSTROFO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("texto_insert",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // texto_etiqueta ::= MEQ SPAM parm_shisp exp_cadenatext SPAM MAQ 
            {
              Object RESULT =null;
		System.out.println("contenido html");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("texto_etiqueta",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // texto_etiqueta ::= MEQ SELECTED parm_shisp exp_opciones SELECTED MAQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("texto_etiqueta",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // texto_etiqueta ::= MEQ H1 parm_shisp exp_cadenatext H1 MAQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("texto_etiqueta",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // texto_etiqueta ::= MEQ P parm_shisp exp_cadenatext P MAQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("texto_etiqueta",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // texto_etiqueta ::= MEQ BR MAQ exp_contenido 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("texto_etiqueta",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // texto_etiqueta ::= MEQ INPUT parm_input exp_cadenatext INPUT MAQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("texto_etiqueta",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // texto_etiqueta ::= MEQ IMG parm_image MEQ DIVISION IMG MAQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("texto_etiqueta",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // texto_etiqueta ::= MEQ TEXTAREA par_areatext TEXTAREA MAQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("texto_etiqueta",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // texto_etiqueta ::= MEQ DIV par_div contenido_div DIV MAQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("texto_etiqueta",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // texto_etiqueta ::= MEQ BUTTON par_button exp_cadenatext BUTTON MAQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("texto_etiqueta",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // texto_etiqueta ::= error exp_contenido 
            {
              Object RESULT =null;
		System.out.println("error html");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("texto_etiqueta",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // texto ::= ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("texto",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // texto ::= APOSTROFO mensaje_texto 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("texto",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // mensaje_texto ::= CADENA mensaje_texto 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mensaje_texto",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // mensaje_texto ::= ID mensaje_texto 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mensaje_texto",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // mensaje_texto ::= NUMENTERO mensaje_texto 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mensaje_texto",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // mensaje_texto ::= NUMDECIMAL mensaje_texto 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mensaje_texto",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // mensaje_texto ::= SUMA mensaje_texto 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mensaje_texto",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // mensaje_texto ::= RESTA mensaje_texto 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mensaje_texto",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // mensaje_texto ::= PRODUCTO mensaje_texto 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mensaje_texto",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // mensaje_texto ::= DIVISION mensaje_texto 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mensaje_texto",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // mensaje_texto ::= DOSP mensaje_texto 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mensaje_texto",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // mensaje_texto ::= COMA mensaje_texto 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mensaje_texto",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // mensaje_texto ::= IGUAL mensaje_texto 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mensaje_texto",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // mensaje_texto ::= PARIN mensaje_texto 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mensaje_texto",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // mensaje_texto ::= PAROUT mensaje_texto 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mensaje_texto",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // mensaje_texto ::= APOSTROFO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mensaje_texto",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
