//codigo java
package com.adolfo.analizadores;
/*importar librerias o archivos utilizados*/
import java_cup.runtime.*;
import java.util.List;
import java.util.ArrayList;
import com.adolfo.analizadores.Token;
import com.adolfo.analizadores.datos.LexemeId;
import com.adolfo.analizadores.datos.EtiquetaId;
import com.adolfo.analizadores.datos.TablaSimbolo;

 parser code {:
    //declaracion de variables
    private int filaErr = 0, columnErr = 0;
    private String datErr = "", varIdFor = "", lexErr = "", idCaptcha = "", namehtml = "", captchaCreado = "";
    private String varscriptGlobal = "<script> \n";
    private List<String> errorSintactico;
    private List<String> errorSemantico;
    private List<String> listIdEtiqueta;
    private List<String> listIdVar;
    private List<LexemeId> ListTablaSimbol;
    private EtiquetaId etiquetaId;
    private TablaSimbolo tablaSimbolo;
    private String parInput = "style=\"";
    private String parShipsp = "style=\"";
    private String parDiv = "style=\"";
    private int parId = 0, parName = 0;
    int asd;

    public Parser(Lexico lex) {
        super(lex);

        this.errorSintactico = new ArrayList();
        this.errorSemantico = new ArrayList();
        this.listIdEtiqueta = lex.getListIdEtiqueta();
        this.listIdVar = lex.getListIdVar();
        this.ListTablaSimbol = new ArrayList();
        this.etiquetaId = new EtiquetaId();
        this.tablaSimbolo = new TablaSimbolo();
      
    }


//recuperacion de errroes
    public void report_error(String message, Object info) {
		System.out.println("reporterror");
	}
	public void report_fatal_error(String message, Object info) {
		System.out.println("reportfatal");
	}
	public void report_fatal_error(Symbol cur) {
		System.out.println("unrecovered_syntax_error");
	}
    
    @Override
    public void syntax_error(Symbol st) {
       Token token = (Token) st.value;
      
                errorSintactico.add(String.format("Error Sintactico lexema: %s  linea: %d  columna: %d. no se esperaba ese token. (verificar toda la linea)", token.getLexema(), token.getLine(), token.getColumna()));
             
        //report_error("Error Sintactico con el  Token:"+ token.getLexema()+" este no pertenece a la estructura - linea: "+token.getLine()+" - columna: "+token.getColumna() + "\n",null);

    System.out.println("err: " + token.getLexema() + " este no pertenece a la estructura - linea: " + token.getLine() + ", columna: " + token.getColumna());
       // errorSintactico.add(String.format("Error Sintactico lexema: %s  linea: %d  columna: %d. no se esperaba ese token.", token.getLexema(), token.getLine(), token.getColumna()));
    }

    protected int error_sync_size() {
		return 1;
	}
    public List<String> getErrorSintactico(){
	        return errorSintactico;
	    }
        public List<String> getErroSemantico(){
	        return errorSemantico;
	    }
        public String getCaptchaCreado(){
            return captchaCreado;
        }

        public String getIdCaptcha(){
            return idCaptcha;
        }

    public List<LexemeId> getListTablaSimbol(){
	        return ListTablaSimbol;
    }

 :}

 /*simbolos terminales*/
 terminal Token HTML ,HEAD, TITLE, LINK, BODY, SPAM, INPUT, TEXTAREA, 
            SELECTED, OPTION, DIV, IMG, BR, BUTTON, H1, P, SCRIPT,
            REFERENCIA, BACKGROUND, COLOR, FONTSZ, FONTFY, ALINGN,
            TYPE, IDCM, NAME, COLUMNA, FILA, CLASE, SRC, WIDTH,	HEIGHT,
            ALT, ONCLICK, ENTERO, DECIMAL, BOOLEANO, CHAR, STRING, GLOBAL,
            IGUAL, MEQ, MAQ, OR, AND, NOT, SUMA, RESTA, PRODUCTO, DIVISION,
            CORIN, COROUT, PARIN, PAROUT, COMA, PUNTOCOMA, LLAVEIN, LLAVEOUT,
            DOSP, LOAD, ASCF, DESCF, LETPF, LETIMF, REVERSEF, CARALEF, NUMALEF,
            ALERTF, EXIT, GETID, INSERT, INIT, END, IF, ELSE, REPEAT, HUNTIL,
            THEN, WHILE, THENWHILE, COMILLA, APOSTROFO, PROCESOS, BOOLEANOS, ID,
            NUMENTERO, NUMDECIMAL, CARACTER, HEXADECIMAL, CADENA; 


 /*simbolos no terminales*/
non terminal exp_ini, par_html, exp_head, exp_name, par_head, exp_contenido, exp_cadenatext, 
            par_link, exp_links, parm_shisp, exp_opciones, parm_input, parm_image,
            par_areatext, par_color, par_fontsize, par_heigtwith, par_button, par_body,
            contenido_div, par_div, exp_script, exp_funciones,
            instrucciones, exp_variables, texto, mensaje_texto, instrucciones_if, condiciones,
            condiciones_repeat, limit_repeat, instrucciones_intro, par_insert, par_insert1,
            texto_etiqueta, exp_entero, exp_decimal, exp_char, exp_string, exp_boolean, dato_entero,
            exp_opeinteger, dato_decimal, exp_oper_decimal, texto_insert, dat_char, 
            dato_string, exp_oper_string, exp_funciones_especial, par_function_esp, dat_boolean,
            exp_oper_bool, numeros, expr_numerica, signo_condicion, exp_condicion, oper_cond,
            exp_conds, exp_dir, exp_oper_id, text_string;


/* Producciones siendo A el inicial*/
start with exp_ini;

 exp_ini ::= MEQ HTML par_html:tp exp_head:n  {: captchaCreado += "<HTML  " + tp.toString() + "\n" + varscriptGlobal + "\n</script>\n"+ n.toString();
                                                  System.out.println("vx " + captchaCreado);       :}
    | error exp_head                         {:System.out.println("error html en inicio");:}
    ;

par_html ::= CORIN IDCM IGUAL COMILLA ID:i COMILLA COROUT par_html:n  {: idCaptcha = i.getLexema(); parId++;                                                
                                                                        if(parId > 1){errorSemantico.add("error semantico, aparece 2 veces el parametro id en la etiqueta htm");}  
                                                                        RESULT = "  id=\"" + i.getLexema() + "\"  " + n.toString();
                                                                     :} 
    | CORIN NAME IGUAL COMILLA exp_name:i COROUT par_html:n     {: namehtml =  i.toString(); parName++; 
                                                                     if(parName > 1){errorSemantico.add("error semantico, aparece 2 veces el parametro name en la etiqueta htm");}  
                                                                    RESULT = "  name=\"" + i.toString() + "\"  " + n.toString();
                                                                :} 
    | MAQ:a                                                     {:RESULT = a.getLexema(); :}            
    ;

exp_name ::= CADENA:tp exp_name:n        {:RESULT = tp.getLexema()+" " + n.toString(); :}
    | ID:tp exp_name:n                   {:RESULT = tp.getLexema()+" " + n.toString(); :}
    | NUMENTERO:tp exp_name:n            {:RESULT = tp.getLexema()+" " + n.toString(); :}
    | NUMDECIMAL:tp exp_name:n           {:RESULT = tp.getLexema()+" " + n.toString(); :}
    | COMILLA:tp                         {:RESULT = tp.getLexema(); :}
    ;

exp_head ::= MEQ HEAD MAQ par_head:tp MEQ BODY par_body:n  exp_contenido:e     {:   RESULT = "<head> "+ tp.toString() + "  \n<body "+ n.toString() + " \n " +e.toString() ; :}
    | exp_script:tp exp_head:n                                          {:RESULT = tp.toString()+" " + n.toString(); :}
    | MEQ BODY par_body:tp  exp_contenido:n                             {: RESULT = "<body "+ tp.toString() + "  "+ n.toString() ; :} 
    | error exp_contenido
    ;


par_head ::= MEQ TITLE MAQ exp_cadenatext:tp  TITLE MAQ par_head:n      {: RESULT = "<title> "+ tp.toString() + "title>  "+ n.toString() ; :}
    | MEQ LINK par_link:tp MEQ DIVISION LINK MAQ par_head:n             {: RESULT = "<link "+ tp.toString() + "</link>  "+ n.toString() ; :}     
    | MEQ DIVISION HEAD MAQ                                             {:RESULT = " </head> "; :}
    | exp_script:tp par_head:n                                          {:RESULT = tp.toString()+" " + n.toString(); :}
    ;

par_body ::= CORIN BACKGROUND IGUAL COMILLA:tp par_color:n COMILLA:e COROUT par_body:e1   {:RESULT = "  BgColOr=" + tp.getLexema() + n.toString() + e.getLexema() + e1.toString(); :}
    | MAQ:tp                                                                    {:RESULT = tp.getLexema() + " "; :}
    ;


par_link ::= CORIN REFERENCIA IGUAL COMILLA:tp exp_links:n COROUT par_link:e {:RESULT = " href=" +tp.getLexema() + n.toString() + " " + e.toString(); :}
    | MAQ:tp                                                                 {:RESULT = tp.getLexema() + " "; :}
    ;

exp_links ::= ID:tp exp_links:n          {:RESULT = tp.getLexema() + n.toString(); :}
    | DOSP:tp exp_links:n               {:RESULT = tp.getLexema() + n.toString(); :}
    | DIVISION:tp exp_links:n           {:RESULT = tp.getLexema() + n.toString(); :}
    | CADENA:tp exp_links:n             {:RESULT = tp.getLexema() + n.toString(); :}
    | IGUAL:tp exp_links:n              {:RESULT = tp.getLexema() + n.toString(); :}
    | NUMENTERO:tp exp_links:n          {:RESULT = tp.getLexema() + n.toString(); :}
    | AND:tp exp_links:n                {:RESULT = tp.getLexema() + n.toString(); :}
    | NUMDECIMAL:tp exp_links:n         {:RESULT = tp.getLexema() + n.toString(); :}
    | SUMA:tp exp_links:n               {:RESULT = tp.getLexema() + n.toString(); :}
    | PRODUCTO:tp exp_links:n           {:RESULT = tp.getLexema() + n.toString(); :}
    | RESTA:tp exp_links:n              {:RESULT = tp.getLexema() + n.toString(); :}
    | PARIN:tp exp_links:n              {:RESULT = tp.getLexema() + n.toString(); :}
    | PAROUT:tp exp_links:n             {:RESULT = tp.getLexema() + n.toString(); :}
    | COMA:tp exp_links:n               {:RESULT = tp.getLexema() + n.toString(); :}
    | HEXADECIMAL:tp exp_links:n        {:RESULT = tp.getLexema() + n.toString(); :}
    | COMILLA:tp                        {:RESULT = tp.getLexema(); :}
    ;

exp_contenido ::= MEQ SPAM  parm_shisp:tp exp_cadenatext:n  SPAM MAQ exp_contenido:e     {:  String styl = parShipsp + "\"  "; parShipsp = "style=\"";   RESULT = "\n<spam "+ styl + tp.toString()+" " + n.toString() + "spam>  " + e.toString(); :}
    | MEQ SELECTED parm_shisp:tp exp_opciones:n  SELECTED MAQ exp_contenido:e                {:  String styl = parShipsp + "\"  "; parShipsp = "style=\"";   RESULT = "\n<select "+ styl + tp.toString()+" " + n.toString() + "select>  " + e.toString(); :}
    | MEQ H1 parm_shisp:tp exp_cadenatext:n  H1 MAQ exp_contenido:e                          {:  String styl = parShipsp + "\"  "; parShipsp = "style=\"";   RESULT = "\n<h1 "+ styl + tp.toString()+" " + n.toString() + "h1>  " + e.toString(); :}
    | MEQ P parm_shisp:tp exp_cadenatext:n  P MAQ exp_contenido:e                            {:  String styl = parShipsp + "\"  "; parShipsp = "style=\"";   RESULT = "\n<p "+ styl + tp.toString()+" " + n.toString() + "p>  " + e.toString(); :}
    | MEQ BR MAQ exp_contenido:tp                                                       {: RESULT = "\n<br> " + tp.toString(); :}
    | MEQ INPUT parm_input:tp exp_cadenatext:n  INPUT MAQ exp_contenido:e                    {:  String styl = parInput + "\"  "; parInput = "style=\"";   RESULT = "\n<input "+ styl + tp.toString()+" " + n.toString() + "input>  " + e.toString(); :}
    | MEQ IMG parm_image:tp MEQ DIVISION IMG MAQ exp_contenido:e                           {:  String styl = "\"\"  "; parInput = "style=\"";   RESULT = "\n<img "+ styl + tp.toString()+" " + "</img>  " + e.toString(); :}
    | MEQ TEXTAREA par_areatext:tp TEXTAREA MAQ exp_contenido:e                            {:  String styl = parInput + "\"  "; parInput = "style=\"";   RESULT = "\n<textarea "+ styl + tp.toString()+" " +  "textarea>  " + e.toString(); :}
    | MEQ DIV par_div:tp contenido_div:n DIV MAQ exp_contenido:e                             {:  String styl = parDiv + "\"  "; parDiv = "style=\"";   RESULT = "\n<div "+ styl + tp.toString()+" " + n.toString() + "  " + e.toString(); :}
    | MEQ BUTTON par_button:tp  exp_cadenatext:n BUTTON MAQ exp_contenido:e                  {:  String styl = parInput + "\"  "; parInput = "style=\"";   RESULT = "\n<button "+ styl + tp.toString()+" " + n.toString() + "button>  " + e.toString(); :}
    | exp_script:tp exp_contenido:n                                                     {:RESULT = tp.toString()+" " + n.toString(); :}
    | MEQ DIVISION BODY MAQ MEQ DIVISION HTML MAQ  {:    RESULT = "</body> \n</html>"; :}
    | MEQ DIVISION HTML MAQ   {:    RESULT = "</html>"; :}
    | error exp_contenido            {:System.out.println("error sintactico"); :}
    ;

contenido_div ::= MEQ SPAM parm_shisp:tp exp_cadenatext:n  SPAM MAQ contenido_div:e    {:  String styl = parInput + "\"  "; parInput = "style=\"";   RESULT = "\n<spam "+ styl + tp.toString()+" " + n.toString() + "spam>  " + e.toString(); :}
    | MEQ SELECTED parm_shisp:tp exp_opciones:n  SELECTED MAQ contenido_div:e          {:  String styl = parInput + "\"  "; parInput = "style=\"";   RESULT = "\n<select "+ styl + tp.toString()+" " + n.toString() + "select>  " + e.toString(); :}
    | MEQ H1 parm_shisp:tp exp_cadenatext:n  H1 MAQ contenido_div:e                    {:  String styl = parInput + "\"  "; parInput = "style=\"";   RESULT = "\n<h1 "+ styl + tp.toString()+" " + n.toString() + "h1>  " + e.toString(); :}
    | MEQ P parm_shisp:tp exp_cadenatext:n  P MAQ contenido_div:e                      {:  String styl = parInput + "\"  "; parInput = "style=\"";   RESULT = "\n<p "+ styl + tp.toString()+" " + n.toString() + "p>  " + e.toString(); :}
    | MEQ BR MAQ contenido_div:tp                                                      {:RESULT = "\n<br> " + tp.toString(); :}
    | MEQ INPUT parm_input:tp exp_cadenatext:n  INPUT MAQ contenido_div:e              {:  String styl = parInput + "\"  "; parInput = "style=\"";   RESULT = "\n<input "+ styl + tp.toString()+" " + n.toString() + "input>  " + e.toString(); :}
    | MEQ IMG parm_image:tp MEQ DIVISION IMG MAQ contenido_div:e                       {:  String styl =   "\"\"  "; parInput = "style=\"";   RESULT = "\n<img "+ styl + tp.toString()+" " + "</img>  " + e.toString(); :}
    | MEQ TEXTAREA par_areatext:tp TEXTAREA MAQ contenido_div:e                        {:  String styl = parInput + "\"  "; parInput = "style=\"";   RESULT = "\n<textarea "+ styl + tp.toString()+" " +  "textarea>  " + e.toString(); :}
    | MEQ BUTTON par_button:tp  exp_cadenatext:n  BUTTON MAQ contenido_div:e           {:  String styl = parInput + "\"  "; parInput = "style=\"";   RESULT = "\n<button "+ styl + tp.toString()+" " + n.toString() + "button>  " + e.toString(); :}
    | exp_script:tp contenido_div:n                                                    {:RESULT = tp.toString()+" " + n.toString(); :}
    | MEQ DIV par_div:tp contenido_div:n DIV MAQ contenido_div:e                             {:  String styl = parDiv + "\"  "; parDiv = "style=\"";   RESULT = "\n<div "+ styl + tp.toString()+" " + n.toString() + "  " + e.toString(); :}
    | MEQ DIVISION                                                              {:RESULT = " </div>"; :}
    ;

par_div ::=  CORIN IDCM IGUAL COMILLA ID:tp COMILLA COROUT par_div:n                {:RESULT = "  id=\"" + tp.getLexema() + "\"  " + n.toString(); :}
    | CORIN ALINGN IGUAL COMILLA ID:tp COMILLA COROUT par_div:n                     {: if(tp.getLexema().equalsIgnoreCase("center") || tp.getLexema().equalsIgnoreCase("left") || tp.getLexema().equalsIgnoreCase("rigth") || tp.getLexema().equals("justificar"))
                                                                                    { parDiv += " text-align: " + tp.getLexema() + "; ";    RESULT = "  " + n.toString(); }
                                                                                    else { errorSintactico.add(String.format("Error Sintactico lexema: %s  linea: %d  columna: %d. no se esperaba ese token, se esperaba un atributo de type, text, number, etc", tp.getLexema(), tp.getLine(), tp.getColumna())); 
                                                                                    parDiv += " text-align: " + tp.getLexema() + "; ";    RESULT = "  " + n.toString(); } :}
    | CORIN COLOR IGUAL COMILLA par_color:tp COMILLA COROUT par_div:n               {: parDiv += " color: " + tp.toString() + "; ";    RESULT = "  " + n.toString(); :}
    | CORIN FONTFY IGUAL COMILLA ID:tp COMILLA COROUT par_div:n                     {: if(tp.getLexema().equalsIgnoreCase("courier") || tp.getLexema().equalsIgnoreCase("Arial") || tp.getLexema().equalsIgnoreCase("Geneva") || tp.getLexema().equals("sans-serif"))
                                                                                    { parDiv += " font-family: " + tp.getLexema() + "; ";    RESULT = "  " + n.toString(); }
                                                                                    else { errorSintactico.add(String.format("Error Sintactico lexema: %s  linea: %d  columna: %d. no se esperaba ese token, se esperaba un atributo de type, text, number, etc", tp.getLexema(), tp.getLine(), tp.getColumna())); 
                                                                                    parDiv += " font-family: " + tp.getLexema() + "; ";    RESULT = "  " + n.toString(); } :}
    | CORIN FONTSZ IGUAL COMILLA par_fontsize:tp COMILLA COROUT par_div:n           {: parDiv += " font-size: " + tp.toString() + "; ";    RESULT = "  " + n.toString(); :}
    | CORIN BACKGROUND IGUAL COMILLA par_color:tp COMILLA COROUT par_div:n          {: parDiv += " background: " + tp.toString() + "; ";    RESULT = "  " + n.toString(); :}
    | CORIN CLASE IGUAL COMILLA ID:tp COMILLA COROUT par_div:n                              {: if(tp.getLexema().equals("row") || tp.getLexema().equals("column") )
                                                                                    { parDiv += " class: " + tp.getLexema() + "; ";    RESULT = "  " + n.toString(); }
                                                                                    else { errorSintactico.add(String.format("Error Sintactico lexema: %s  linea: %d  columna: %d. no se esperaba ese token, se esperaba un atributo de type, text, number, etc", tp.getLexema(), tp.getLine(), tp.getColumna())); 
                                                                                    parDiv += " class: " + tp.getLexema() + "; ";    RESULT = "  " + n.toString(); } :}
    | MAQ:tp                                                                        {:RESULT = tp.getLexema(); :}
    ;

par_button ::=  CORIN IDCM IGUAL COMILLA ID:tp COMILLA COROUT par_button:n              {:RESULT = "  id=\"" + tp.getLexema() + "\"  " + n.toString(); :}
    | CORIN ALINGN IGUAL COMILLA ID:tp COMILLA COROUT par_button:n                      {: if(tp.getLexema().equalsIgnoreCase("center") || tp.getLexema().equalsIgnoreCase("left") || tp.getLexema().equalsIgnoreCase("rigth") || tp.getLexema().equals("justificar"))
                                                                                        { parInput += " text-align: " + tp.getLexema() + "; ";    RESULT = "  " + n.toString(); }
                                                                                        else { errorSintactico.add(String.format("Error Sintactico lexema: %s  linea: %d  columna: %d. no se esperaba ese token, se esperaba un atributo de type, text, number, etc", tp.getLexema(), tp.getLine(), tp.getColumna())); 
                                                                                        parInput += " text-align: " + tp.getLexema() + "; ";    RESULT = "  " + n.toString(); } :}
    | CORIN COLOR IGUAL COMILLA par_color:tp COMILLA COROUT par_button:n                {: parInput += " color: " + tp.toString() + "; ";    RESULT = "  " + n.toString(); :}
    | CORIN FONTFY IGUAL COMILLA ID:tp COMILLA COROUT par_button:n                      {: if(tp.getLexema().equalsIgnoreCase("courier") || tp.getLexema().equalsIgnoreCase("Arial") || tp.getLexema().equalsIgnoreCase("Geneva") || tp.getLexema().equals("sans-serif"))
                                                                                        { parInput += " font-family: " + tp.getLexema() + "; ";    RESULT = "  " + n.toString(); }
                                                                                         else { errorSintactico.add(String.format("Error Sintactico lexema: %s  linea: %d  columna: %d. no se esperaba ese token, se esperaba un atributo de type, text, number, etc", tp.getLexema(), tp.getLine(), tp.getColumna())); 
                                                                                        parInput += " font-family: " + tp.getLexema() + "; ";    RESULT = "  " + n.toString(); } :}
    | CORIN FONTSZ IGUAL COMILLA par_fontsize:tp COMILLA COROUT par_button:n            {: parInput += " font-size: " + tp.toString() + "; ";    RESULT = "  " + n.toString(); :}
    | CORIN BACKGROUND IGUAL COMILLA par_color:tp COMILLA COROUT par_button:n           {: parInput += " background: " + tp.toString() + "; ";    RESULT = "  " + n.toString(); :}
    | CORIN ONCLICK IGUAL COMILLA PROCESOS:tp PARIN PAROUT COMILLA COROUT par_button:n  {:RESULT = "  onclick=\"" + tp.getLexema() + "();\"  " + n.toString(); :}
    | MAQ:tp                                                                            {:RESULT = tp.getLexema(); :}
    ;

par_areatext ::=  CORIN IDCM IGUAL COMILLA ID:tp COMILLA COROUT par_areatext:n      {:RESULT = "  id=\"" + tp.getLexema() + "\"  " + n.toString(); :}
    | CORIN COLUMNA IGUAL COMILLA NUMENTERO:tp COMILLA COROUT par_areatext:n        {:RESULT = "  cols=\"" + tp.getLexema() + "\"  " + n.toString(); :}
    | CORIN FILA IGUAL COMILLA NUMENTERO:tp COMILLA COROUT par_areatext:n           {:RESULT = "  rows=\"" + tp.getLexema() + "\"  " + n.toString(); :}
    | CORIN ALINGN IGUAL COMILLA ID:tp COMILLA COROUT par_areatext:n                {: if(tp.getLexema().equalsIgnoreCase("center") || tp.getLexema().equalsIgnoreCase("left") || tp.getLexema().equalsIgnoreCase("rigth") || tp.getLexema().equals("justificar"))
                                                                                    { parInput += " text-align: " + tp.getLexema() + "; ";    RESULT = "  " + n.toString(); }
                                                                                    else { errorSintactico.add(String.format("Error Sintactico lexema: %s  linea: %d  columna: %d. no se esperaba ese token, se esperaba un atributo de type, text, number, etc", tp.getLexema(), tp.getLine(), tp.getColumna())); 
                                                                                    parInput += " text-align: " + tp.getLexema() + "; ";    RESULT = "  " + n.toString(); } :}
    | CORIN FONTFY IGUAL COMILLA ID:tp COMILLA COROUT par_areatext:n                {: if(tp.getLexema().equalsIgnoreCase("courier") || tp.getLexema().equalsIgnoreCase("Arial") || tp.getLexema().equalsIgnoreCase("Geneva") || tp.getLexema().equals("sans-serif"))
                                                                                    { parInput += " font-family: " + tp.getLexema() + "; ";    RESULT = "  " + n.toString(); }
                                                                                    else { errorSintactico.add(String.format("Error Sintactico lexema: %s  linea: %d  columna: %d. no se esperaba ese token, se esperaba un atributo de type, text, number, etc", tp.getLexema(), tp.getLine(), tp.getColumna())); 
                                                                                    parInput += " font-family: " + tp.getLexema() + "; ";    RESULT = "  " + n.toString(); } :}
    | CORIN FONTSZ IGUAL COMILLA par_fontsize:tp COMILLA COROUT par_areatext:n      {: parInput += " font-size: " + tp.toString() + "; ";    RESULT = "  " + n.toString(); :}
    | MAQ MEQ DIVISION                                                                {:RESULT = "> </"; :}
    ;

parm_shisp ::=  CORIN IDCM IGUAL COMILLA ID:tp COMILLA COROUT parm_shisp:n      {:RESULT = "  id=\"" + tp.getLexema() + "\"  " + n.toString(); :} 
    | CORIN COLOR IGUAL COMILLA par_color:tp COMILLA COROUT parm_shisp:n        {:     RESULT = "  " + n.toString(); parShipsp += " color: " + tp.toString() + "; "; :}
    | CORIN ALINGN IGUAL COMILLA ID:tp COMILLA COROUT parm_shisp:n              {: if(tp.getLexema().equalsIgnoreCase("center") || tp.getLexema().equalsIgnoreCase("left") || tp.getLexema().equalsIgnoreCase("rigth") || tp.getLexema().equals("justificar"))
                                                                                {     RESULT = "  " + n.toString();  parShipsp += " text-align: " + tp.getLexema() + "; "; }
                                                                                else { errorSintactico.add(String.format("Error Sintactico lexema: %s  linea: %d  columna: %d. no se esperaba ese token, se esperaba un atributo de type, text, number, etc", tp.getLexema(), tp.getLine(), tp.getColumna())); 
                                                                                    RESULT = "  " + n.toString(); }  parShipsp += " text-align: " + tp.getLexema() + "; ";:}
    | CORIN FONTFY IGUAL COMILLA ID:tp COMILLA COROUT parm_shisp:n              {: if(tp.getLexema().equalsIgnoreCase("courier") || tp.getLexema().equalsIgnoreCase("Arial") || tp.getLexema().equalsIgnoreCase("Geneva") || tp.getLexema().equals("sans-serif"))
                                                                                {     RESULT = "  " + n.toString(); parShipsp += " font-family: " + tp.getLexema() + "; "; }
                                                                                else { errorSintactico.add(String.format("Error Sintactico lexema: %s  linea: %d  columna: %d. no se esperaba ese token, se esperaba un atributo de type, text, number, etc", tp.getLexema(), tp.getLine(), tp.getColumna())); 
                                                                                    RESULT = "  " + n.toString(); }  parShipsp += " font-family: " + tp.getLexema() + "; "; :}
    | CORIN FONTSZ IGUAL COMILLA par_fontsize:tp COMILLA COROUT parm_shisp:n    {:    RESULT = "  " + n.toString();  parShipsp += " font-size: " + tp.toString() + "; ";  :}
    | MAQ:tp                                                                    {:RESULT = tp.getLexema(); :}
    ;

parm_input ::=  CORIN IDCM IGUAL COMILLA ID:tp COMILLA COROUT parm_input:n      {:RESULT = "  id=\"" + tp.getLexema() + "\"  " + n.toString(); :}
    | CORIN TYPE IGUAL COMILLA ID:tp COMILLA COROUT parm_input:n                {: if(tp.getLexema().equals("text") || tp.getLexema().equals("number") || tp.getLexema().equals("radio") || tp.getLexema().equals("checkbox"))
                                                                                { RESULT = "  type=\"" + tp.getLexema() + "\"  " + n.toString(); }
                                                                                else { errorSintactico.add(String.format("Error Sintactico lexema: %s  linea: %d  columna: %d. no se esperaba ese token, se esperaba un atributo de type, text, number, etc", tp.getLexema(), tp.getLine(), tp.getColumna())); 
                                                                                RESULT = "  type=\"text\"  " + n.toString(); } :}   
    | CORIN COLOR IGUAL COMILLA par_color:tp COMILLA COROUT parm_input:n        {: parInput += " color: " + tp.toString() + "; ";    RESULT = "  " + n.toString(); :}
    | CORIN ALINGN IGUAL COMILLA ID:tp COMILLA COROUT parm_input:n              {: if(tp.getLexema().equalsIgnoreCase("center") || tp.getLexema().equalsIgnoreCase("left") || tp.getLexema().equalsIgnoreCase("rigth") || tp.getLexema().equals("justificar"))
                                                                                { parInput += " text-align: " + tp.getLexema() + "; ";    RESULT = "  " + n.toString(); }
                                                                                else { errorSintactico.add(String.format("Error Sintactico lexema: %s  linea: %d  columna: %d. no se esperaba ese token, se esperaba un atributo de type, text, number, etc", tp.getLexema(), tp.getLine(), tp.getColumna())); 
                                                                                parInput += " text-align: " + tp.getLexema() + "; ";    RESULT = "  " + n.toString(); } :}
    | CORIN FONTFY IGUAL COMILLA ID:tp COMILLA COROUT parm_input:n              {: if(tp.getLexema().equalsIgnoreCase("courier") || tp.getLexema().equalsIgnoreCase("Arial") || tp.getLexema().equalsIgnoreCase("Geneva") || tp.getLexema().equals("sans-serif"))
                                                                                { parInput += " font-family: " + tp.getLexema() + "; ";    RESULT = "  " + n.toString(); }
                                                                                else { errorSintactico.add(String.format("Error Sintactico lexema: %s  linea: %d  columna: %d. no se esperaba ese token, se esperaba un atributo de type, text, number, etc", tp.getLexema(), tp.getLine(), tp.getColumna())); 
                                                                                parInput += " font-family: " + tp.getLexema() + "; ";    RESULT = "  " + n.toString(); } :}
    | CORIN FONTSZ IGUAL COMILLA par_fontsize:tp COMILLA COROUT parm_input:n    {: parInput += " font-size: " + tp.toString() + "; ";    RESULT = "  " + n.toString(); :}
    | MAQ:tp                                                                    {:RESULT = tp.getLexema(); :}
    ;

parm_image ::=  CORIN IDCM IGUAL COMILLA ID:tp COMILLA COROUT parm_image:n     {:RESULT = "  id=\"" + tp.getLexema() + "\"  " + n.toString(); :}
    | CORIN SRC IGUAL COMILLA exp_links:tp  COROUT parm_image:n                {:RESULT = "  src=\"" + tp.toString() + " " + n.toString(); :}
    | CORIN ALT IGUAL COMILLA text_string:tp  COROUT parm_image:n              {:RESULT = "  alt=\"" + tp.toString() + " " + n.toString(); :}
    | CORIN WIDTH IGUAL COMILLA par_heigtwith:tp COMILLA COROUT parm_image:n    {:RESULT = "  width=\"" + tp.toString() + "\"  " + n.toString(); :}
    | CORIN HEIGHT IGUAL COMILLA par_heigtwith:tp COMILLA COROUT parm_image:n   {:RESULT = "  height=\"" + tp.toString() + "\"  " + n.toString(); :}
    | MAQ:tp                                                                    {:RESULT = tp.getLexema(); :}
    ;


exp_cadenatext ::= CADENA:tp exp_cadenatext:n           {:RESULT = tp.getLexema()+" " + n.toString(); :}
    | ID:tp exp_cadenatext:n                            {:RESULT = tp.getLexema()+" " + n.toString(); :}
    | NUMENTERO:tp exp_cadenatext:n                     {:RESULT = tp.getLexema()+" " + n.toString(); :}
    | NUMDECIMAL:tp exp_cadenatext:n                    {:RESULT = tp.getLexema()+" " + n.toString(); :}
    | HEXADECIMAL:tp exp_cadenatext:n                   {:RESULT = tp.getLexema()+" " + n.toString(); :}
    | SUMA:tp exp_cadenatext:n                          {:RESULT = tp.getLexema()+" " + n.toString(); :}
    | RESTA:tp exp_cadenatext:n                         {:RESULT = tp.getLexema()+" " + n.toString(); :}
    | PRODUCTO:tp exp_cadenatext:n                      {:RESULT = tp.getLexema()+" " + n.toString(); :}
    | AND:tp exp_cadenatext:n                           {:RESULT = tp.getLexema()+" " + n.toString(); :}
    | OR:tp exp_cadenatext:n                            {:RESULT = tp.getLexema()+" " + n.toString(); :}
    | NOT:tp exp_cadenatext:n                           {:RESULT = tp.getLexema()+" " + n.toString(); :}
    | DIVISION:tp exp_cadenatext:n                      {:RESULT = tp.getLexema()+" " + n.toString(); :}
    | DOSP:tp exp_cadenatext:n                          {:RESULT = tp.getLexema()+" " + n.toString(); :}
    | COMA:tp exp_cadenatext:n                          {:RESULT = tp.getLexema()+" " + n.toString(); :}
    | IGUAL:tp exp_cadenatext:n                         {:RESULT = tp.getLexema()+" " + n.toString(); :}
    | PARIN:tp exp_cadenatext:n                         {:RESULT = tp.getLexema()+" " + n.toString(); :}
    | PAROUT:tp exp_cadenatext:n                        {:RESULT = tp.getLexema()+" " + n.toString(); :}
    | MEQ:tp DIVISION:n                                 {:RESULT = tp.getLexema() + n.getLexema(); :}
    ;

exp_opciones ::= MEQ OPTION MAQ exp_cadenatext:tp  OPTION MAQ exp_opciones:n {:RESULT = " <option> "+ tp.toString()+ "option>  " + n.toString(); :}
    | MEQ:tp DIVISION:n                                                     {:RESULT = tp.getLexema() + n.getLexema(); :}
    ;

par_color ::= ID:tp                 {:RESULT =  tp.getLexema(); :}
    | HEXADECIMAL:tp                {:RESULT =  tp.getLexema(); :}
    ;

par_fontsize ::= NUMENTERO:tp ID:n      {: if(n.getLexema().equals("px")){ RESULT =  tp.getLexema() + n.getLexema(); }
                                            else { errorSintactico.add(String.format("Error Sintactico lexema: %s  linea: %d  columna: %d. no se esperaba ese token.", n.getLexema(), n.getLine(), n.getColumna())); 
                                            RESULT =  tp.getLexema() + n.getLexema(); } :}
    | NUMDECIMAL:tp ID:n                {: if(n.getLexema().equals("px")){ RESULT =  tp.getLexema() + n.getLexema(); }
                                            else { errorSintactico.add(String.format("Error Sintactico lexema: %s  linea: %d  columna: %d. no se esperaba ese token.", n.getLexema(), n.getLine(), n.getColumna()));  
                                            RESULT =  tp.getLexema() + n.getLexema(); } :}
    ;

par_heigtwith ::= NUMENTERO:tp ID:n     {: if(n.getLexema().equals("px")){ RESULT =  tp.getLexema() + n.getLexema(); }
                                            else { errorSintactico.add(String.format("Error Sintactico lexema: %s  linea: %d  columna: %d. no se esperaba ese token.", n.getLexema(), n.getLine(), n.getColumna()));  
                                            RESULT =  tp.getLexema() + n.getLexema(); } :}
    | NUMDECIMAL:tp ID:n                {: if(n.getLexema().equals("px")){ RESULT =  tp.getLexema() + n.getLexema(); }
                                            else { errorSintactico.add(String.format("Error Sintactico lexema: %s  linea: %d  columna: %d. no se esperaba ese token.", n.getLexema(), n.getLine(), n.getColumna())); 
                                            RESULT =  tp.getLexema() + n.getLexema(); } :}
    | NUMENTERO:tp CADENA:n             {: if(n.getLexema().equals("%")){ RESULT =  tp.getLexema() + n.getLexema(); }
                                            else { errorSintactico.add(String.format("Error Sintactico lexema: %s  linea: %d  columna: %d. no se esperaba ese token.", n.getLexema(), n.getLine(), n.getColumna()));  
                                            RESULT =  tp.getLexema() + n.getLexema(); } :}
    | NUMDECIMAL:tp CADENA:n            {: if(n.getLexema().equals("%")){ RESULT =  tp.getLexema() + n.getLexema(); }
                                            else { errorSintactico.add(String.format("Error Sintactico lexema: %s  linea: %d  columna: %d. no se esperaba ese token.", n.getLexema(), n.getLine(), n.getColumna()));  
                                            RESULT =  tp.getLexema() + n.getLexema(); } :}
    ;

exp_script ::= MEQ SCRIPT MAQ exp_funciones:tp                                      {:RESULT = "  <script> " + tp.toString(); :}
    ;

exp_funciones ::= LOAD PARIN PAROUT CORIN instrucciones:tp exp_funciones:n          {:RESULT = " \n { \n"+ tp.toString()+" " + n.toString(); :}
    | PROCESOS:tp PARIN:n PAROUT:e CORIN instrucciones:e1 exp_funciones:e2          {:RESULT = " function  " + tp.getLexema() + n.getLexema() + e.getLexema() + " { " + e1.toString() + e2.toString(); :}
    | MEQ DIVISION SCRIPT MAQ                                                       {:RESULT = "  </script>"; :}
    ;

instrucciones ::= exp_variables:tp instrucciones:n                        {:RESULT = tp.toString()+ " \n " + n.toString(); :}
    | ALERTF PARIN:tp texto:n PAROUT:e PUNTOCOMA:e1 instrucciones:e2      {:RESULT = " alert" + tp.getLexema() + n.toString() + e.getLexema() + e1.getLexema() +"\n " +  e2.toString(); :} 
    | EXIT PARIN PAROUT PUNTOCOMA instrucciones:tp                        {:RESULT = "  return; " +  tp.toString(); :} 
    | IF PARIN:tp condiciones:n  THEN INIT LLAVEIN:e DOSP instrucciones_intro:e1 instrucciones_if:e2 instrucciones:e3      {:
                                                                                RESULT = "  if" + tp.getLexema() + n.toString() + e.getLexema() + "  "+e1.toString() +"  "+ e2.toString()+"  "+e3.toString(); :}
    | REPEAT PARIN:tp condiciones_repeat:n PAROUT HUNTIL PARIN limit_repeat:e PAROUT INIT LLAVEIN:e1 DOSP instrucciones_intro:e2 instrucciones:e3       {:
                                                                                RESULT = "  for" + tp.getLexema()+n.toString()+"; " + varIdFor + "<" +e.toString()+"; "+ varIdFor +"++) "+e1.getLexema() +"  "+ e2.toString()+"  "+e3.toString(); :}
    | WHILE PARIN:tp condiciones:n  THENWHILE INIT LLAVEIN:e DOSP instrucciones_intro:e1 instrucciones:e2       {:
                                                                                RESULT = "  while" + tp.getLexema()+n.toString()+e.getLexema()+"  "+e1.toString() +"  "+ e2.toString()+"  "; :}
    | INSERT PARIN par_insert:tp PUNTOCOMA instrucciones:n                      {:RESULT = " var contenedor = document.createElement('div');\n document.body.appendChild(contenedor);"+
                                                                                    "\n contenedor.innerHTML = " + tp.toString() + " " + n.toString(); :}
    | COROUT                                                                {:RESULT = " }"; :}
    | error instrucciones                                               {:System.out.println("error sintactico"); :}
    ;

instrucciones_intro ::= exp_variables:tp instrucciones_intro:n                 {:RESULT = tp.toString()+ " \n " + n.toString(); :}
    | ALERTF PARIN:tp texto:n PAROUT:e PUNTOCOMA:e1 instrucciones_intro:e2     {:RESULT = " alert" + tp.getLexema() + n.toString() + e.getLexema() + e1.getLexema() +" " +  e2.toString(); :} 
    | EXIT PARIN PAROUT PUNTOCOMA instrucciones_intro:tp                       {:RESULT = "  return; " +  tp.toString(); :}   
    | IF PARIN:tp condiciones:n  THEN INIT LLAVEIN:e DOSP instrucciones_intro:e1 instrucciones_if:e2 instrucciones_intro:e3     {:
                                                                                RESULT = "  if" + tp.getLexema() + n.toString() + e.getLexema() + "  "+e1.toString() +"  "+ e2.toString()+"  "+e3.toString(); :}
    | REPEAT PARIN:tp condiciones_repeat:n PAROUT HUNTIL PARIN limit_repeat:e PAROUT INIT LLAVEIN:e1 DOSP instrucciones_intro:e2 instrucciones_intro:e3    {:
                                                                                RESULT = "  for" + tp.getLexema()+n.toString()+"; " + varIdFor + "<" +e.toString()+"; "+ varIdFor +"++) "+e1.getLexema() +"  "+ e2.toString()+"  "+e3.toString(); :}
    | WHILE PARIN:tp condiciones:n  THENWHILE INIT LLAVEIN:e DOSP instrucciones_intro:e1 instrucciones_intro:e2     {:
                                                                                RESULT = "  while" + tp.getLexema()+n.toString()+e.getLexema()+"  "+e1.toString() +"  "+ e2.toString()+"  "; :}
    | INSERT PARIN par_insert:tp PUNTOCOMA instrucciones_intro:n                {:RESULT = " var contenedor = document.createElement('div');\n document.body.appendChild(contenedor);"+
                                                                                    "\n contenedor.innerHTML = " + tp.toString() + " " + n.toString(); :}
    | DOSP LLAVEOUT:tp END                                                     {:RESULT = " " + tp.getLexema(); :}
  //  | error instrucciones_intro                                           {:System.out.println("error sintactico"); :}
    ;

condiciones ::= NOT:tp condiciones:n        {:RESULT = tp.getLexema()+ n.toString(); :}
    | exp_condicion:tp exp_conds:n          {:RESULT = tp.toString()+" " + n.toString(); :}
    ;

exp_conds ::=  signo_condicion:tp exp_condicion:n oper_cond:e   {:RESULT = tp.toString() +" "+ n.toString() + " " + e.toString(); :}
    |  oper_cond:tp                                         {:RESULT = tp.toString(); :}     
    ;

exp_condicion ::= BOOLEANOS:tp              {:  RESULT = tp.getLexema(); :}      
    | limit_repeat:tp                       {:RESULT = tp.toString(); :}
    | COMILLA:tp ID:n COMILLA:e             {:RESULT = tp.getLexema() + n.getLexema() + e.getLexema(); :}
    | COMILLA:tp CADENA:n COMILLA:e         {:RESULT = tp.getLexema() + n.getLexema() + e.getLexema(); :}
    ;

oper_cond ::= AND:tp AND:n condiciones:e    {:RESULT = tp.getLexema() + n.getLexema() + " " + e.toString(); :}
    | OR:tp OR:n condiciones:e              {:RESULT = tp.getLexema() + n.getLexema() + " " + e.toString(); :}
    | PAROUT:tp                            {:RESULT = tp.getLexema(); :}
    ;

signo_condicion ::= IGUAL:tp IGUAL:n        {:RESULT = tp.getLexema() + n.getLexema(); :}
    | NOT:tp IGUAL:n                        {:RESULT = tp.getLexema() + n.getLexema(); :}
    | MEQ:tp                                {:RESULT = tp.getLexema(); :}
    | MEQ:tp IGUAL:n                        {:RESULT = tp.getLexema() + n.getLexema(); :}
    | MAQ:tp                                {:RESULT = tp.getLexema(); :}
    | MAQ:tp IGUAL:n                        {:RESULT = tp.getLexema() + n.getLexema(); :}
    ;

instrucciones_if ::= ELSE IF PARIN:tp condiciones:n  THEN INIT LLAVEIN:e DOSP instrucciones_intro:e1 instrucciones_if:e2  {:
                                                            RESULT = "else if" + tp.getLexema() + n.toString() + e.getLexema() + "\n"+ e1.toString() + e2.toString(); :}
    | ELSE INIT LLAVEIN:tp DOSP instrucciones_intro:n   {:RESULT = " \n else " + tp.getLexema() + " \n" + n.toString(); :}
    | /*lambda*/                                        {:RESULT = "\n"; :}
    ;

limit_repeat ::= numeros:tp SUMA:n limit_repeat:e           {:RESULT = tp.toString() + n.getLexema() + e.toString(); :}
    | numeros:tp RESTA:n limit_repeat:e                     {:RESULT = tp.toString() + n.getLexema() + e.toString(); :}
    | numeros:tp PRODUCTO:n limit_repeat:e                  {:RESULT = tp.toString() + n.getLexema() + e.toString(); :}
    | numeros:tp DIVISION:n limit_repeat:e                  {:RESULT = tp.toString() + n.getLexema() + e.toString(); :}
    | PARIN:tp limit_repeat:n PAROUT:e expr_numerica:e1     {:RESULT = tp.getLexema() + n.toString() + e.getLexema() + e1.toString(); :}
    | numeros:tp                                            {:RESULT = tp.toString(); :}
    ;

expr_numerica ::= SUMA:tp limit_repeat:n        {:RESULT = tp.getLexema()+" " + n.toString(); :}
    | RESTA:tp limit_repeat:n                   {:RESULT = tp.getLexema()+" " + n.toString(); :}
    | PRODUCTO:tp limit_repeat:n                {:RESULT = tp.getLexema()+" " + n.toString(); :}
    | DIVISION:tp limit_repeat:n                {:RESULT = tp.getLexema()+" " + n.toString(); :}
    | /*LAMBDA*/                                {:RESULT = ""; :}
    ;

condiciones_repeat ::= ID:tp IGUAL:n numeros:e  {: varIdFor = tp.getLexema();  RESULT = tp.getLexema() +" " + n.getLexema() +" " + e.toString(); :}
    | ENTERO ID:tp IGUAL:n numeros:e            {: varIdFor = tp.getLexema();  RESULT = " let " + tp.getLexema() +" " + n.getLexema() +" " + e.toString(); :}
    ;

numeros ::= NUMENTERO:tp                    {:RESULT = tp.getLexema(); :}
    | NUMDECIMAL:tp                         {:RESULT = tp.getLexema(); :}
    | ID:tp                                 {:RESULT = tp.getLexema(); :}
    ;

exp_variables ::= ENTERO ID:tp exp_entero:n         {:RESULT = " var " + tp.getLexema() + n.toString(); :}
    | DECIMAL ID:tp exp_decimal:n                   {:RESULT = " var " + tp.getLexema() + n.toString(); :}
    | CHAR ID:tp exp_char:n                         {:RESULT = " var " + tp.getLexema() + n.toString(); :}
    | STRING ID:tp exp_string:n                     {:RESULT = " var " + tp.getLexema() + n.toString(); :}
    | BOOLEANO ID:tp exp_boolean:n                  {:RESULT = " var " + tp.getLexema() + n.toString(); :}
    | ENTERO GLOBAL ID:tp exp_entero:n              {: varscriptGlobal += "\n var " + tp.getLexema()+ n.toString();  RESULT = ""; :}
    | DECIMAL GLOBAL ID:tp exp_decimal:n            {: varscriptGlobal += "\n var " + tp.getLexema()+ n.toString();  RESULT = ""; :}
    | CHAR GLOBAL ID:tp exp_char:n                  {: varscriptGlobal += "\n var " + tp.getLexema()+ n.toString();  RESULT = ""; :}
    | STRING GLOBAL ID:tp exp_string:n              {: varscriptGlobal += "\n var " + tp.getLexema()+ n.toString();  RESULT = ""; :}
    | BOOLEANO GLOBAL ID:tp exp_boolean:n           {: varscriptGlobal += "\n var " + tp.getLexema()+ n.toString();  RESULT = ""; :}
    | ID:tp exp_dir:n                               {:RESULT = tp.getLexema() + n.toString(); :}
    ;

exp_dir ::= IGUAL:tp dato_string:n exp_oper_id:e            {:RESULT = tp.getLexema() + n.toString() + e.toString(); :}
    ;

exp_oper_id ::= SUMA:tp dato_string:n exp_oper_id:e         {:RESULT = tp.getLexema() + n.toString() + e.toString(); :}
    | RESTA:tp dato_string:n exp_oper_id:e                  {:RESULT = tp.getLexema() + n.toString() + e.toString(); :}
    | DIVISION:tp dato_string:n exp_oper_id:e               {:RESULT = tp.getLexema() + n.toString() + e.toString(); :}
    | PRODUCTO:tp dato_string:n exp_oper_id:e               {:RESULT = tp.getLexema() + n.toString() + e.toString(); :}
    | PUNTOCOMA:tp                                          {:RESULT = tp.getLexema(); :}
    ;

exp_boolean ::= IGUAL:tp dat_boolean:n exp_oper_bool:e      {:RESULT = tp.getLexema() + n.toString() + e.toString(); :}
    | COMA:tp ID:n exp_boolean:e                            {:RESULT = tp.getLexema() + n.getLexema() + e.toString(); :}
    | PUNTOCOMA:tp                                          {:RESULT = tp.getLexema(); :}
    ;

dat_boolean ::= BOOLEANOS:tp            {:  if(tp.getLexema().equals("true")) { RESULT = tp.getLexema();
                                       } else if(tp.getLexema().equals("false")) { RESULT = tp.getLexema(); } else {
                                         errorSemantico.add(String.format("Error sintactico con el lexema: %s  linea: %d  columna: %d. se esperaba true o false", tp.getLexema(), tp.getLine(), tp.getColumna()));
                                         RESULT = tp.getLexema();
                                        }  :} 
    | ID:tp                             {:  RESULT = tp.getLexema(); :}
    ;

exp_oper_bool ::= OR:tp dat_boolean:n exp_oper_bool:e           {:RESULT = tp.getLexema() + n.toString() + " " + e.toString(); :}
    | OR:tp OR:n dat_boolean:e exp_oper_bool:e1                 {:RESULT = tp.getLexema() + n.getLexema() + " " + e.toString() + e1.toString(); :}
    | AND:tp dat_boolean:n exp_oper_bool:e                      {:RESULT = tp.getLexema() + n.toString() + " " + e.toString(); :}
    | AND:tp AND:n dat_boolean:e exp_oper_bool:e1               {:RESULT = tp.getLexema() + n.getLexema() + " " + e.toString() + e1.toString(); :}
    | COMA:tp ID:n exp_boolean:e                                {:RESULT = tp.getLexema() + n.getLexema() + " " + e.toString(); :}
    | PUNTOCOMA:tp                                              {:RESULT = tp.getLexema(); :}
    ;

exp_string ::= IGUAL:tp dato_string:n exp_oper_string:e         {:RESULT = tp.getLexema() + n.toString() + e.toString(); :}
    | COMA:tp ID:n exp_string:e                                 {:RESULT = tp.getLexema() + n.getLexema() + e.toString(); :}
    | IGUAL:tp GETID:n PARIN:e APOSTROFO:e1 ID:e2 APOSTROFO:e3 PAROUT:e4 exp_oper_string:e5  {:RESULT = tp.getLexema()+ " document.getElementById" +e.getLexema()+e1.getLexema() + e2.getLexema()+e3.getLexema() + e4.getLexema()+ ".value"+ e5.toString(); :}
    | IGUAL:tp exp_funciones_especial:n exp_oper_string:e       {:RESULT = tp.getLexema() + n.toString() + e.toString(); :}
    | PUNTOCOMA:tp                                              {:RESULT = tp.getLexema(); :}
    ;

exp_funciones_especial ::= ASCF:tp PARIN:n par_function_esp:e PAROUT:e1     {:RESULT = tp.getLexema() + n.getLexema() + e.toString() + e1.getLexema(); :}
    | DESCF:tp PARIN:n par_function_esp:e PAROUT:e1                         {:RESULT = tp.getLexema() + n.getLexema() + e.toString() + e1.getLexema(); :}
    | LETPF:tp PARIN:n par_function_esp:e PAROUT:e1                         {:RESULT = tp.getLexema() + n.getLexema() + e.toString() + e1.getLexema(); :}
    | LETIMF:tp PARIN:n par_function_esp:e PAROUT:e1                        {:RESULT = tp.getLexema() + n.getLexema() + e.toString() + e1.getLexema(); :}
    | REVERSEF:tp PARIN:n par_function_esp:e PAROUT:e1                      {:RESULT = tp.getLexema() + n.getLexema() + e.toString() + e1.getLexema(); :}
    ;

par_function_esp ::= ID:tp              {: RESULT = tp.getLexema(); :}
    | COMILLA:tp text_string:n          {:RESULT = tp.getLexema()+" " + n.toString(); :}
    ;

exp_oper_string ::= SUMA:tp dato_string:n exp_oper_string:e     {:RESULT = tp.getLexema() + n.toString() + e.toString(); :}
    | COMA:tp ID:n exp_string:e                                 {:RESULT = tp.getLexema() + n.getLexema() + e.toString(); :}
    | PUNTOCOMA:tp                                              {:RESULT = tp.getLexema(); :}
    ;


dato_string ::= NUMENTERO:tp        {:RESULT = tp.getLexema(); :}
    | CARACTER:tp                   {:RESULT = tp.getLexema(); :}
    | NUMDECIMAL:tp                 {:RESULT = tp.getLexema(); :}
    | COMILLA:tp text_string:n      {:RESULT = tp.getLexema() + n.toString(); :}
    | ID:tp                         {:  RESULT = tp.getLexema(); :}
    ;

exp_char ::= IGUAL:tp CARACTER:n dat_char:e                 {:RESULT = tp.getLexema() + n.getLexema() + e.toString(); :}
    | COMA:tp ID:n exp_char:e                               {:RESULT = tp.getLexema() + n.getLexema() + e.toString(); :}
    | IGUAL:tp CARALEF:n PARIN:e PAROUT:e1 dat_char:e2      {:RESULT = tp.getLexema() + n.getLexema() + e.getLexema() + e1.getLexema() + e2.toString(); :}    
    | PUNTOCOMA:tp                                          {:RESULT = tp.getLexema(); :}
    ;

dat_char ::= COMA:tp ID:n exp_char:e        {:RESULT = tp.getLexema() + n.getLexema() + e.toString(); :}
    | PUNTOCOMA:tp                          {:RESULT = tp.getLexema(); :}
    ;

exp_entero ::= IGUAL:tp dato_entero:n  exp_opeinteger:e         {:RESULT = tp.getLexema() + n.toString() + e.toString(); :}
    | COMA:tp ID:n exp_entero:e                                 {:RESULT = tp.getLexema() + n.getLexema() + e.toString(); :}
    | IGUAL:tp NUMALEF:n PARIN:e PAROUT:e1 exp_opeinteger:e2    {:RESULT = tp.getLexema() + n.getLexema() + e.getLexema() + e1.getLexema() + e2.toString(); :}
    | PUNTOCOMA:tp                                              {:RESULT = tp.getLexema(); :}
    ;

exp_opeinteger ::= SUMA:tp dato_entero:n exp_opeinteger:e       {:RESULT = tp.getLexema() + n.toString() + e.toString(); :}
    | RESTA:tp dato_entero:n exp_opeinteger:e                   {:RESULT = tp.getLexema() + n.toString() + e.toString(); :}
    | DIVISION:tp dato_entero:n exp_opeinteger:e                {:RESULT = tp.getLexema() + n.toString() + e.toString(); :}
    | PRODUCTO:tp dato_entero:n exp_opeinteger:e                {:RESULT = tp.getLexema() + n.toString() + e.toString(); :}
    | COMA:tp ID:n exp_entero:e                                 {:RESULT = tp.getLexema() + n.toString() + e.toString(); :}
    | PUNTOCOMA:tp                                              {:RESULT = tp.getLexema(); :}
    ;

dato_entero ::= NUMENTERO:tp        {:RESULT = tp.getLexema(); :}
    | BOOLEANOS:tp                 {:  if(tp.getLexema().equals("true")) { RESULT = "1";
                                       } else if(tp.getLexema().equals("false")) { RESULT = "0"; } else {
                                         errorSemantico.add(String.format("Error semantico con id: %s  linea: %d  columna: %d. no existe este id.", tp.getLexema(), tp.getLine(), tp.getColumna()));
                                         RESULT = tp.getLexema();
                                        }  :}
    | CARACTER:tp                   {: char as = tp.getLexema().charAt(1); int asciiValue = as;  RESULT = asciiValue; :}
    | PARIN:tp limit_repeat:n PAROUT:e      {:RESULT = tp.getLexema() + n.toString() + e.getLexema();  :}
    | ID:tp                          {:   RESULT = tp.getLexema(); :}
    ;

exp_decimal ::= IGUAL:tp dato_decimal:n  exp_oper_decimal:e        {:RESULT = tp.getLexema() + n.toString() + e.toString(); :}
    | COMA:tp ID:n exp_decimal:e                                   {:RESULT = tp.getLexema() + n.getLexema() + e.toString(); :}
    | PUNTOCOMA:tp                                                 {:RESULT = tp.getLexema(); :}
    ;

exp_oper_decimal ::= SUMA:tp dato_decimal:n exp_oper_decimal:e     {:RESULT = tp.getLexema() + n.toString() + e.toString(); :}
    | RESTA:tp dato_decimal:n exp_oper_decimal:e                   {:RESULT = tp.getLexema() + n.toString() + e.toString(); :}
    | DIVISION:tp dato_decimal:n exp_oper_decimal:e                {:RESULT = tp.getLexema() + n.toString() + e.toString(); :}
    | PRODUCTO:tp dato_decimal:n exp_oper_decimal:e                {:RESULT = tp.getLexema() + n.toString() + e.toString(); :}
    | COMA:tp ID:n exp_decimal:e                                   {:RESULT = tp.getLexema() + n.getLexema() + e.toString(); :}
    | PUNTOCOMA:tp                                                 {:RESULT = tp.getLexema(); :}
    ;

dato_decimal ::= NUMENTERO:tp       {:RESULT = tp.getLexema(); :}
    | NUMDECIMAL:tp                 {:RESULT = tp.getLexema(); :}
    | BOOLEANOS:tp                 {:  if(tp.getLexema().equals("true")) { RESULT = "1";
                                       } else if(tp.getLexema().equals("false")) { RESULT = "0"; } else {
                                         errorSemantico.add(String.format("Error sintactico no se esperaba el lexema: %s  linea: %d  columna: %d. se esperaba un true o false.", tp.getLexema(), tp.getLine(), tp.getColumna()));
                                         RESULT = tp.getLexema();
                                        }  :}
    | CARACTER:tp                   {: char as = tp.getLexema().charAt(1);  int asciiValue = as;  RESULT = asciiValue; :} 
    | PARIN:tp limit_repeat:n PAROUT:e      {:RESULT = tp.getLexema() + n.toString() + e.getLexema();  :}
    | ID:tp                          {:  RESULT = tp.getLexema(); :}
    ;

par_insert ::= ID:tp par_insert1:n       {:   RESULT =  tp.getLexema() + n.toString(); :}
    | APOSTROFO:tp texto_insert:e  par_insert1:n   {:RESULT = "  " +  tp.getLexema()+" " + e.toString() + n.toString(); :}
    | CARACTER:tp par_insert1:n                     {:   RESULT =  tp.getLexema() + n.toString(); :}
    ;

par_insert1 ::= COMA ID:tp par_insert1:n     {:  RESULT = " + " + tp.getLexema() + n.toString(); :}
    | COMA APOSTROFO:tp texto_insert:e  par_insert1:n  {:RESULT = " + " +  tp.getLexema()+" " + e.toString() + n.toString(); :}
    | PAROUT                                {:RESULT = ";"; :}
    ;

texto_insert ::=  mensaje_texto:n            {:RESULT =  n.toString(); :}
    | texto_etiqueta:tp APOSTROFO:n          {:RESULT = tp.toString() + n.getLexema(); :}
    ;


texto_etiqueta ::= MEQ SPAM parm_shisp:tp exp_cadenatext:n  SPAM MAQ  {:  String styl = parInput + "\"  "; parInput = "style=\"";   RESULT = "<spam "+ styl + tp.toString()+" " + n.toString() + "spam>  "; :}    
    | MEQ SELECTED parm_shisp:tp exp_opciones:n  SELECTED MAQ         {:  String styl = parInput + "\"  "; parInput = "style=\"";   RESULT = "<select "+ styl + tp.toString()+" " + n.toString() + "select>  "; :} 
    | MEQ H1 parm_shisp:tp exp_cadenatext:n  H1 MAQ                   {:  String styl = parInput + "\"  "; parInput = "style=\"";   RESULT = "<h1 "+ styl + tp.toString()+" " + n.toString() + "h1>  "; :}
    | MEQ P parm_shisp:tp exp_cadenatext:n  P MAQ                     {:  String styl = parInput + "\"  "; parInput = "style=\"";   RESULT = "<p "+ styl + tp.toString()+" " + n.toString() + "p>  "; :} 
    | MEQ BR MAQ                                                      {: RESULT = " <br> "; :}
    | MEQ INPUT parm_input:tp exp_cadenatext:n  INPUT MAQ             {:  String styl = parInput + "\"  "; parInput = "style=\"";   RESULT = "<input "+ styl + tp.toString()+" " + n.toString() + "input>  "; :}
    | MEQ IMG parm_image:tp MEQ DIVISION IMG MAQ                      {:  String styl = parInput + "\"  "; parInput = "style=\"";   RESULT = "<img "+ styl + tp.toString()+" " + "</img>  "; :}
    | MEQ TEXTAREA par_areatext:tp TEXTAREA MAQ                       {:  String styl = parInput + "\"  "; parInput = "style=\"";   RESULT = "<textarea "+ styl + tp.toString()+" " +  "textarea>  "; :}
    | MEQ DIV par_div:tp contenido_div:n DIV MAQ                      {:  String styl = parInput + "\"  "; parInput = "style=\"";   RESULT = "<div "+ styl + tp.toString()+" " + n.toString() + "  "; :}
    | MEQ BUTTON par_button:tp  exp_cadenatext:n BUTTON MAQ           {:  String styl = parInput + "\"  "; parInput = "style=\"";   RESULT = "<button "+ styl + tp.toString()+" " + n.toString() + "button>  "; :}
    ;

texto ::= ID:tp                {:  RESULT = tp.getLexema(); :}
    | COMILLA:tp text_string:n                   {:RESULT = tp.getLexema()+" " + n.toString(); :}
    ;

mensaje_texto ::= CADENA:tp mensaje_texto:n      {:RESULT = tp.getLexema()+" " + n.toString(); :}
    | ID:tp mensaje_texto:n                      {:RESULT = tp.getLexema()+" " + n.toString(); :}
    | NUMENTERO:tp mensaje_texto:n               {:RESULT = tp.getLexema()+" " + n.toString(); :}
    | NUMDECIMAL:tp mensaje_texto:n              {:RESULT = tp.getLexema()+" " + n.toString(); :}
    | SUMA:tp mensaje_texto:n                    {:RESULT = tp.getLexema()+" " + n.toString(); :}
    | RESTA:tp mensaje_texto:n                   {:RESULT = tp.getLexema()+" " + n.toString(); :}
    | PRODUCTO:tp mensaje_texto:n                {:RESULT = tp.getLexema()+" " + n.toString(); :}
    | DIVISION:tp mensaje_texto:n                {:RESULT = tp.getLexema()+" " + n.toString(); :}
    | DOSP:tp mensaje_texto:n                    {:RESULT = tp.getLexema()+" " + n.toString(); :}
    | COMA:tp mensaje_texto:n                    {:RESULT = tp.getLexema()+" " + n.toString(); :}
    | IGUAL:tp mensaje_texto:n                   {:RESULT = tp.getLexema()+" " + n.toString(); :}
    | PARIN:tp mensaje_texto:n                   {:RESULT = tp.getLexema()+" " + n.toString(); :}
    | PAROUT:tp mensaje_texto:n                  {:RESULT = tp.getLexema()+" " + n.toString(); :}
    | APOSTROFO:tp                               {:RESULT = tp.getLexema(); :}
    ;

text_string ::= CADENA:tp text_string:n      {:RESULT = tp.getLexema()+" " + n.toString(); :}
    | ID:tp text_string:n                      {:RESULT = tp.getLexema()+" " + n.toString(); :}
    | NUMENTERO:tp text_string:n               {:RESULT = tp.getLexema()+"" + n.toString(); :}
    | NUMDECIMAL:tp text_string:n              {:RESULT = tp.getLexema()+" " + n.toString(); :}
    | SUMA:tp text_string:n                    {:RESULT = tp.getLexema()+" " + n.toString(); :}
    | RESTA:tp text_string:n                   {:RESULT = tp.getLexema()+" " + n.toString(); :}
    | PRODUCTO:tp text_string:n                {:RESULT = tp.getLexema()+" " + n.toString(); :}
    | DIVISION:tp text_string:n                {:RESULT = tp.getLexema()+" " + n.toString(); :}
    | DOSP:tp text_string:n                    {:RESULT = tp.getLexema()+" " + n.toString(); :}
    | COMA:tp text_string:n                    {:RESULT = tp.getLexema()+" " + n.toString(); :}
    | IGUAL:tp text_string:n                   {:RESULT = tp.getLexema()+" " + n.toString(); :}
    | PARIN:tp text_string:n                   {:RESULT = tp.getLexema()+" " + n.toString(); :}
    | PAROUT:tp text_string:n                  {:RESULT = tp.getLexema()+" " + n.toString(); :}
    | COMILLA:tp                               {:RESULT = tp.getLexema(); :}
    ;
