// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: Lexico.jflex

package com.adolfo.analizadores;
/*primera seccion: codigo usuario*/
import java_cup.runtime.*;
import static com.adolfo.analizadores.sym.*;
import com.adolfo.analizadores.Token;
import java.util.ArrayList;
import java.util.List;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class Lexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\36\u0200\1\u0300\1\u0400\266\u0200\10\u0500\u1020\u0200";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\4\22\0\1\1\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\10\26\1\27\1\30\1\31\1\32\1\33\1\11\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\46\1\55\1\56\1\57\1\60\1\61\1\62\1\63"+
    "\1\64\1\65\1\66\1\67\1\70\1\0\1\71\1\0"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\46\1\55\1\56\1\57\1\60\1\61\1\62\1\63"+
    "\1\64\1\65\1\72\1\73\1\74\7\0\1\3\33\0"+
    "\1\11\35\0\1\11\1\0\1\11\7\0\1\11\3\0"+
    "\1\11\3\0\1\11\1\0\1\11\6\0\1\11\6\0"+
    "\1\11\7\0\1\11\3\0\1\11\3\0\1\11\1\0"+
    "\1\11\6\0\1\11\65\0\2\75\115\0\1\76\u01a8\0"+
    "\2\3\u0100\0\1\77\325\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1536];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\1\3\1\4\1\5\2\2\1\1\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\2\17\1\20\1\21\1\22\1\23\1\24\1\2\22\25"+
    "\1\26\1\27\1\30\1\31\1\32\2\2\3\0\1\25"+
    "\1\1\3\0\1\17\2\0\2\25\1\0\21\25\1\33"+
    "\1\34\20\25\1\0\1\33\1\34\3\0\2\35\1\0"+
    "\1\36\1\0\1\37\2\0\1\25\1\40\2\41\15\25"+
    "\1\42\2\25\2\0\2\25\1\0\1\25\1\0\1\43"+
    "\1\25\1\0\4\25\1\0\5\25\2\0\11\25\1\44"+
    "\6\25\1\0\1\25\2\0\1\44\2\0\1\37\2\0"+
    "\2\25\1\0\2\25\1\45\1\25\1\0\1\25\2\46"+
    "\1\25\1\47\2\25\1\0\1\25\1\50\4\25\1\0"+
    "\6\25\6\0\1\25\1\0\2\51\2\52\2\53\1\0"+
    "\3\25\1\0\1\54\1\25\1\55\2\25\1\55\1\0"+
    "\2\25\1\0\1\56\6\25\2\57\1\25\1\0\1\25"+
    "\1\60\1\61\1\62\1\25\1\0\1\25\3\0\1\37"+
    "\4\0\2\25\1\0\2\25\2\63\1\64\2\25\2\65"+
    "\1\25\1\0\1\25\1\66\2\25\1\0\6\25\1\0"+
    "\1\66\4\0\1\25\1\0\1\61\3\25\1\0\1\25"+
    "\1\0\2\25\1\0\2\25\1\0\2\25\1\0\5\25"+
    "\1\0\2\25\2\67\2\70\2\0\1\37\2\0\2\25"+
    "\1\0\2\25\1\71\1\25\2\72\1\73\1\25\2\74"+
    "\1\25\1\0\1\25\1\0\1\25\1\75\2\25\3\0"+
    "\1\75\1\25\1\0\2\25\1\0\1\25\2\76\2\77"+
    "\1\100\1\25\1\100\2\25\1\0\2\25\1\0\2\25"+
    "\1\0\1\101\1\25\1\0\2\102\2\25\1\0\1\103"+
    "\1\35\1\104\1\25\1\0\1\25\1\0\1\105\2\25"+
    "\1\106\1\25\1\0\1\25\1\0\2\25\2\107\1\106"+
    "\1\0\2\110\2\25\1\0\1\25\1\111\2\25\1\0"+
    "\1\25\2\112\1\113\1\25\1\0\2\114\2\25\1\0"+
    "\1\111\1\25\1\0\1\25\1\0\1\25\1\115\2\116"+
    "\1\25\1\0\1\117\1\25\1\117\2\25\1\0\3\25"+
    "\1\0\2\25\1\0\1\25\1\0\1\25\1\0\1\25"+
    "\1\0\1\25\1\0\2\25\1\0\2\25\1\0\2\120"+
    "\3\25\1\0\1\25\1\121\1\25\1\0\2\122\2\123"+
    "\2\124\2\25\1\0\1\125\1\25\1\0\2\25\1\126"+
    "\1\0\1\25\2\127\1\25\2\130\2\131\2\25\1\0"+
    "\3\25\1\0\2\132\1\25\1\0\1\25\2\133\2\134"+
    "\4\25\1\0\2\135";

  private static int [] zzUnpackAction() {
    int [] result = new int[523];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\100\0\200\0\300\0\100\0\u0100\0\u0140\0\u0180"+
    "\0\100\0\u01c0\0\100\0\100\0\100\0\100\0\100\0\u0200"+
    "\0\100\0\u0240\0\u0280\0\100\0\100\0\u02c0\0\100\0\100"+
    "\0\u0300\0\u0340\0\u0380\0\u03c0\0\u0400\0\u0440\0\u0480\0\u04c0"+
    "\0\u0500\0\u0540\0\u0580\0\u05c0\0\u0600\0\u0640\0\u0680\0\u06c0"+
    "\0\u0700\0\u0740\0\u0780\0\100\0\100\0\100\0\100\0\100"+
    "\0\u07c0\0\u0800\0\u0840\0\u0880\0\u0140\0\u08c0\0\u0900\0\u0940"+
    "\0\u0980\0\u09c0\0\u0a00\0\u0a40\0\u0a80\0\u0ac0\0\u0b00\0\u0b40"+
    "\0\u0b80\0\u0bc0\0\u0c00\0\u0c40\0\u0c80\0\u0cc0\0\u0d00\0\u0d40"+
    "\0\u0d80\0\u0dc0\0\u0e00\0\u0e40\0\u0e80\0\u0ec0\0\u0f00\0\u0f40"+
    "\0\u0f80\0\u0580\0\u0580\0\u0fc0\0\u1000\0\u1040\0\u1080\0\u10c0"+
    "\0\u1100\0\u1140\0\u1180\0\u11c0\0\u1200\0\u1240\0\u1280\0\u12c0"+
    "\0\u1300\0\u1340\0\u1380\0\u13c0\0\100\0\100\0\u1400\0\u1440"+
    "\0\u1480\0\100\0\u14c0\0\u1500\0\100\0\u1540\0\u1580\0\u15c0"+
    "\0\u1600\0\u1640\0\u0580\0\u0580\0\100\0\u1680\0\u16c0\0\u1700"+
    "\0\u1740\0\u1780\0\u17c0\0\u1800\0\u1840\0\u1880\0\u18c0\0\u1900"+
    "\0\u1940\0\u1980\0\u08c0\0\u19c0\0\u1a00\0\u1a40\0\u1a80\0\u1ac0"+
    "\0\u1b00\0\u1b40\0\u1b80\0\u1bc0\0\u0580\0\u1c00\0\u1c40\0\u1c80"+
    "\0\u1cc0\0\u1d00\0\u1d40\0\u1d80\0\u1dc0\0\u1e00\0\u1e40\0\u1e80"+
    "\0\u1ec0\0\u1f00\0\u1f40\0\u1f80\0\u1fc0\0\u2000\0\u2040\0\u2080"+
    "\0\u20c0\0\u2100\0\u2140\0\u2180\0\u0580\0\u21c0\0\u2200\0\u2240"+
    "\0\u2280\0\u22c0\0\u2300\0\u2340\0\u2380\0\u23c0\0\u2400\0\100"+
    "\0\u2440\0\u2480\0\u24c0\0\u2500\0\u2540\0\u2580\0\u25c0\0\u2600"+
    "\0\u2640\0\u2680\0\u0580\0\u26c0\0\u2700\0\u2740\0\u0580\0\100"+
    "\0\u2780\0\u08c0\0\u27c0\0\u2800\0\u2840\0\u2880\0\u08c0\0\u28c0"+
    "\0\u2900\0\u2940\0\u2980\0\u29c0\0\u2a00\0\u2a40\0\u2a80\0\u2ac0"+
    "\0\u2b00\0\u2b40\0\u2b80\0\u2bc0\0\u2c00\0\u2c40\0\u2c80\0\u2cc0"+
    "\0\u2d00\0\u2d40\0\u0580\0\100\0\u0580\0\100\0\u0580\0\100"+
    "\0\u2d80\0\u2dc0\0\u2e00\0\u2e40\0\u2e80\0\u0580\0\u2ec0\0\u0580"+
    "\0\u2f00\0\u2f40\0\100\0\u2f80\0\u2fc0\0\u3000\0\u3040\0\u0580"+
    "\0\u3080\0\u30c0\0\u3100\0\u3140\0\u3180\0\u31c0\0\u0580\0\100"+
    "\0\u3200\0\u3240\0\u3280\0\u32c0\0\u0580\0\u0580\0\u3300\0\u3340"+
    "\0\u3380\0\u33c0\0\u3400\0\u3440\0\u3480\0\u34c0\0\u3500\0\u3540"+
    "\0\u3580\0\u35c0\0\u3600\0\u3640\0\u3680\0\u36c0\0\u0580\0\100"+
    "\0\u0580\0\u3700\0\u3740\0\u08c0\0\100\0\u3780\0\u37c0\0\u3800"+
    "\0\u08c0\0\u3840\0\u3880\0\u38c0\0\u3900\0\u3940\0\u3980\0\u39c0"+
    "\0\u3a00\0\u3a40\0\u3a80\0\100\0\u3ac0\0\u3b00\0\u3b40\0\u3b80"+
    "\0\u3bc0\0\u3c00\0\100\0\u3c40\0\u3c80\0\u3cc0\0\u3d00\0\u3d40"+
    "\0\u3d80\0\u3dc0\0\u3e00\0\u3e40\0\u3e80\0\u3ec0\0\u3f00\0\u3f40"+
    "\0\u3f80\0\u3fc0\0\u4000\0\u4040\0\u4080\0\u40c0\0\u4100\0\u4140"+
    "\0\u4180\0\u41c0\0\u0580\0\100\0\u0580\0\100\0\u4200\0\u4240"+
    "\0\100\0\u4280\0\u42c0\0\u4300\0\u4340\0\u4380\0\u43c0\0\u4400"+
    "\0\u08c0\0\u4440\0\u08c0\0\100\0\u08c0\0\u4480\0\u08c0\0\100"+
    "\0\u44c0\0\u4500\0\u4540\0\u4580\0\u45c0\0\u08c0\0\u4600\0\u4640"+
    "\0\u4680\0\u46c0\0\u4700\0\100\0\u4740\0\u4780\0\u47c0\0\u4800"+
    "\0\u4840\0\u4880\0\u0580\0\100\0\u0580\0\100\0\u0580\0\u48c0"+
    "\0\100\0\u4900\0\u4940\0\u4980\0\u49c0\0\u4a00\0\u4a40\0\u4a80"+
    "\0\u4ac0\0\u4b00\0\u0580\0\u4b40\0\u4b80\0\u0580\0\100\0\u4bc0"+
    "\0\u4c00\0\u4c40\0\100\0\u2500\0\100\0\u4c80\0\u4cc0\0\u4d00"+
    "\0\u4d40\0\u0580\0\u4d80\0\u4dc0\0\u08c0\0\u4e00\0\u4e40\0\u4e80"+
    "\0\u4ec0\0\u4f00\0\u4f40\0\u08c0\0\100\0\100\0\u4f80\0\u0580"+
    "\0\100\0\u4fc0\0\u5000\0\u5040\0\u5080\0\u0580\0\u50c0\0\u5100"+
    "\0\u5140\0\u5180\0\u0580\0\100\0\u08c0\0\u51c0\0\u5200\0\u0580"+
    "\0\100\0\u5240\0\u5280\0\u52c0\0\100\0\u5300\0\u5340\0\u5380"+
    "\0\u53c0\0\u5400\0\u08c0\0\u08c0\0\100\0\u5440\0\u5480\0\u08c0"+
    "\0\u54c0\0\100\0\u5500\0\u5540\0\u5580\0\u55c0\0\u5600\0\u5640"+
    "\0\u5680\0\u56c0\0\u5700\0\u5740\0\u5780\0\u57c0\0\u5800\0\u5840"+
    "\0\u5880\0\u58c0\0\u5900\0\u5940\0\u5980\0\u59c0\0\u5a00\0\u5a40"+
    "\0\u5a80\0\u5ac0\0\u08c0\0\100\0\u5b00\0\u5b40\0\u5b80\0\u5bc0"+
    "\0\u5c00\0\u5c40\0\u5c80\0\u5cc0\0\u0580\0\100\0\u08c0\0\100"+
    "\0\u0580\0\100\0\u5d00\0\u5d40\0\u5d80\0\u08c0\0\u5dc0\0\u5e00"+
    "\0\u5e40\0\u5e80\0\u08c0\0\u5ec0\0\u5f00\0\u08c0\0\100\0\u5f40"+
    "\0\u08c0\0\100\0\u08c0\0\100\0\u5f80\0\u5fc0\0\u6000\0\u6040"+
    "\0\u6080\0\u60c0\0\u6100\0\u08c0\0\100\0\u6140\0\u6180\0\u61c0"+
    "\0\u0580\0\100\0\u08c0\0\100\0\u6200\0\u6240\0\u6280\0\u62c0"+
    "\0\u6300\0\u08c0\0\100";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[523];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\10\1\21\1\22\2\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\2\43\1\44\1\43\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\2\43\1\53\3\43"+
    "\1\54\1\2\1\55\1\7\1\56\1\57\1\60\1\61"+
    "\1\62\1\2\101\0\2\3\1\0\1\3\100\0\1\63"+
    "\116\0\3\64\6\0\6\64\45\0\1\65\10\0\1\65"+
    "\13\0\31\66\3\0\1\65\17\0\1\10\10\0\1\10"+
    "\1\0\3\67\6\0\31\10\12\0\2\70\1\0\3\70"+
    "\1\0\60\70\1\71\10\70\10\0\1\65\10\0\1\65"+
    "\2\0\1\22\2\23\6\0\31\66\3\0\1\65\30\0"+
    "\1\72\1\0\1\73\2\23\73\0\1\72\1\0\3\23"+
    "\56\0\1\74\135\0\1\75\44\0\1\66\1\10\7\0"+
    "\1\66\1\10\1\0\3\66\6\0\13\43\1\76\5\43"+
    "\1\77\7\43\3\0\1\66\4\0\1\100\11\0\1\66"+
    "\1\10\7\0\1\66\1\10\1\0\3\66\6\0\1\101"+
    "\15\43\1\102\12\43\3\0\1\66\16\0\1\66\1\10"+
    "\7\0\1\66\1\10\1\0\3\66\6\0\1\103\6\43"+
    "\1\104\3\43\1\105\2\43\1\106\12\43\3\0\1\107"+
    "\16\0\1\66\1\10\7\0\1\66\1\10\1\0\3\66"+
    "\6\0\4\43\1\110\24\43\3\0\1\66\16\0\1\66"+
    "\1\10\7\0\1\66\1\10\1\0\3\66\6\0\13\43"+
    "\1\111\1\43\1\112\10\43\1\113\2\43\3\0\1\66"+
    "\16\0\1\66\1\10\7\0\1\66\1\10\1\0\3\66"+
    "\6\0\1\114\15\43\1\115\12\43\3\0\1\66\16\0"+
    "\1\66\1\10\7\0\1\66\1\10\1\0\3\66\6\0"+
    "\4\43\1\116\24\43\3\0\1\66\16\0\1\66\1\10"+
    "\7\0\1\66\1\10\1\0\3\66\6\0\4\43\1\117"+
    "\13\43\1\120\2\43\1\121\5\43\3\0\1\66\16\0"+
    "\1\66\1\10\7\0\1\66\1\10\1\0\3\66\6\0"+
    "\3\43\1\122\1\43\1\123\7\43\1\124\13\43\3\0"+
    "\1\66\16\0\1\66\1\10\7\0\1\66\1\10\1\0"+
    "\3\66\6\0\31\43\3\0\1\66\16\0\1\66\1\10"+
    "\7\0\1\66\1\10\1\0\3\66\6\0\4\43\1\125"+
    "\24\43\3\0\1\66\16\0\1\66\1\10\7\0\1\66"+
    "\1\10\1\0\3\66\6\0\1\126\22\43\1\127\5\43"+
    "\3\0\1\66\16\0\1\66\1\10\7\0\1\66\1\10"+
    "\1\0\3\66\6\0\15\43\1\130\13\43\3\0\1\66"+
    "\16\0\1\66\1\10\7\0\1\66\1\10\1\0\3\66"+
    "\6\0\20\43\1\131\10\43\3\0\1\66\16\0\1\66"+
    "\1\10\7\0\1\66\1\10\1\0\3\66\6\0\4\43"+
    "\1\132\11\43\1\133\12\43\3\0\1\66\16\0\1\66"+
    "\1\10\7\0\1\66\1\10\1\0\3\66\6\0\20\43"+
    "\1\134\1\43\1\135\6\43\3\0\1\66\16\0\1\66"+
    "\1\10\7\0\1\66\1\10\1\0\3\66\6\0\4\43"+
    "\1\136\2\43\1\137\10\43\1\140\6\43\1\141\1\43"+
    "\3\0\1\66\16\0\1\66\1\10\7\0\1\66\1\10"+
    "\1\0\3\66\6\0\7\43\1\142\1\143\20\43\3\0"+
    "\1\66\3\0\1\144\42\0\1\145\1\0\1\146\7\0"+
    "\1\147\102\0\1\150\1\0\1\151\20\0\2\63\1\152"+
    "\1\0\1\153\73\63\24\0\3\154\6\0\6\154\45\0"+
    "\1\66\10\0\1\66\2\0\3\66\6\0\31\66\3\0"+
    "\1\66\32\0\3\67\64\0\1\155\72\0\1\156\4\0"+
    "\1\155\110\0\3\157\75\0\3\73\72\0\1\160\126\0"+
    "\1\161\37\0\1\66\1\10\7\0\1\66\1\10\1\0"+
    "\3\66\6\0\4\43\1\162\15\43\1\163\6\43\3\0"+
    "\1\66\16\0\1\66\1\10\7\0\1\66\1\10\1\0"+
    "\3\66\6\0\2\43\1\164\26\43\3\0\1\66\45\0"+
    "\1\165\50\0\1\66\1\10\7\0\1\66\1\10\1\0"+
    "\3\66\6\0\2\43\1\166\26\43\3\0\1\66\16\0"+
    "\1\66\1\10\7\0\1\66\1\10\1\0\3\66\6\0"+
    "\16\43\1\167\12\43\3\0\1\66\16\0\1\66\1\10"+
    "\7\0\1\66\1\10\1\0\3\66\6\0\20\43\1\170"+
    "\10\43\3\0\1\66\16\0\1\66\1\10\7\0\1\66"+
    "\1\10\1\0\3\66\6\0\1\171\30\43\3\0\1\66"+
    "\16\0\1\66\1\10\7\0\1\66\1\10\1\0\3\66"+
    "\6\0\1\172\30\43\3\0\1\66\16\0\1\66\1\10"+
    "\7\0\1\66\1\10\1\0\3\66\6\0\13\43\1\173"+
    "\15\43\3\0\1\66\16\0\1\66\10\0\1\66\2\0"+
    "\3\66\6\0\1\66\1\174\1\66\1\175\2\66\1\176"+
    "\1\177\1\200\2\66\1\201\2\66\1\202\1\203\1\66"+
    "\1\204\1\205\6\66\3\0\1\66\3\0\1\206\1\207"+
    "\11\0\1\66\1\10\7\0\1\66\1\10\1\0\3\66"+
    "\6\0\2\43\1\210\16\43\1\211\7\43\3\0\1\66"+
    "\4\0\1\212\11\0\1\66\1\10\7\0\1\66\1\10"+
    "\1\0\3\66\6\0\21\43\1\213\7\43\3\0\1\66"+
    "\4\0\1\214\11\0\1\66\1\10\7\0\1\66\1\10"+
    "\1\0\3\66\6\0\3\43\1\215\25\43\3\0\1\66"+
    "\16\0\1\66\1\10\7\0\1\66\1\10\1\0\3\66"+
    "\6\0\10\43\1\216\20\43\3\0\1\66\3\0\1\217"+
    "\12\0\1\66\1\10\7\0\1\66\1\10\1\0\3\66"+
    "\6\0\13\43\1\220\15\43\3\0\1\66\16\0\1\66"+
    "\1\10\7\0\1\66\1\10\1\0\3\66\6\0\15\43"+
    "\1\221\13\43\3\0\1\66\16\0\1\66\1\10\7\0"+
    "\1\66\1\10\1\0\3\66\6\0\22\43\1\222\6\43"+
    "\3\0\1\66\16\0\1\66\1\10\7\0\1\66\1\10"+
    "\1\0\3\66\6\0\10\43\1\223\20\43\3\0\1\66"+
    "\3\0\1\224\12\0\1\66\1\10\7\0\1\66\1\10"+
    "\1\0\3\66\6\0\4\43\1\225\24\43\3\0\1\66"+
    "\16\0\1\66\1\10\7\0\1\66\1\10\1\0\3\66"+
    "\6\0\15\43\1\226\13\43\3\0\1\66\16\0\1\66"+
    "\1\10\7\0\1\66\1\10\1\0\3\66\6\0\10\43"+
    "\1\227\10\43\1\230\1\231\6\43\3\0\1\66\3\0"+
    "\1\232\1\233\11\0\1\66\1\10\7\0\1\66\1\10"+
    "\1\0\3\66\6\0\22\43\1\234\6\43\3\0\1\66"+
    "\16\0\1\66\1\10\7\0\1\66\1\10\1\0\3\66"+
    "\6\0\14\43\1\235\14\43\3\0\1\66\16\0\1\66"+
    "\1\10\7\0\1\66\1\10\1\0\3\66\6\0\14\43"+
    "\1\236\14\43\3\0\1\66\16\0\1\66\1\10\7\0"+
    "\1\66\1\10\1\0\3\66\6\0\2\43\1\237\26\43"+
    "\3\0\1\240\16\0\1\66\1\10\7\0\1\66\1\10"+
    "\1\0\3\66\6\0\16\43\1\241\12\43\3\0\1\66"+
    "\16\0\1\66\1\10\7\0\1\66\1\10\1\0\3\66"+
    "\6\0\17\43\1\242\4\43\1\243\4\43\3\0\1\66"+
    "\16\0\1\66\1\10\7\0\1\66\1\10\1\0\3\66"+
    "\6\0\25\43\1\244\3\43\3\0\1\66\16\0\1\66"+
    "\1\10\7\0\1\66\1\10\1\0\3\66\6\0\2\43"+
    "\1\245\26\43\3\0\1\66\16\0\1\66\1\10\7\0"+
    "\1\66\1\10\1\0\3\66\6\0\20\43\1\246\10\43"+
    "\3\0\1\66\16\0\1\66\1\10\7\0\1\66\1\10"+
    "\1\0\3\66\6\0\26\43\1\247\2\43\3\0\1\66"+
    "\16\0\1\66\1\10\7\0\1\66\1\10\1\0\3\66"+
    "\6\0\4\43\1\250\24\43\3\0\1\66\16\0\1\66"+
    "\1\10\7\0\1\66\1\10\1\0\3\66\6\0\23\43"+
    "\1\251\5\43\3\0\1\66\16\0\1\66\1\10\7\0"+
    "\1\66\1\10\1\0\3\66\6\0\17\43\1\252\11\43"+
    "\3\0\1\66\16\0\1\66\1\10\7\0\1\66\1\10"+
    "\1\0\3\66\6\0\10\43\1\253\20\43\3\0\1\66"+
    "\3\0\1\254\12\0\1\66\1\10\7\0\1\66\1\10"+
    "\1\0\3\66\6\0\3\43\1\255\25\43\3\0\1\66"+
    "\46\0\1\256\104\0\1\232\10\0\1\233\1\257\15\0"+
    "\1\232\1\233\40\0\1\260\115\0\1\261\24\0\1\152"+
    "\121\0\3\262\6\0\6\262\57\0\1\70\101\0\3\263"+
    "\72\0\1\264\131\0\1\265\34\0\1\66\1\10\7\0"+
    "\1\66\1\10\1\0\3\66\6\0\20\43\1\266\10\43"+
    "\3\0\1\66\16\0\1\66\1\10\7\0\1\66\1\10"+
    "\1\0\3\66\6\0\12\43\1\267\16\43\3\0\1\66"+
    "\5\0\1\270\10\0\1\66\1\10\7\0\1\66\1\10"+
    "\1\0\3\66\6\0\13\43\1\271\15\43\3\0\1\66"+
    "\16\0\1\66\1\10\7\0\1\66\1\10\1\0\3\66"+
    "\6\0\1\272\30\43\3\0\1\66\16\0\1\66\1\10"+
    "\7\0\1\66\1\10\1\0\3\66\6\0\20\43\1\273"+
    "\10\43\3\0\1\66\16\0\1\66\1\10\7\0\1\66"+
    "\1\10\1\0\3\66\6\0\21\43\1\274\7\43\3\0"+
    "\1\66\4\0\1\275\11\0\1\66\1\10\7\0\1\66"+
    "\1\10\1\0\3\66\6\0\16\43\1\276\2\43\1\277"+
    "\7\43\3\0\1\66\4\0\1\300\11\0\1\66\10\0"+
    "\1\66\2\0\3\66\6\0\16\66\1\301\1\66\1\302"+
    "\2\66\1\303\5\66\3\0\1\66\16\0\1\66\10\0"+
    "\1\66\2\0\3\66\6\0\10\66\1\304\20\66\3\0"+
    "\1\66\3\0\1\305\12\0\1\66\10\0\1\66\2\0"+
    "\3\66\6\0\2\66\1\306\26\66\3\0\1\66\16\0"+
    "\1\66\10\0\1\66\2\0\1\66\1\307\1\66\6\0"+
    "\4\66\1\310\24\66\3\0\1\66\16\0\1\66\10\0"+
    "\1\66\2\0\3\66\6\0\14\66\1\311\1\312\13\66"+
    "\3\0\1\66\16\0\1\66\10\0\1\66\2\0\3\66"+
    "\6\0\10\66\1\313\20\66\3\0\1\66\3\0\1\314"+
    "\12\0\1\66\10\0\1\66\2\0\3\66\6\0\17\66"+
    "\1\315\11\66\3\0\1\66\16\0\1\66\10\0\1\66"+
    "\2\0\3\66\6\0\2\66\1\316\1\66\1\317\12\66"+
    "\1\320\11\66\3\0\1\66\16\0\1\66\10\0\1\66"+
    "\2\0\3\66\6\0\4\66\1\321\3\66\1\322\20\66"+
    "\3\0\1\66\3\0\1\323\53\0\1\324\1\325\64\0"+
    "\1\326\1\0\1\327\12\0\1\330\33\0\1\66\1\10"+
    "\7\0\1\66\1\10\1\0\3\66\6\0\10\43\1\331"+
    "\20\43\3\0\1\66\3\0\1\332\12\0\1\66\1\10"+
    "\7\0\1\66\1\10\1\0\3\66\6\0\2\43\1\333"+
    "\26\43\3\0\1\66\45\0\1\334\50\0\1\66\1\10"+
    "\7\0\1\66\1\10\1\0\3\66\6\0\4\43\1\335"+
    "\24\43\3\0\1\66\47\0\1\336\46\0\1\66\1\10"+
    "\7\0\1\66\1\10\1\0\3\66\6\0\22\43\1\337"+
    "\6\43\3\0\1\66\65\0\1\340\30\0\1\66\1\10"+
    "\7\0\1\66\1\10\1\0\3\66\6\0\21\43\1\251"+
    "\7\43\3\0\1\66\4\0\1\341\11\0\1\66\1\10"+
    "\7\0\1\66\1\10\1\0\3\66\6\0\22\43\1\342"+
    "\6\43\3\0\1\66\16\0\1\66\1\10\7\0\1\66"+
    "\1\10\1\0\3\66\6\0\4\43\1\343\24\43\3\0"+
    "\1\66\16\0\1\66\1\10\7\0\1\66\1\10\1\0"+
    "\3\66\6\0\6\43\1\344\22\43\3\0\1\66\51\0"+
    "\1\345\44\0\1\66\1\10\7\0\1\66\1\10\1\0"+
    "\3\66\6\0\5\43\1\346\23\43\3\0\1\66\16\0"+
    "\1\66\1\10\7\0\1\66\1\10\1\0\3\66\6\0"+
    "\22\43\1\347\6\43\3\0\1\66\16\0\1\66\1\10"+
    "\7\0\1\66\1\10\1\0\3\66\6\0\22\43\1\350"+
    "\6\43\3\0\1\66\16\0\1\66\1\10\7\0\1\66"+
    "\1\10\1\0\3\66\6\0\4\43\1\351\24\43\3\0"+
    "\1\66\16\0\1\66\1\10\7\0\1\66\1\10\1\0"+
    "\3\66\6\0\4\43\1\352\24\43\3\0\1\66\65\0"+
    "\1\353\61\0\1\354\46\0\1\66\1\10\7\0\1\66"+
    "\1\10\1\0\3\66\6\0\10\43\1\355\6\43\1\356"+
    "\11\43\3\0\1\66\3\0\1\357\12\0\1\66\1\10"+
    "\7\0\1\66\1\10\1\0\3\66\6\0\4\43\1\360"+
    "\24\43\3\0\1\66\16\0\1\66\1\10\7\0\1\66"+
    "\1\10\1\0\3\66\6\0\31\43\3\0\1\361\16\0"+
    "\1\66\1\10\7\0\1\66\1\10\1\0\3\66\6\0"+
    "\13\43\1\362\15\43\3\0\1\66\16\0\1\66\10\0"+
    "\1\66\2\0\3\66\6\0\13\66\1\363\15\66\3\0"+
    "\1\66\16\0\1\66\1\10\7\0\1\66\1\10\1\0"+
    "\3\66\6\0\2\43\1\364\26\43\3\0\1\66\16\0"+
    "\1\66\1\10\7\0\1\66\1\10\1\0\3\66\6\0"+
    "\4\43\1\365\24\43\3\0\1\66\16\0\1\66\1\10"+
    "\7\0\1\66\1\10\1\0\3\66\6\0\4\43\1\366"+
    "\24\43\3\0\1\66\16\0\1\66\1\10\7\0\1\66"+
    "\1\10\1\0\3\66\6\0\21\43\1\367\7\43\3\0"+
    "\1\66\4\0\1\370\11\0\1\66\1\10\7\0\1\66"+
    "\1\10\1\0\3\66\6\0\10\43\1\371\20\43\3\0"+
    "\1\66\3\0\1\372\12\0\1\66\1\10\7\0\1\66"+
    "\1\10\1\0\3\66\6\0\22\43\1\373\6\43\3\0"+
    "\1\66\16\0\1\66\1\10\7\0\1\66\1\10\1\0"+
    "\3\66\6\0\15\43\1\374\13\43\3\0\1\66\16\0"+
    "\1\66\1\10\7\0\1\66\1\10\1\0\3\66\6\0"+
    "\4\43\1\375\24\43\3\0\1\66\16\0\1\66\1\10"+
    "\7\0\1\66\1\10\1\0\3\66\6\0\4\43\1\376"+
    "\24\43\3\0\1\66\16\0\1\66\1\10\7\0\1\66"+
    "\1\10\1\0\3\66\6\0\13\43\1\377\15\43\3\0"+
    "\1\66\56\0\1\u0100\37\0\1\66\1\10\7\0\1\66"+
    "\1\10\1\0\3\66\6\0\22\43\1\u0101\6\43\3\0"+
    "\1\66\65\0\1\u0102\61\0\1\u0103\103\0\1\372\27\0"+
    "\1\372\26\0\3\u0104\6\0\6\u0104\61\0\3\u0105\51\0"+
    "\16\264\1\u0106\2\264\1\u0107\1\264\1\u0108\54\264\36\0"+
    "\1\u0109\51\0\1\66\1\10\7\0\1\66\1\10\1\0"+
    "\3\66\6\0\22\43\1\u010a\6\43\3\0\1\66\16\0"+
    "\1\66\1\10\7\0\1\66\1\10\1\0\3\66\6\0"+
    "\6\43\1\u010b\22\43\3\0\1\66\51\0\1\u010c\44\0"+
    "\1\66\1\10\7\0\1\66\1\10\1\0\3\66\6\0"+
    "\4\43\1\u010d\24\43\3\0\1\66\16\0\1\66\1\10"+
    "\7\0\1\66\1\10\1\0\3\66\6\0\2\43\1\u010e"+
    "\26\43\3\0\1\66\16\0\1\66\1\10\7\0\1\66"+
    "\1\10\1\0\3\66\6\0\21\43\1\u010f\7\43\3\0"+
    "\1\66\4\0\1\u0110\57\0\1\u0110\17\0\1\u0110\11\0"+
    "\1\66\1\10\7\0\1\66\1\10\1\0\3\66\6\0"+
    "\20\43\1\u0111\10\43\3\0\1\66\16\0\1\66\10\0"+
    "\1\66\2\0\3\66\6\0\3\66\1\u0112\25\66\3\0"+
    "\1\66\16\0\1\66\10\0\1\66\2\0\3\66\6\0"+
    "\22\66\1\u0113\6\66\3\0\1\66\16\0\1\66\10\0"+
    "\1\66\2\0\3\66\6\0\24\66\1\u0114\4\66\3\0"+
    "\1\66\67\0\1\u0115\26\0\1\66\10\0\1\66\2\0"+
    "\3\66\6\0\10\66\1\u0116\20\66\3\0\1\66\3\0"+
    "\1\u0117\12\0\1\66\10\0\1\66\2\0\3\66\6\0"+
    "\1\u0118\30\66\3\0\1\66\16\0\1\66\10\0\1\66"+
    "\2\0\3\66\6\0\6\66\1\u0119\22\66\3\0\1\66"+
    "\16\0\1\66\10\0\1\66\2\0\3\66\6\0\17\66"+
    "\1\u011a\11\66\3\0\1\66\16\0\1\66\10\0\1\66"+
    "\2\0\3\66\6\0\15\66\1\u011b\13\66\3\0\1\66"+
    "\60\0\1\u011c\35\0\1\66\10\0\1\66\2\0\3\66"+
    "\6\0\22\66\1\u011d\6\66\3\0\1\66\16\0\1\66"+
    "\10\0\1\66\2\0\3\66\6\0\20\66\1\u011e\10\66"+
    "\3\0\1\66\16\0\1\66\10\0\1\66\2\0\3\66"+
    "\6\0\13\66\1\u011f\15\66\3\0\1\66\16\0\1\66"+
    "\10\0\1\66\2\0\3\66\6\0\1\u0120\30\66\3\0"+
    "\1\66\16\0\1\66\10\0\1\66\2\0\3\66\6\0"+
    "\26\66\1\u0121\2\66\3\0\1\66\16\0\1\66\10\0"+
    "\1\66\2\0\3\66\6\0\22\66\1\u0122\6\66\3\0"+
    "\1\66\65\0\1\u0123\63\0\1\u0124\110\0\1\u0125\100\0"+
    "\1\u0126\72\0\1\u0127\64\0\1\u0128\52\0\1\66\1\10"+
    "\7\0\1\66\1\10\1\0\3\66\6\0\14\43\1\u0129"+
    "\14\43\3\0\1\66\57\0\1\u012a\67\0\1\u012b\46\0"+
    "\1\66\1\10\7\0\1\u012c\1\10\1\0\3\66\6\0"+
    "\31\43\3\0\1\66\16\0\1\66\1\10\7\0\1\66"+
    "\1\10\1\0\3\66\6\0\13\43\1\u012d\15\43\3\0"+
    "\1\66\16\0\1\66\1\10\7\0\1\66\1\10\1\0"+
    "\3\66\6\0\7\43\1\u012e\21\43\3\0\1\66\52\0"+
    "\1\u012f\43\0\1\66\1\10\7\0\1\66\1\10\1\0"+
    "\3\66\6\0\10\43\1\u0130\20\43\3\0\1\66\3\0"+
    "\1\u0131\12\0\1\66\1\10\7\0\1\66\1\10\1\0"+
    "\3\66\6\0\20\43\1\u0132\10\43\3\0\1\66\16\0"+
    "\1\66\1\10\7\0\1\66\1\10\1\0\3\66\6\0"+
    "\6\43\1\u0133\22\43\3\0\1\66\63\0\1\u0134\32\0"+
    "\1\66\1\10\7\0\1\66\1\10\1\0\3\66\6\0"+
    "\14\43\1\u0135\14\43\3\0\1\66\16\0\1\66\1\10"+
    "\7\0\1\66\1\10\1\0\3\66\6\0\1\u0136\30\43"+
    "\3\0\1\66\57\0\1\u0137\36\0\1\66\10\0\1\66"+
    "\2\0\3\66\6\0\1\u0138\30\66\3\0\1\66\16\0"+
    "\1\66\1\10\7\0\1\66\1\10\1\0\3\66\6\0"+
    "\10\43\1\u0139\20\43\3\0\1\66\3\0\1\u013a\12\0"+
    "\1\66\10\0\1\66\2\0\3\66\6\0\16\66\1\u013b"+
    "\12\66\3\0\1\66\16\0\1\66\1\10\7\0\1\66"+
    "\1\10\1\0\3\66\6\0\4\43\1\u013c\24\43\3\0"+
    "\1\66\16\0\1\66\1\10\7\0\1\66\1\10\1\0"+
    "\3\66\6\0\1\u013d\30\43\3\0\1\66\16\0\1\66"+
    "\1\10\7\0\1\66\1\10\1\0\3\66\6\0\20\43"+
    "\1\u013e\10\43\3\0\1\66\16\0\1\66\1\10\7\0"+
    "\1\66\1\10\1\0\3\66\6\0\15\43\1\u013f\13\43"+
    "\3\0\1\66\60\0\1\u0140\35\0\1\66\1\10\7\0"+
    "\1\u0141\1\10\1\0\3\66\6\0\31\43\3\0\1\66"+
    "\16\0\1\66\1\10\7\0\1\66\1\10\1\0\3\66"+
    "\6\0\25\43\1\u0142\3\43\3\0\1\66\16\0\1\66"+
    "\1\10\7\0\1\66\1\10\1\0\3\66\6\0\4\43"+
    "\1\u0143\24\43\3\0\1\66\47\0\1\u0144\46\0\1\66"+
    "\1\10\7\0\1\66\1\10\1\0\3\66\6\0\7\43"+
    "\1\u0145\21\43\3\0\1\66\52\0\1\u0146\76\0\1\u0147"+
    "\60\0\3\u0148\6\0\6\u0148\61\0\3\u0149\51\0\21\264"+
    "\1\u0107\1\264\1\0\72\264\1\u0106\2\264\1\u014a\1\264"+
    "\1\u0108\54\264\33\0\1\264\101\0\1\u014b\52\0\1\66"+
    "\1\10\7\0\1\66\1\10\1\0\3\66\6\0\31\43"+
    "\3\0\1\u014c\16\0\1\66\1\10\7\0\1\66\1\10"+
    "\1\0\3\66\6\0\20\43\1\u014d\10\43\3\0\1\66"+
    "\63\0\1\u014e\32\0\1\66\1\10\7\0\1\66\1\10"+
    "\1\0\3\66\6\0\1\u014f\30\43\3\0\1\66\16\0"+
    "\1\66\1\10\7\0\1\66\1\10\1\0\3\66\6\0"+
    "\22\43\1\u0150\6\43\3\0\1\66\16\0\1\66\10\0"+
    "\1\66\2\0\3\66\6\0\27\66\1\u0151\1\66\3\0"+
    "\1\66\16\0\1\66\10\0\1\66\2\0\3\66\6\0"+
    "\22\66\1\u0152\6\66\3\0\1\66\16\0\1\66\10\0"+
    "\1\66\2\0\3\66\6\0\2\66\1\u0153\26\66\3\0"+
    "\1\66\45\0\1\u0154\50\0\1\66\10\0\1\66\2\0"+
    "\3\66\6\0\3\66\1\u0155\25\66\3\0\1\66\16\0"+
    "\1\66\10\0\1\66\2\0\3\66\6\0\23\66\1\u0156"+
    "\5\66\3\0\1\66\16\0\1\66\10\0\1\66\2\0"+
    "\3\66\6\0\12\66\1\u0157\16\66\3\0\1\66\5\0"+
    "\1\u0158\47\0\1\u0158\27\0\1\u0158\10\0\1\66\10\0"+
    "\1\66\2\0\3\66\6\0\10\66\1\u0159\20\66\3\0"+
    "\1\66\3\0\1\u015a\12\0\1\66\10\0\1\66\2\0"+
    "\3\66\6\0\10\66\1\u015b\20\66\3\0\1\66\3\0"+
    "\1\u015c\12\0\1\66\10\0\1\66\2\0\3\66\6\0"+
    "\4\66\1\u015d\24\66\3\0\1\66\16\0\1\66\10\0"+
    "\1\66\2\0\3\66\6\0\14\66\1\u015e\14\66\3\0"+
    "\1\66\16\0\1\66\10\0\1\66\2\0\3\66\6\0"+
    "\22\66\1\u015f\6\66\3\0\1\66\16\0\1\66\10\0"+
    "\1\66\2\0\3\66\6\0\13\66\1\u0160\15\66\3\0"+
    "\1\66\56\0\1\u0161\107\0\1\u0162\64\0\1\u015c\27\0"+
    "\1\u015c\43\0\1\u0163\107\0\1\u0164\36\0\1\66\1\10"+
    "\7\0\1\66\1\10\1\0\3\66\6\0\1\u0165\30\43"+
    "\3\0\1\66\43\0\1\u0166\52\0\1\66\10\0\1\66"+
    "\2\0\3\66\6\0\5\66\1\u0167\13\66\1\u0168\7\66"+
    "\3\0\1\66\4\0\1\u0169\11\0\1\66\1\10\7\0"+
    "\1\66\1\10\1\0\3\66\6\0\4\43\1\u016a\24\43"+
    "\3\0\1\66\16\0\1\66\1\10\7\0\1\66\1\10"+
    "\1\0\3\66\6\0\22\43\1\u016b\6\43\3\0\1\66"+
    "\65\0\1\u016c\30\0\1\66\1\10\7\0\1\66\1\10"+
    "\1\0\3\66\6\0\13\43\1\u016d\15\43\3\0\1\66"+
    "\56\0\1\u016e\37\0\1\66\1\10\7\0\1\66\1\10"+
    "\1\0\3\66\6\0\22\43\1\u016f\6\43\3\0\1\66"+
    "\16\0\1\66\1\10\7\0\1\66\1\10\1\0\3\66"+
    "\6\0\4\43\1\u0170\24\43\3\0\1\66\65\0\1\u0171"+
    "\30\0\1\66\1\10\7\0\1\66\1\10\1\0\3\66"+
    "\6\0\17\43\1\u0172\11\43\3\0\1\66\16\0\1\66"+
    "\1\10\7\0\1\66\1\10\1\0\3\66\6\0\20\43"+
    "\1\u0173\10\43\3\0\1\66\62\0\1\u0174\33\0\1\66"+
    "\10\0\1\66\2\0\3\66\6\0\13\66\1\u0175\15\66"+
    "\3\0\1\66\16\0\1\66\1\10\7\0\1\66\1\10"+
    "\1\0\3\66\6\0\2\43\1\u0176\26\43\3\0\1\66"+
    "\45\0\1\u0177\50\0\1\66\10\0\1\66\2\0\3\66"+
    "\6\0\1\u0178\30\66\3\0\1\66\16\0\1\66\1\10"+
    "\7\0\1\66\1\10\1\0\3\66\6\0\21\43\1\u0179"+
    "\7\43\3\0\1\66\4\0\1\u017a\11\0\1\66\1\10"+
    "\7\0\1\66\1\10\1\0\3\66\6\0\22\43\1\u017b"+
    "\6\43\3\0\1\66\16\0\1\66\1\10\7\0\1\66"+
    "\1\10\1\0\3\66\6\0\21\43\1\u017c\7\43\3\0"+
    "\1\66\4\0\1\u017d\11\0\1\66\1\10\7\0\1\66"+
    "\1\10\1\0\3\66\6\0\6\43\1\u017e\22\43\3\0"+
    "\1\66\51\0\1\u017f\44\0\1\66\10\0\1\66\2\0"+
    "\3\66\6\0\1\u0180\30\66\3\0\1\66\16\0\1\66"+
    "\1\10\7\0\1\66\1\10\1\0\3\66\6\0\7\43"+
    "\1\u0181\21\43\3\0\1\66\47\0\1\u0182\62\0\3\u0183"+
    "\6\0\6\u0183\35\0\16\264\1\u0106\2\264\1\u014a\1\264"+
    "\1\u0108\7\264\1\u0184\44\264\50\0\1\u0185\37\0\1\66"+
    "\10\0\1\66\2\0\3\66\6\0\10\66\1\u0186\20\66"+
    "\3\0\1\66\3\0\1\u0187\12\0\1\66\1\10\7\0"+
    "\1\66\1\10\1\0\3\66\6\0\16\43\1\u0188\12\43"+
    "\3\0\1\66\61\0\1\u0189\34\0\1\66\1\10\7\0"+
    "\1\66\1\10\1\0\3\66\6\0\15\43\1\u018a\13\43"+
    "\3\0\1\66\16\0\1\66\1\10\7\0\1\66\1\10"+
    "\1\0\3\66\6\0\4\43\1\u018b\24\43\3\0\1\66"+
    "\16\0\1\66\10\0\1\66\2\0\3\66\6\0\16\66"+
    "\1\u018c\12\66\3\0\1\66\16\0\1\66\10\0\1\66"+
    "\2\0\3\66\6\0\22\66\1\u018d\6\66\3\0\1\66"+
    "\16\0\1\66\10\0\1\66\2\0\3\66\6\0\16\66"+
    "\1\u018e\12\66\3\0\1\66\61\0\1\u018f\34\0\1\66"+
    "\10\0\1\66\2\0\3\66\6\0\17\66\1\u0190\11\66"+
    "\3\0\1\66\62\0\1\u0191\33\0\1\66\10\0\1\66"+
    "\2\0\3\66\6\0\2\66\1\u0192\26\66\3\0\1\66"+
    "\16\0\1\66\10\0\1\66\2\0\3\66\6\0\1\u0193"+
    "\30\66\3\0\1\66\16\0\1\66\10\0\1\66\2\0"+
    "\3\66\6\0\4\66\1\u0194\24\66\3\0\1\66\47\0"+
    "\1\u0195\115\0\1\u0196\57\0\1\u0197\50\0\1\66\1\10"+
    "\7\0\1\66\1\10\1\0\3\66\6\0\13\43\1\u0198"+
    "\15\43\3\0\1\66\56\0\1\u0199\37\0\1\66\10\0"+
    "\1\66\2\0\3\66\6\0\1\u019a\30\66\3\0\1\66"+
    "\16\0\1\66\10\0\1\66\2\0\3\66\6\0\10\66"+
    "\1\u019b\20\66\3\0\1\66\3\0\1\u019c\47\0\1\u019c"+
    "\27\0\1\u019c\12\0\1\66\1\10\7\0\1\66\1\10"+
    "\1\0\3\66\6\0\14\43\1\u019d\14\43\3\0\1\66"+
    "\16\0\1\66\1\10\7\0\1\66\1\10\1\0\3\66"+
    "\6\0\20\43\1\u019e\10\43\3\0\1\66\16\0\1\66"+
    "\1\10\7\0\1\66\1\10\1\0\3\66\6\0\1\u019f"+
    "\30\43\3\0\1\66\16\0\1\66\1\10\7\0\1\66"+
    "\1\10\1\0\3\66\6\0\31\43\3\0\1\u01a0\43\0"+
    "\1\u01a1\52\0\1\66\10\0\1\66\2\0\3\66\6\0"+
    "\4\66\1\u01a2\24\66\3\0\1\66\16\0\1\66\1\10"+
    "\7\0\1\66\1\10\1\0\3\66\6\0\12\43\1\u01a3"+
    "\16\43\3\0\1\66\5\0\1\u01a4\47\0\1\u01a4\27\0"+
    "\1\u01a4\10\0\1\66\10\0\1\66\2\0\3\66\6\0"+
    "\3\66\1\u01a5\25\66\3\0\1\66\16\0\1\66\1\10"+
    "\7\0\1\66\1\10\1\0\3\66\6\0\21\43\1\u01a6"+
    "\7\43\3\0\1\66\4\0\1\u01a7\57\0\1\u01a7\17\0"+
    "\1\u01a7\11\0\1\66\1\10\7\0\1\66\1\10\1\0"+
    "\3\66\6\0\4\43\1\u01a8\24\43\3\0\1\66\47\0"+
    "\1\u01a9\46\0\1\66\10\0\1\66\2\0\3\66\6\0"+
    "\13\66\1\u01aa\15\66\3\0\1\66\16\0\1\66\1\10"+
    "\7\0\1\66\1\10\1\0\3\66\6\0\10\43\1\u01ab"+
    "\20\43\3\0\1\66\3\0\1\u01ac\57\0\1\u01ad\32\0"+
    "\1\66\10\0\1\66\2\0\3\66\6\0\15\66\1\u01ae"+
    "\13\66\3\0\1\66\60\0\1\u01af\35\0\1\66\1\10"+
    "\7\0\1\66\1\10\1\0\3\66\6\0\23\43\1\u01b0"+
    "\5\43\3\0\1\66\66\0\1\u01b1\27\0\1\66\1\10"+
    "\7\0\1\66\1\10\1\0\3\66\6\0\20\43\1\u01b2"+
    "\10\43\3\0\1\66\16\0\1\66\10\0\1\66\2\0"+
    "\3\66\6\0\15\66\1\u01b3\13\66\3\0\1\66\16\0"+
    "\1\66\10\0\1\66\2\0\3\66\6\0\15\66\1\u01b4"+
    "\13\66\3\0\1\66\60\0\1\u01b5\35\0\1\66\10\0"+
    "\1\66\2\0\3\66\6\0\22\66\1\u01b6\6\66\3\0"+
    "\1\66\65\0\1\u01b7\30\0\1\66\10\0\1\66\2\0"+
    "\3\66\6\0\22\66\1\u01b8\6\66\3\0\1\66\16\0"+
    "\1\66\10\0\1\66\2\0\3\66\6\0\20\66\1\u01b9"+
    "\10\66\3\0\1\66\65\0\1\u01ba\30\0\1\66\10\0"+
    "\1\66\2\0\3\66\6\0\14\66\1\u01bb\14\66\3\0"+
    "\1\66\16\0\1\66\10\0\1\66\2\0\3\66\6\0"+
    "\30\66\1\u01bc\3\0\1\66\73\0\1\u01bd\22\0\1\66"+
    "\1\10\7\0\1\66\1\10\1\0\3\66\6\0\4\43"+
    "\1\u01be\24\43\3\0\1\66\16\0\1\66\1\10\7\0"+
    "\1\66\1\10\1\0\3\66\6\0\20\43\1\u01bf\10\43"+
    "\3\0\1\66\16\0\1\66\10\0\1\66\2\0\3\66"+
    "\6\0\15\66\1\u01c0\13\66\3\0\1\66\63\0\1\u01c1"+
    "\32\0\1\66\10\0\1\66\2\0\3\66\6\0\1\u01c2"+
    "\30\66\3\0\1\66\16\0\1\66\1\10\7\0\1\66"+
    "\1\10\1\0\3\66\6\0\31\43\3\0\1\u01c3\77\0"+
    "\1\u01c4\16\0\1\66\10\0\1\66\2\0\3\66\6\0"+
    "\10\66\1\u01c5\20\66\3\0\1\66\3\0\1\u01c6\12\0"+
    "\1\66\1\10\7\0\1\66\1\10\1\0\3\66\6\0"+
    "\13\43\1\u01c7\15\43\3\0\1\66\56\0\1\u01c8\37\0"+
    "\1\66\10\0\1\66\2\0\3\66\6\0\5\66\1\u01c9"+
    "\23\66\3\0\1\66\50\0\1\u01ca\45\0\1\66\1\10"+
    "\7\0\1\66\1\10\1\0\3\66\6\0\15\43\1\u01cb"+
    "\13\43\3\0\1\66\60\0\1\u01cc\35\0\1\66\1\10"+
    "\7\0\1\66\1\10\1\0\3\66\6\0\31\43\3\0"+
    "\1\u01cd\16\0\1\66\10\0\1\66\2\0\3\66\6\0"+
    "\10\66\1\u01ce\20\66\3\0\1\66\3\0\1\u01cf\47\0"+
    "\1\u01cf\27\0\1\u01cf\12\0\1\66\10\0\1\66\2\0"+
    "\3\66\6\0\4\66\1\u01d0\24\66\3\0\1\66\16\0"+
    "\1\66\10\0\1\66\2\0\3\66\6\0\10\66\1\u01d1"+
    "\20\66\3\0\1\66\3\0\1\u01d2\12\0\1\66\10\0"+
    "\1\66\2\0\3\66\6\0\4\66\1\u01d3\24\66\3\0"+
    "\1\66\47\0\1\u01d4\46\0\1\66\1\10\7\0\1\66"+
    "\1\10\1\0\3\66\6\0\15\43\1\u01d5\13\43\3\0"+
    "\1\66\16\0\1\66\1\10\7\0\1\66\1\10\1\0"+
    "\3\66\6\0\31\43\3\0\1\u01d6\16\0\1\66\10\0"+
    "\1\66\2\0\3\66\6\0\23\66\1\u01d7\5\66\3\0"+
    "\1\66\77\0\1\u01d8\16\0\1\66\10\0\1\66\2\0"+
    "\3\66\6\0\22\66\1\u01d9\6\66\3\0\1\66\16\0"+
    "\1\u01c3\10\0\1\u01c3\2\0\3\66\6\0\31\u01da\3\0"+
    "\1\u01c3\16\0\1\u01c4\10\0\1\u01c4\13\0\31\u01da\3\0"+
    "\1\u01c4\16\0\1\66\10\0\1\66\2\0\3\66\6\0"+
    "\6\66\1\u01db\22\66\3\0\1\66\51\0\1\u01dc\44\0"+
    "\1\66\1\10\7\0\1\66\1\10\1\0\3\66\6\0"+
    "\4\43\1\u01dd\24\43\3\0\1\66\47\0\1\u01de\46\0"+
    "\1\66\10\0\1\66\2\0\3\66\6\0\16\66\1\u01df"+
    "\12\66\3\0\1\66\61\0\1\u01e0\34\0\1\66\1\10"+
    "\7\0\1\66\1\10\1\0\3\66\6\0\3\43\1\u01e1"+
    "\25\43\3\0\1\66\46\0\1\u01e2\47\0\1\66\10\0"+
    "\1\66\2\0\3\66\6\0\1\u01e3\30\66\3\0\1\66"+
    "\16\0\1\66\10\0\1\66\2\0\3\66\6\0\15\66"+
    "\1\u01e4\13\66\3\0\1\66\60\0\1\u01e5\35\0\1\66"+
    "\10\0\1\66\2\0\3\66\6\0\1\u01e6\30\66\3\0"+
    "\1\66\16\0\1\66\10\0\1\66\2\0\3\66\6\0"+
    "\13\66\1\u01e7\15\66\3\0\1\66\56\0\1\u01e8\37\0"+
    "\1\66\1\10\7\0\1\66\1\10\1\0\3\66\6\0"+
    "\1\43\1\u01e9\27\43\3\0\1\66\16\0\1\66\10\0"+
    "\1\66\2\0\3\66\6\0\15\66\1\u01ea\13\66\3\0"+
    "\1\66\16\0\1\66\10\0\1\66\2\0\3\66\6\0"+
    "\14\66\1\u01eb\14\66\3\0\1\66\60\0\1\u01ec\35\0"+
    "\1\66\10\0\1\66\2\0\3\66\6\0\16\66\1\u01ed"+
    "\12\66\3\0\1\66\16\0\1\u01da\10\0\1\u01da\2\0"+
    "\3\u01da\6\0\31\u01da\3\0\1\u01da\16\0\1\66\10\0"+
    "\1\66\2\0\3\66\6\0\15\66\1\u01ee\13\66\3\0"+
    "\1\66\60\0\1\u01ef\35\0\1\66\10\0\1\66\2\0"+
    "\3\66\6\0\13\66\1\u01f0\15\66\3\0\1\66\16\0"+
    "\1\66\10\0\1\66\2\0\3\66\6\0\6\66\1\u01f1"+
    "\22\66\3\0\1\66\51\0\1\u01f2\44\0\1\66\10\0"+
    "\1\66\2\0\3\66\6\0\27\66\1\u01f3\1\66\3\0"+
    "\1\66\72\0\1\u01f4\23\0\1\66\1\10\7\0\1\66"+
    "\1\10\1\0\3\66\6\0\27\43\1\u01f5\1\43\3\0"+
    "\1\66\16\0\1\66\10\0\1\66\2\0\3\66\6\0"+
    "\23\66\1\u01f6\5\66\3\0\1\66\66\0\1\u01f7\27\0"+
    "\1\66\10\0\1\66\2\0\3\66\6\0\20\66\1\u01f8"+
    "\10\66\3\0\1\66\16\0\1\66\10\0\1\66\2\0"+
    "\3\66\6\0\4\66\1\u01f9\24\66\3\0\1\66\16\0"+
    "\1\66\1\10\7\0\1\66\1\10\1\0\3\66\6\0"+
    "\10\43\1\u01fa\20\43\3\0\1\66\3\0\1\u01fb\12\0"+
    "\1\66\10\0\1\66\2\0\3\66\6\0\14\66\1\u01fc"+
    "\14\66\3\0\1\66\57\0\1\u01fd\36\0\1\66\10\0"+
    "\1\66\2\0\3\66\6\0\10\66\1\u01fe\20\66\3\0"+
    "\1\66\3\0\1\u01ff\12\0\1\66\10\0\1\66\2\0"+
    "\3\66\6\0\1\u0200\30\66\3\0\1\66\16\0\1\66"+
    "\1\10\7\0\1\66\1\10\1\0\3\66\6\0\3\43"+
    "\1\u0201\25\43\3\0\1\66\46\0\1\u0202\47\0\1\66"+
    "\10\0\1\66\2\0\3\66\6\0\16\66\1\u0203\12\66"+
    "\3\0\1\66\61\0\1\u0204\34\0\1\66\10\0\1\66"+
    "\2\0\3\66\6\0\22\66\1\u0205\6\66\3\0\1\66"+
    "\16\0\1\66\10\0\1\66\2\0\3\66\6\0\16\66"+
    "\1\u0206\12\66\3\0\1\66\16\0\1\66\10\0\1\66"+
    "\2\0\3\66\6\0\20\66\1\u0207\10\66\3\0\1\66"+
    "\16\0\1\66\10\0\1\66\2\0\3\66\6\0\10\66"+
    "\1\u0208\20\66\3\0\1\66\3\0\1\u0209\12\0\1\66"+
    "\10\0\1\66\2\0\3\66\6\0\16\66\1\u020a\12\66"+
    "\3\0\1\66\61\0\1\u020b\24\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[25408];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\2\1\1\11\3\1\1\11\1\1\5\11"+
    "\1\1\1\11\2\1\2\11\1\1\2\11\23\1\5\11"+
    "\2\1\3\0\2\1\3\0\1\1\2\0\2\1\1\0"+
    "\43\1\1\0\2\11\3\0\1\11\1\1\1\0\1\11"+
    "\1\0\1\1\2\0\3\1\1\11\20\1\2\0\2\1"+
    "\1\0\1\1\1\0\2\1\1\0\4\1\1\0\5\1"+
    "\2\0\20\1\1\0\1\1\2\0\1\11\2\0\1\1"+
    "\2\0\2\1\1\0\4\1\1\0\2\1\1\11\4\1"+
    "\1\0\6\1\1\0\6\1\6\0\1\1\1\0\1\1"+
    "\1\11\1\1\1\11\1\1\1\11\1\0\3\1\1\0"+
    "\5\1\1\11\1\0\2\1\1\0\10\1\1\11\1\1"+
    "\1\0\5\1\1\0\1\1\3\0\1\1\4\0\2\1"+
    "\1\0\3\1\1\11\4\1\1\11\1\1\1\0\4\1"+
    "\1\0\6\1\1\0\1\11\4\0\1\1\1\0\1\11"+
    "\3\1\1\0\1\1\1\0\2\1\1\0\2\1\1\0"+
    "\2\1\1\0\5\1\1\0\3\1\1\11\1\1\1\11"+
    "\2\0\1\11\2\0\2\1\1\0\5\1\1\11\3\1"+
    "\1\11\1\1\1\0\1\1\1\0\4\1\3\0\1\11"+
    "\1\1\1\0\2\1\1\0\2\1\1\11\1\1\1\11"+
    "\2\1\1\11\2\1\1\0\2\1\1\0\2\1\1\0"+
    "\2\1\1\0\1\1\1\11\2\1\1\0\1\11\1\1"+
    "\1\11\1\1\1\0\1\1\1\0\5\1\1\0\1\1"+
    "\1\0\3\1\2\11\1\0\1\1\1\11\2\1\1\0"+
    "\4\1\1\0\2\1\1\11\2\1\1\0\1\1\1\11"+
    "\2\1\1\0\1\11\1\1\1\0\1\1\1\0\3\1"+
    "\1\11\1\1\1\0\2\1\1\11\2\1\1\0\3\1"+
    "\1\0\2\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\2\1\1\0\2\1\1\0\1\1"+
    "\1\11\3\1\1\0\3\1\1\0\1\1\1\11\1\1"+
    "\1\11\1\1\1\11\2\1\1\0\2\1\1\0\3\1"+
    "\1\0\2\1\1\11\2\1\1\11\1\1\1\11\2\1"+
    "\1\0\3\1\1\0\1\1\1\11\1\1\1\0\2\1"+
    "\1\11\1\1\1\11\4\1\1\0\1\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[523];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
private List<String> errorList;

	private Symbol symbol(int type) {
        String lexeme = yytext();
        //System.out.printf("Token tipo %d, lexeme %s, en linea %d, columna %d\n", type, lexeme == null ? "" : lexeme, yyline + 1, yycolumn + 1);
        return new Symbol(type, new Token(lexeme, yyline + 1, yycolumn + 1));
    }

    private Symbol symbol(int type, String lexeme) {
        //System.out.printf("Token tipo %d, lexeme %s, en linea %d, columna %d\n", type, lexeme == null ? "" : lexeme, yyline + 1, yycolumn + 1);
        return new Symbol(type, new Token(lexeme, yyline + 1, yycolumn + 1));
    }

    private void error(String lexeme) {
       // System.out.printf("Error Lexico en el Texto: %s  linea %d,  columna %d. \n", lexeme, yyline + 1, yycolumn + 1);
        errorList.add(String.format("Error Lexico del simbolo: %s , linea %d, columna %d,  no reconocido, resuelva!.", lexeme, yyline + 1, yycolumn + 1));
    }

    public List<String> getErrorList() {
        return errorList;
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexico(java.io.Reader in) {
    yyline = 1; 
  yycolumn = 1;
    errorList = new  ArrayList<>();
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return symbol(CADENA, yytext());
            }
            // fall through
          case 94: break;
          case 2:
            { error(yytext());
            }
            // fall through
          case 95: break;
          case 3:
            { /*Ignoramos*/
            }
            // fall through
          case 96: break;
          case 4:
            { return symbol(NOT, yytext());
            }
            // fall through
          case 97: break;
          case 5:
            { return symbol(COMILLA, yytext());
            }
            // fall through
          case 98: break;
          case 6:
            { return symbol(AND, yytext()); System.out.println("este es un "  + yytext());
            }
            // fall through
          case 99: break;
          case 7:
            { return symbol(APOSTROFO, yytext());
            }
            // fall through
          case 100: break;
          case 8:
            { return symbol(PARIN, yytext());
            }
            // fall through
          case 101: break;
          case 9:
            { return symbol(PAROUT, yytext());
            }
            // fall through
          case 102: break;
          case 10:
            { return symbol(PRODUCTO, yytext());
            }
            // fall through
          case 103: break;
          case 11:
            { return symbol(SUMA, yytext());
            }
            // fall through
          case 104: break;
          case 12:
            { return symbol(COMA, yytext());
            }
            // fall through
          case 105: break;
          case 13:
            { return symbol(RESTA, yytext());
            }
            // fall through
          case 106: break;
          case 14:
            { return symbol(DIVISION, yytext());
            }
            // fall through
          case 107: break;
          case 15:
            { return symbol(NUMENTERO, yytext());
            }
            // fall through
          case 108: break;
          case 16:
            { return symbol(DOSP, yytext());
            }
            // fall through
          case 109: break;
          case 17:
            { return symbol(PUNTOCOMA, yytext());
            }
            // fall through
          case 110: break;
          case 18:
            { return symbol(MEQ, yytext());
            }
            // fall through
          case 111: break;
          case 19:
            { return symbol(IGUAL, yytext());
            }
            // fall through
          case 112: break;
          case 20:
            { return symbol(MAQ, yytext());
            }
            // fall through
          case 113: break;
          case 21:
            { return symbol(ID, yytext());
            }
            // fall through
          case 114: break;
          case 22:
            { return symbol(CORIN, yytext());
            }
            // fall through
          case 115: break;
          case 23:
            { return symbol(COROUT, yytext());
            }
            // fall through
          case 116: break;
          case 24:
            { return symbol(LLAVEIN, yytext());
            }
            // fall through
          case 117: break;
          case 25:
            { return symbol(OR, yytext());
            }
            // fall through
          case 118: break;
          case 26:
            { return symbol(LLAVEOUT, yytext());
            }
            // fall through
          case 119: break;
          case 27:
            { return symbol(IDCM, yytext());
            }
            // fall through
          case 120: break;
          case 28:
            { return symbol(IF, yytext());
            }
            // fall through
          case 121: break;
          case 29:
            { /*ignorar*/
            }
            // fall through
          case 122: break;
          case 30:
            { return symbol(CARACTER, yytext());
            }
            // fall through
          case 123: break;
          case 31:
            { return symbol(NUMDECIMAL, yytext());
            }
            // fall through
          case 124: break;
          case 32:
            { return symbol(ALT, yytext());
            }
            // fall through
          case 125: break;
          case 33:
            { return symbol(ASCF, yytext());
            }
            // fall through
          case 126: break;
          case 34:
            { return symbol(P, yytext());
            }
            // fall through
          case 127: break;
          case 35:
            { return symbol(END, yytext());
            }
            // fall through
          case 128: break;
          case 36:
            { return symbol(SRC, yytext());
            }
            // fall through
          case 129: break;
          case 37:
            { return symbol(CHAR, yytext());
            }
            // fall through
          case 130: break;
          case 38:
            { return symbol(COLUMNA, yytext());
            }
            // fall through
          case 131: break;
          case 39:
            { return symbol(BR, yytext());
            }
            // fall through
          case 132: break;
          case 40:
            { return symbol(H1, yytext());
            }
            // fall through
          case 133: break;
          case 41:
            { return symbol(DESCF, yytext());
            }
            // fall through
          case 134: break;
          case 42:
            { return symbol(ELSE, yytext());
            }
            // fall through
          case 135: break;
          case 43:
            { return symbol(EXIT, yytext());
            }
            // fall through
          case 136: break;
          case 44:
            { return symbol(REFERENCIA, yytext());
            }
            // fall through
          case 137: break;
          case 45:
            { return symbol(INIT, yytext());
            }
            // fall through
          case 138: break;
          case 46:
            { return symbol(NAME, yytext());
            }
            // fall through
          case 139: break;
          case 47:
            { return symbol(FILA, yytext());
            }
            // fall through
          case 140: break;
          case 48:
            { return symbol(THEN, yytext());
            }
            // fall through
          case 141: break;
          case 49:
            { return symbol(BOOLEANOS, yytext());
            }
            // fall through
          case 142: break;
          case 50:
            { return symbol(TYPE, yytext());
            }
            // fall through
          case 143: break;
          case 51:
            { return symbol(CLASE, yytext());
            }
            // fall through
          case 144: break;
          case 52:
            { return symbol(COLOR, yytext());
            }
            // fall through
          case 145: break;
          case 53:
            { return symbol(DIV, yytext());
            }
            // fall through
          case 146: break;
          case 54:
            { return symbol(IMG, yytext());
            }
            // fall through
          case 147: break;
          case 55:
            { return symbol(WHILE, yytext());
            }
            // fall through
          case 148: break;
          case 56:
            { return symbol(WIDTH, yytext());
            }
            // fall through
          case 149: break;
          case 57:
            { return symbol(BODY, yytext());
            }
            // fall through
          case 150: break;
          case 58:
            { return symbol(HTML, yytext());
            }
            // fall through
          case 151: break;
          case 59:
            { return symbol(HEAD, yytext());
            }
            // fall through
          case 152: break;
          case 60:
            { return symbol(LINK, yytext());
            }
            // fall through
          case 153: break;
          case 61:
            { return symbol(SPAM, yytext());
            }
            // fall through
          case 154: break;
          case 62:
            { return symbol(HEIGHT, yytext());
            }
            // fall through
          case 155: break;
          case 63:
            { return symbol(HUNTIL, yytext());
            }
            // fall through
          case 156: break;
          case 64:
            { return symbol(INSERT, yytext());
            }
            // fall through
          case 157: break;
          case 65:
            { return symbol(REPEAT, yytext());
            }
            // fall through
          case 158: break;
          case 66:
            { return symbol(STRING, yytext());
            }
            // fall through
          case 159: break;
          case 67:
            { return symbol(HEXADECIMAL, yytext());
            }
            // fall through
          case 160: break;
          case 68:
            { return symbol(GLOBAL, yytext());
            }
            // fall through
          case 161: break;
          case 69:
            { return symbol(BOOLEANO, yytext());
            }
            // fall through
          case 162: break;
          case 70:
            { return symbol(INPUT, yytext());
            }
            // fall through
          case 163: break;
          case 71:
            { return symbol(TITLE, yytext());
            }
            // fall through
          case 164: break;
          case 72:
            { return symbol(DECIMAL, yytext());
            }
            // fall through
          case 165: break;
          case 73:
            { return symbol(ENTERO, yytext());
            }
            // fall through
          case 166: break;
          case 74:
            { return symbol(ONCLICK, yytext());
            }
            // fall through
          case 167: break;
          case 75:
            { return symbol(LOAD, yytext());
            }
            // fall through
          case 168: break;
          case 76:
            { return symbol(REVERSEF, yytext());
            }
            // fall through
          case 169: break;
          case 77:
            { return symbol(BUTTON, yytext());
            }
            // fall through
          case 170: break;
          case 78:
            { return symbol(OPTION, yytext());
            }
            // fall through
          case 171: break;
          case 79:
            { return symbol(SELECTED, yytext());
            }
            // fall through
          case 172: break;
          case 80:
            { return symbol(FONTSZ, yytext());
            }
            // fall through
          case 173: break;
          case 81:
            { return symbol(PROCESOS, yytext());
            }
            // fall through
          case 174: break;
          case 82:
            { return symbol(THENWHILE, yytext());
            }
            // fall through
          case 175: break;
          case 83:
            { return symbol(ALERTF, yytext());
            }
            // fall through
          case 176: break;
          case 84:
            { return symbol(BACKGROUND, yytext());
            }
            // fall through
          case 177: break;
          case 85:
            { return symbol(TEXTAREA, yytext());
            }
            // fall through
          case 178: break;
          case 86:
            { return symbol(LETPF, yytext());
            }
            // fall through
          case 179: break;
          case 87:
            { return symbol(ALINGN, yytext());
            }
            // fall through
          case 180: break;
          case 88:
            { return symbol(SCRIPT, yytext());
            }
            // fall through
          case 181: break;
          case 89:
            { return symbol(FONTFY, yytext());
            }
            // fall through
          case 182: break;
          case 90:
            { return symbol(LETIMF, yytext());
            }
            // fall through
          case 183: break;
          case 91:
            { return symbol(GETID, yytext());
            }
            // fall through
          case 184: break;
          case 92:
            { return symbol(NUMALEF, yytext());
            }
            // fall through
          case 185: break;
          case 93:
            { return symbol(CARALEF, yytext());
            }
            // fall through
          case 186: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Converts an int token code into the name of the
   * token by reflection on the cup symbol class/interface sym
   */
  private static String getTokenName(int token) {
    try {
      java.lang.reflect.Field [] classFields = sym.class.getFields();
      for (int i = 0; i < classFields.length; i++) {
        if (classFields[i].getInt(null) == token) {
          return classFields[i].getName();
        }
      }
    } catch (Exception e) {
      e.printStackTrace(System.err);
    }

    return "UNKNOWN TOKEN";
  }

  /**
   * Same as next_token but also prints the token to standard out
   * for debugging.
   */
  public java_cup.runtime.Symbol debug_next_token() throws java.io.IOException {
    java_cup.runtime.Symbol s = next_token();
    System.out.println( "line:" + (yyline+1) + " col:" + (yycolumn+1) + " --"+ yytext() + "--" + getTokenName(s.sym) + "--");
    return s;
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String[] argv) {
    if (argv.length == 0) {
      System.out.println("Usage : java Lexico [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          // Side-effect: is encodingName valid?
          java.nio.charset.Charset.forName(encodingName);
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Lexico scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Lexico(reader);
          while ( !scanner.zzAtEOF ) scanner.debug_next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
